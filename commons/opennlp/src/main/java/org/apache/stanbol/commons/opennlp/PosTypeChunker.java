begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|Span
import|;
end_import

begin_comment
comment|/**  * Simple version of a {@link opennlp.tools.chunker.Chunker} that uses the POS tags to build chunks.  * It does not implement the {@link opennlp.tools.chunker.Chunker} interface because implementing  * methods other than the {@link opennlp.tools.chunker.Chunker#chunkAsSpans(String[], String[])}  * is not feasible.<p>  * Defaults are based on the<a href="http://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html">  * Penn Treebank</a> tag set   *   * TODO:<ul>  *<li> Test if POS tags are the same for different languages  *<li> Check if it is possible to implement the {@link opennlp.tools.chunker.Chunker} interface  *</ul>  * @author Rupert Westenthaler  * @deprecated replaced by STANBOL-733 (stanbol nlp processing module  *  */
end_comment

begin_class
specifier|public
class|class
name|PosTypeChunker
block|{
specifier|private
specifier|final
name|double
name|minPosProb
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|followTypes
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|buildTypes
decl_stmt|;
comment|/**      * Creates an instance for the given language based on the configuration      * within the {@link PosTagsCollectionEnum}.      * @param lang The language      * @param minPosTagProbaility The minimum probability of a POS tag so that      * it is processed. In case of lower Probabilities POS tags are ignored and      * assumed to be matching.      * @return the instance or<code>null</code> if no configuration for the      * parsed language is present in the {@link PosTagsCollectionEnum}.      */
specifier|public
specifier|static
name|PosTypeChunker
name|getInstance
parameter_list|(
name|String
name|lang
parameter_list|,
name|double
name|minPosTagProbaility
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nounPosTagCollection
init|=
name|PosTagsCollectionEnum
operator|.
name|getPosTagCollection
argument_list|(
name|lang
argument_list|,
name|PosTypeCollectionType
operator|.
name|NOUN
argument_list|)
decl_stmt|;
if|if
condition|(
name|nounPosTagCollection
operator|!=
literal|null
operator|&&
operator|!
name|nounPosTagCollection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|PosTypeChunker
argument_list|(
name|nounPosTagCollection
argument_list|,
name|PosTagsCollectionEnum
operator|.
name|getPosTagCollection
argument_list|(
name|lang
argument_list|,
name|PosTypeCollectionType
operator|.
name|FOLLOW
argument_list|)
argument_list|,
name|minPosTagProbaility
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Initialise a new PosTypeChunker for the parsed POS tag collections. This      * Constructor can be used if no predefined Configuration for a given       * language is available in the {@link PosTagsCollectionEnum}<p>      * Note that buildPosTypes are added to the followed once. Therefore the      * followPosTypes may or may not include some/all buildPosTypes.      * @param buildPosTypes the POS types that trigger a new Chunk (MUST NOT be      *<code>null</code> nor {@link Set#isEmpty() empty}).      * @param followPosTypes additional POS types followed to extend Chunks (MAY      * BE<code>null</code> or empty).      */
specifier|public
name|PosTypeChunker
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|buildPosTypes
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|followPosTypes
parameter_list|,
name|double
name|minPosProb
parameter_list|)
block|{
if|if
condition|(
name|buildPosTypes
operator|==
literal|null
operator|||
name|buildPosTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The set of POS types used to"
operator|+
literal|"build Chunks MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|buildTypes
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|buildPosTypes
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|follow
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|follow
operator|.
name|addAll
argument_list|(
name|buildTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|followPosTypes
operator|!=
literal|null
condition|)
block|{
name|follow
operator|.
name|addAll
argument_list|(
name|followPosTypes
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|followTypes
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|follow
argument_list|)
expr_stmt|;
if|if
condition|(
name|minPosProb
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The minimum POS tag probalility MUST BE set to a value [0..1] or values< 0 to deactivate this feature (parsed="
operator|+
name|minPosProb
operator|+
literal|")!"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|minPosProb
operator|=
name|minPosProb
expr_stmt|;
block|}
block|}
comment|/**      * @param props the probabilities of the pos tags or<code>null</code> if      * not available      * @param pos the POS tags      * @return<code>true</code> if follow      */
specifier|private
name|boolean
name|followPOS
parameter_list|(
name|double
index|[]
name|props
parameter_list|,
name|String
modifier|...
name|pos
parameter_list|)
block|{
name|boolean
name|reject
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|props
operator|==
literal|null
operator|||
name|props
index|[
name|i
index|]
operator|>=
name|minPosProb
condition|)
block|{
if|if
condition|(
name|followTypes
operator|.
name|contains
argument_list|(
name|pos
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|reject
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|//else  prob to low ... do not process
block|}
comment|//in case we have not found a POS tag with a prob> minPosProb
comment|//return TRUE
return|return
operator|!
name|reject
return|;
block|}
specifier|private
name|boolean
name|includePOS
parameter_list|(
name|double
index|[]
name|props
parameter_list|,
name|String
modifier|...
name|pos
parameter_list|)
block|{
name|boolean
name|reject
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|props
operator|==
literal|null
operator|||
name|props
index|[
name|i
index|]
operator|>=
name|minPosProb
condition|)
block|{
if|if
condition|(
name|buildTypes
operator|.
name|contains
argument_list|(
name|pos
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|reject
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|//in case we have not found a POS tag with a prob> minPosProb
comment|//return TRUE
return|return
operator|!
name|reject
return|;
block|}
comment|/**      * The set of POS types followed to extend Chunks. This includes the      * {@link #getChunkPosTypes()} values      * @return the followTypes      */
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|getFollowedPosTypes
parameter_list|()
block|{
return|return
name|followTypes
return|;
block|}
comment|/**      * The set of POS types used to create Chunks      * @return the buildTypes      */
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|getChunkPosTypes
parameter_list|()
block|{
return|return
name|buildTypes
return|;
block|}
comment|/**      * Build the chunks based on the parsed tokens and POS tags.<p>      * This method is the equivalent to       * {@link opennlp.tools.chunker.Chunker#chunkAsSpans(String[], String[])}      * @param tokens the tokens      * @param tags the POS tags for the tokens      * @return the chunks as spans over the parsed tokens      */
specifier|public
name|Span
index|[]
name|chunkAsSpans
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|String
index|[]
name|tags
parameter_list|)
block|{
name|int
name|consumed
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Span
argument_list|>
name|chunks
init|=
operator|new
name|ArrayList
argument_list|<
name|Span
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|includePOS
argument_list|(
literal|null
argument_list|,
name|tags
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|int
name|start
init|=
name|i
decl_stmt|;
while|while
condition|(
name|start
operator|-
literal|1
operator|>
name|consumed
operator|&&
name|followPOS
argument_list|(
literal|null
argument_list|,
name|tags
index|[
name|start
operator|-
literal|1
index|]
argument_list|)
condition|)
block|{
name|start
operator|--
expr_stmt|;
comment|//follow backwards until consumed
block|}
name|int
name|followEnd
init|=
name|i
decl_stmt|;
name|int
name|end
init|=
name|i
decl_stmt|;
while|while
condition|(
name|followEnd
operator|+
literal|1
operator|<
name|tokens
operator|.
name|length
operator|&&
name|followPOS
argument_list|(
literal|null
argument_list|,
name|tags
index|[
name|followEnd
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
name|followEnd
operator|++
expr_stmt|;
comment|//follow
if|if
condition|(
name|includePOS
argument_list|(
literal|null
argument_list|,
name|tags
index|[
name|followEnd
index|]
argument_list|)
condition|)
block|{
name|end
operator|=
name|followEnd
expr_stmt|;
comment|//extend end only if act is include
block|}
block|}
name|chunks
operator|.
name|add
argument_list|(
operator|new
name|Span
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
comment|//                consumed = end;
name|i
operator|=
name|followEnd
expr_stmt|;
block|}
comment|//build no chunk for this token
block|}
return|return
name|chunks
operator|.
name|toArray
argument_list|(
operator|new
name|Span
index|[
name|chunks
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Build the chunks based on the parsed tokens and the one or more detected      * POS tags alternatives for the tokens.<p>      * @param tokens the tokens      * @param tags the POS tags for the tokens (1D:tokens; 2D:POS tags)      * @return the chunks as spans over the parsed tokens      */
specifier|public
name|Span
index|[]
name|chunkAsSpans
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|String
index|[]
index|[]
name|tags
parameter_list|,
name|double
index|[]
index|[]
name|props
parameter_list|)
block|{
comment|//NOTE: this is a 1:1 copy of the above method!! However this is the
comment|//      only solution, because merging them into a single one would
comment|//      need to copy the Stirng[] of the other into a String[][1] as
comment|//      used by this one :(
comment|//      If someone has a better Idea feel free to change!
comment|//      Rupert Westenthaler (28.Sep.2011)
name|int
name|consumed
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Span
argument_list|>
name|chunks
init|=
operator|new
name|ArrayList
argument_list|<
name|Span
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|includePOS
argument_list|(
name|props
index|[
name|i
index|]
argument_list|,
name|tags
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|int
name|start
init|=
name|i
decl_stmt|;
comment|//do not follow backwards!
while|while
condition|(
name|start
operator|-
literal|1
operator|>
name|consumed
operator|&&
name|followPOS
argument_list|(
name|props
index|[
name|start
operator|-
literal|1
index|]
argument_list|,
name|tags
index|[
name|start
operator|-
literal|1
index|]
argument_list|)
condition|)
block|{
name|start
operator|--
expr_stmt|;
comment|//follow backwards until consumed
block|}
name|int
name|followEnd
init|=
name|i
decl_stmt|;
name|int
name|end
init|=
name|i
decl_stmt|;
while|while
condition|(
name|followEnd
operator|+
literal|1
operator|<
name|tokens
operator|.
name|length
operator|&&
name|followPOS
argument_list|(
name|props
index|[
name|followEnd
operator|+
literal|1
index|]
argument_list|,
name|tags
index|[
name|followEnd
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
name|followEnd
operator|++
expr_stmt|;
comment|//follow
if|if
condition|(
name|includePOS
argument_list|(
name|props
index|[
name|followEnd
index|]
argument_list|,
name|tags
index|[
name|followEnd
index|]
argument_list|)
condition|)
block|{
name|end
operator|=
name|followEnd
expr_stmt|;
comment|//extend end only if act is include
block|}
block|}
name|chunks
operator|.
name|add
argument_list|(
operator|new
name|Span
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
comment|//                consumed = end;
name|i
operator|=
name|followEnd
expr_stmt|;
block|}
comment|//build no chunk for this token
block|}
return|return
name|chunks
operator|.
name|toArray
argument_list|(
operator|new
name|Span
index|[
name|chunks
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

