begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|Chunker
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|ChunkerME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|ChunkerModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|postag
operator|.
name|POSModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|postag
operator|.
name|POSTagger
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|postag
operator|.
name|POSTaggerME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceDetector
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceDetectorME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|SimpleTokenizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|TokenizerME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|Span
import|;
end_import

begin_class
specifier|public
class|class
name|TextAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextAnalyzer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|OpenNLP
name|openNLP
decl_stmt|;
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
specifier|private
name|boolean
name|forceSimpleTokenizer
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enablePosTagger
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enableChunker
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enableSentenceDetector
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|enablePosTypeChunker
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|forcePosTypeChunker
init|=
literal|true
decl_stmt|;
specifier|private
name|POSTaggerME
name|posTagger
decl_stmt|;
specifier|private
name|SentenceDetector
name|sentenceDetector
decl_stmt|;
specifier|private
name|ChunkerME
name|chunker
decl_stmt|;
specifier|private
name|PosTypeChunker
name|posTypeChunker
decl_stmt|;
specifier|private
name|Tokenizer
name|tokenizer
decl_stmt|;
specifier|public
name|TextAnalyzer
parameter_list|(
name|OpenNLP
name|openNLP
parameter_list|,
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|openNLP
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The OpenNLP component MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|language
operator|==
literal|null
operator|||
name|language
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed language MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|openNLP
operator|=
name|openNLP
expr_stmt|;
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
block|}
specifier|protected
specifier|final
name|POSTaggerME
name|getPosTagger
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enablePosTagger
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|posTagger
operator|==
literal|null
condition|)
block|{
name|posTagger
operator|=
name|initTagger
argument_list|()
expr_stmt|;
block|}
return|return
name|posTagger
return|;
block|}
specifier|protected
specifier|final
name|Tokenizer
name|getTokenizer
parameter_list|()
block|{
if|if
condition|(
name|tokenizer
operator|==
literal|null
condition|)
block|{
name|tokenizer
operator|=
name|initTokenizer
argument_list|()
expr_stmt|;
block|}
return|return
name|tokenizer
return|;
block|}
specifier|protected
specifier|final
name|ChunkerME
name|getChunker
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enableChunker
operator|||
name|forcePosTypeChunker
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|chunker
operator|==
literal|null
condition|)
block|{
name|chunker
operator|=
name|initChunker
argument_list|()
expr_stmt|;
block|}
return|return
name|chunker
return|;
block|}
specifier|protected
specifier|final
name|PosTypeChunker
name|getPosTypeChunker
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enableChunker
operator|||
operator|!
name|enablePosTagger
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|posTypeChunker
operator|==
literal|null
condition|)
block|{
name|posTypeChunker
operator|=
operator|new
name|PosTypeChunker
argument_list|()
expr_stmt|;
block|}
return|return
name|posTypeChunker
return|;
block|}
specifier|protected
specifier|final
name|SentenceDetector
name|getSentenceDetector
parameter_list|()
block|{
if|if
condition|(
operator|!
name|enableSentenceDetector
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|sentenceDetector
operator|==
literal|null
condition|)
block|{
name|sentenceDetector
operator|=
name|initSentence
argument_list|()
expr_stmt|;
block|}
return|return
name|sentenceDetector
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isSimpleTokenizerForced
parameter_list|()
block|{
return|return
name|forceSimpleTokenizer
return|;
block|}
specifier|public
specifier|final
name|void
name|forceSimpleTokenizer
parameter_list|(
name|boolean
name|useSimpleTokenizer
parameter_list|)
block|{
name|this
operator|.
name|forceSimpleTokenizer
operator|=
name|useSimpleTokenizer
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isPosTaggerEnable
parameter_list|()
block|{
return|return
name|enablePosTagger
return|;
block|}
specifier|public
specifier|final
name|void
name|enablePosTagger
parameter_list|(
name|boolean
name|enablePosTagger
parameter_list|)
block|{
name|this
operator|.
name|enablePosTagger
operator|=
name|enablePosTagger
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isChunkerEnabled
parameter_list|()
block|{
return|return
name|enableChunker
return|;
block|}
specifier|public
specifier|final
name|void
name|enableChunker
parameter_list|(
name|boolean
name|enableChunker
parameter_list|)
block|{
name|this
operator|.
name|enableChunker
operator|=
name|enableChunker
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isSentenceDetectorEnabled
parameter_list|()
block|{
return|return
name|enableSentenceDetector
return|;
block|}
specifier|public
specifier|final
name|void
name|enableSentenceDetector
parameter_list|(
name|boolean
name|enableSentenceDetector
parameter_list|)
block|{
name|this
operator|.
name|enableSentenceDetector
operator|=
name|enableSentenceDetector
expr_stmt|;
block|}
specifier|public
specifier|final
name|OpenNLP
name|getOpenNLP
parameter_list|()
block|{
return|return
name|openNLP
return|;
block|}
comment|/**      * The language used to analyse the parsed texts      * @return      */
specifier|public
specifier|final
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isPosTypeChunkerEnabled
parameter_list|()
block|{
return|return
name|enablePosTypeChunker
return|;
block|}
comment|/**      * Enables the used of the {@link PosTypeChunker} if no {@link Chunker} for      * the current {@link #getLanguage() language} is available.      * @param enablePosTypeChunker      */
specifier|public
specifier|final
name|void
name|enablePosTypeChunker
parameter_list|(
name|boolean
name|enablePosTypeChunker
parameter_list|)
block|{
name|this
operator|.
name|enablePosTypeChunker
operator|=
name|enablePosTypeChunker
expr_stmt|;
if|if
condition|(
operator|!
name|enablePosTypeChunker
condition|)
block|{
name|forcePosTypeChunker
argument_list|(
name|enablePosTypeChunker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|boolean
name|isPosTypeChunkerForced
parameter_list|()
block|{
return|return
name|forcePosTypeChunker
return|;
block|}
comment|/**      * Forces the use of the {@link PosTypeChunker} even if a {@link Chunker}      * for the current language would be available      * @param forcePosTypeChunker      */
specifier|public
specifier|final
name|void
name|forcePosTypeChunker
parameter_list|(
name|boolean
name|forcePosTypeChunker
parameter_list|)
block|{
name|this
operator|.
name|forcePosTypeChunker
operator|=
name|forcePosTypeChunker
expr_stmt|;
if|if
condition|(
name|forcePosTypeChunker
condition|)
block|{
name|enablePosTypeChunker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param language      * @return      */
specifier|private
name|Tokenizer
name|initTokenizer
parameter_list|()
block|{
name|Tokenizer
name|tokenizer
decl_stmt|;
if|if
condition|(
name|forceSimpleTokenizer
condition|)
block|{
name|tokenizer
operator|=
name|SimpleTokenizer
operator|.
name|INSTANCE
expr_stmt|;
block|}
else|else
block|{
name|tokenizer
operator|=
name|openNLP
operator|.
name|getTokenizer
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenizer
return|;
block|}
comment|/**      * @param language      * @return      */
specifier|private
name|POSTaggerME
name|initTagger
parameter_list|()
block|{
name|POSTaggerME
name|posTagger
decl_stmt|;
try|try
block|{
name|POSModel
name|posModel
init|=
name|openNLP
operator|.
name|getPartOfSpeachModel
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|posModel
operator|!=
literal|null
condition|)
block|{
name|posTagger
operator|=
operator|new
name|POSTaggerME
argument_list|(
name|posModel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No POS Model for language {}"
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|posTagger
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to load POS Model for language "
operator|+
name|language
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|posTagger
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|posTagger
return|;
block|}
comment|/**      * @param language      * @return      */
specifier|private
name|SentenceDetector
name|initSentence
parameter_list|()
block|{
name|SentenceDetector
name|sentDetect
decl_stmt|;
try|try
block|{
name|SentenceModel
name|sentModel
init|=
name|openNLP
operator|.
name|getSentenceModel
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|sentModel
operator|!=
literal|null
condition|)
block|{
name|sentDetect
operator|=
operator|new
name|SentenceDetectorME
argument_list|(
name|sentModel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No Sentence Detection Model for language {}"
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|sentDetect
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to load Sentence Detection Model for language "
operator|+
name|language
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sentDetect
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|sentDetect
return|;
block|}
comment|/**      * @param language      */
specifier|private
name|ChunkerME
name|initChunker
parameter_list|()
block|{
name|ChunkerME
name|chunker
decl_stmt|;
try|try
block|{
name|ChunkerModel
name|chunkerModel
init|=
name|openNLP
operator|.
name|getChunkerModel
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunkerModel
operator|!=
literal|null
condition|)
block|{
name|chunker
operator|=
operator|new
name|ChunkerME
argument_list|(
name|chunkerModel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No Chunker Model for language {}"
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|chunker
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unable to load Chunker Model for language "
operator|+
name|language
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|chunker
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|chunker
return|;
block|}
comment|/**      * Analyses the parsed text in a single chunk. No sentence detector is used      * @param sentence the sentence (text) to analyse      * @return the Analysed text      */
specifier|public
name|AnalysedText
name|analyseSentence
parameter_list|(
name|String
name|sentence
parameter_list|)
block|{
return|return
operator|new
name|AnalysedText
argument_list|(
name|sentence
argument_list|)
return|;
block|}
comment|/**      * Analyses sentence by sentence when {@link Iterator#next()} is called on      * the returned Iterator. Changes to the configuration of this class will      * have an effect on the analysis results of this iterator.<p>      * if no sentence detector is available the whole text is parsed at once.       * @param text The text to analyse      * @return Iterator the analyses the parsed text sentence by sentence on      * calls to {@link Iterator#next()}.      */
specifier|public
name|Iterator
argument_list|<
name|AnalysedText
argument_list|>
name|analyse
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|TextAnalysisIterator
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|private
specifier|final
class|class
name|TextAnalysisIterator
implements|implements
name|Iterator
argument_list|<
name|AnalysedText
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
specifier|private
specifier|final
name|Span
index|[]
name|sentenceSpans
decl_stmt|;
specifier|private
name|int
name|current
init|=
literal|0
decl_stmt|;
specifier|private
name|TextAnalysisIterator
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sentenceSpans
operator|=
operator|new
name|Span
index|[]
block|{}
expr_stmt|;
block|}
else|else
block|{
name|SentenceDetector
name|sd
init|=
name|getSentenceDetector
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
name|sentenceSpans
operator|=
name|sd
operator|.
name|sentPosDetect
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sentenceSpans
operator|=
operator|new
name|Span
index|[]
block|{
operator|new
name|Span
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
block|}
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|sentenceSpans
operator|.
name|length
operator|>
name|current
return|;
block|}
annotation|@
name|Override
specifier|public
name|AnalysedText
name|next
parameter_list|()
block|{
name|String
name|sentence
init|=
name|sentenceSpans
index|[
name|current
index|]
operator|.
name|getCoveredText
argument_list|(
name|text
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|current
operator|++
expr_stmt|;
return|return
operator|new
name|AnalysedText
argument_list|(
name|sentence
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Removal of Sentences of the prsed Text is not supported!"
argument_list|)
throw|;
block|}
block|}
specifier|public
class|class
name|AnalysedText
block|{
comment|//NOTE: Members are protected to allow the JVM direct access
specifier|protected
name|String
name|sentence
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Chunk
argument_list|>
name|chunks
decl_stmt|;
specifier|private
name|AnalysedText
parameter_list|(
name|String
name|sentence
parameter_list|)
block|{
name|this
operator|.
name|sentence
operator|=
name|sentence
expr_stmt|;
name|Span
index|[]
name|tokenSpans
init|=
name|getTokenizer
argument_list|()
operator|.
name|tokenizePos
argument_list|(
name|sentence
argument_list|)
decl_stmt|;
name|POSTaggerME
name|tagger
init|=
name|getPosTagger
argument_list|()
decl_stmt|;
name|ChunkerME
name|chunker
init|=
name|getChunker
argument_list|()
decl_stmt|;
name|PosTypeChunker
name|posTypeChunker
init|=
name|getPosTypeChunker
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
operator|new
name|String
index|[
name|tokenSpans
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|ti
init|=
literal|0
init|;
name|ti
operator|<
name|tokenSpans
operator|.
name|length
condition|;
name|ti
operator|++
control|)
block|{
name|tokens
index|[
name|ti
index|]
operator|=
name|tokenSpans
index|[
name|ti
index|]
operator|.
name|getCoveredText
argument_list|(
name|sentence
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|pos
decl_stmt|;
name|double
index|[]
name|posProbs
decl_stmt|;
name|Span
index|[]
name|chunkSpans
decl_stmt|;
name|double
index|[]
name|chunkProps
decl_stmt|;
if|if
condition|(
name|tagger
operator|!=
literal|null
condition|)
block|{
name|pos
operator|=
name|tagger
operator|.
name|tag
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|posProbs
operator|=
name|tagger
operator|.
name|probs
argument_list|()
expr_stmt|;
if|if
condition|(
name|chunker
operator|!=
literal|null
condition|)
block|{
name|chunkSpans
operator|=
name|chunker
operator|.
name|chunkAsSpans
argument_list|(
name|tokens
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|chunkProps
operator|=
name|chunker
operator|.
name|probs
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|posTypeChunker
operator|!=
literal|null
condition|)
block|{
comment|//TODO: move initialisation to main class
name|chunkSpans
operator|=
name|posTypeChunker
operator|.
name|chunkAsSpans
argument_list|(
name|tokens
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|chunkProps
operator|=
operator|new
name|double
index|[
name|chunkSpans
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|chunkProps
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chunkSpans
operator|=
literal|null
expr_stmt|;
name|chunkProps
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|pos
operator|=
literal|null
expr_stmt|;
name|posProbs
operator|=
literal|null
expr_stmt|;
name|chunkSpans
operator|=
literal|null
expr_stmt|;
name|chunkProps
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|tokens
operator|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
name|tokenSpans
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokenSpans
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|Token
argument_list|(
name|tokenSpans
index|[
name|i
index|]
argument_list|,
name|tokens
index|[
name|i
index|]
argument_list|,
name|pos
operator|!=
literal|null
condition|?
name|pos
index|[
name|i
index|]
else|:
literal|null
argument_list|,
name|pos
operator|!=
literal|null
condition|?
name|posProbs
index|[
name|i
index|]
else|:
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chunkSpans
operator|!=
literal|null
condition|)
block|{
name|chunks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Chunk
argument_list|>
argument_list|(
name|chunkSpans
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunkSpans
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chunks
operator|.
name|add
argument_list|(
operator|new
name|Chunk
argument_list|(
name|chunkSpans
index|[
name|i
index|]
argument_list|,
name|chunkProps
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|chunks
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|getTokens
parameter_list|()
block|{
return|return
name|tokens
return|;
block|}
specifier|public
name|List
argument_list|<
name|Chunk
argument_list|>
name|getChunks
parameter_list|()
block|{
return|return
name|chunks
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|sentence
return|;
block|}
specifier|public
class|class
name|Token
block|{
comment|//NOTE: Members are protected to allow the JVM direct access
specifier|protected
specifier|final
name|Span
name|span
decl_stmt|;
specifier|protected
name|String
name|token
decl_stmt|;
specifier|protected
specifier|final
name|String
name|pos
decl_stmt|;
specifier|protected
specifier|final
name|double
name|posProbability
decl_stmt|;
specifier|private
name|Token
parameter_list|(
name|Span
name|span
parameter_list|,
name|String
name|token
parameter_list|,
name|String
name|pos
parameter_list|,
name|double
name|posProbability
parameter_list|)
block|{
name|this
operator|.
name|span
operator|=
name|span
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|posProbability
operator|=
name|posProbability
expr_stmt|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|span
operator|.
name|getStart
argument_list|()
return|;
block|}
specifier|public
name|int
name|getEnd
parameter_list|()
block|{
return|return
name|span
operator|.
name|getEnd
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPosTag
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
comment|/**              * @return the POS probability              */
specifier|public
name|double
name|getPosProbability
parameter_list|()
block|{
return|return
name|posProbability
return|;
block|}
comment|/**              * Getter for the value of this token              * @return              */
specifier|public
name|String
name|getText
parameter_list|()
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|span
operator|.
name|getCoveredText
argument_list|(
name|sentence
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|+
operator|(
name|pos
operator|!=
literal|null
condition|?
literal|'_'
operator|+
name|pos
else|:
literal|""
operator|)
return|;
block|}
block|}
specifier|public
class|class
name|Chunk
block|{
comment|//NOTE: Members are protected to allow the JVM direct access
specifier|protected
specifier|final
name|Span
name|span
decl_stmt|;
specifier|protected
specifier|final
name|Span
name|chunkSpan
decl_stmt|;
specifier|protected
specifier|final
name|double
name|probability
decl_stmt|;
specifier|protected
name|String
name|text
decl_stmt|;
specifier|private
name|Chunk
parameter_list|(
name|Span
name|chunkSpan
parameter_list|,
name|double
name|probability
parameter_list|)
block|{
name|this
operator|.
name|chunkSpan
operator|=
name|chunkSpan
expr_stmt|;
name|this
operator|.
name|span
operator|=
operator|new
name|Span
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|chunkSpan
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|getStart
argument_list|()
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
name|chunkSpan
operator|.
name|getEnd
argument_list|()
argument_list|)
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|probability
operator|=
name|probability
expr_stmt|;
block|}
comment|/**              * @return the span              */
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|chunkSpan
operator|.
name|getStart
argument_list|()
return|;
block|}
specifier|public
name|int
name|getEnd
parameter_list|()
block|{
return|return
name|chunkSpan
operator|.
name|getEnd
argument_list|()
return|;
block|}
comment|/**              * @return the probability              */
specifier|public
name|double
name|getProbability
parameter_list|()
block|{
return|return
name|probability
return|;
block|}
comment|/**              * The text of this chunk              * @return              */
specifier|public
name|String
name|getText
parameter_list|()
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|text
operator|=
name|span
operator|.
name|getCoveredText
argument_list|(
name|sentence
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getText
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

