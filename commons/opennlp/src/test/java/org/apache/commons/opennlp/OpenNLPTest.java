begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|opennlp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|Chunker
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|chunker
operator|.
name|ChunkerModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|TokenNameFinder
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|TokenNameFinderModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|postag
operator|.
name|POSModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|postag
operator|.
name|POSTagger
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceDetector
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentdetect
operator|.
name|SentenceModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|SimpleTokenizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|tokenize
operator|.
name|TokenizerModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test loading of OpenNLP models. This was previously implicitly tested by the  * in the meantime removed TextAnalyzer test.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|OpenNLPTest
block|{
specifier|private
specifier|static
name|OpenNLP
name|openNLP
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|openNLP
operator|=
operator|new
name|OpenNLP
argument_list|(
operator|new
name|ClasspathDataFileProvider
argument_list|(
literal|"DUMMY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadEnTokenizer
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenizerModel
name|model
init|=
name|openNLP
operator|.
name|getTokenizerModel
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|openNLP
operator|.
name|getTokenizer
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMissingTokenizerModel
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenizerModel
name|model
init|=
name|openNLP
operator|.
name|getTokenizerModel
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
comment|//there is not Russian model ...
comment|//so it is expected that the model is NULL
name|Assert
operator|.
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFallbackToSimpleTokenizer
parameter_list|()
throws|throws
name|IOException
block|{
comment|//however for the tokenizer it is expected that a fallback to the
comment|//SimpleTokenizer is made
name|Tokenizer
name|tokenizer
init|=
name|openNLP
operator|.
name|getTokenizer
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SimpleTokenizer
operator|.
name|INSTANCE
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadEnSentence
parameter_list|()
throws|throws
name|IOException
block|{
name|SentenceModel
name|model
init|=
name|openNLP
operator|.
name|getSentenceModel
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|SentenceDetector
name|sentDetector
init|=
name|openNLP
operator|.
name|getSentenceDetector
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sentDetector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMissingSentence
parameter_list|()
throws|throws
name|IOException
block|{
name|SentenceModel
name|model
init|=
name|openNLP
operator|.
name|getSentenceModel
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|SentenceDetector
name|sentDetector
init|=
name|openNLP
operator|.
name|getSentenceDetector
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|sentDetector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadEnPOS
parameter_list|()
throws|throws
name|IOException
block|{
name|POSModel
name|model
init|=
name|openNLP
operator|.
name|getPartOfSpeachModel
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|POSTagger
name|posTagger
init|=
name|openNLP
operator|.
name|getPartOfSpeechTagger
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|posTagger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMissingPOS
parameter_list|()
throws|throws
name|IOException
block|{
name|POSModel
name|model
init|=
name|openNLP
operator|.
name|getPartOfSpeachModel
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|POSTagger
name|posTagger
init|=
name|openNLP
operator|.
name|getPartOfSpeechTagger
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|posTagger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadEnChunker
parameter_list|()
throws|throws
name|IOException
block|{
name|ChunkerModel
name|model
init|=
name|openNLP
operator|.
name|getChunkerModel
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Chunker
name|chunker
init|=
name|openNLP
operator|.
name|getChunker
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|chunker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMissingChunker
parameter_list|()
throws|throws
name|IOException
block|{
name|ChunkerModel
name|model
init|=
name|openNLP
operator|.
name|getChunkerModel
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Chunker
name|chunker
init|=
name|openNLP
operator|.
name|getChunker
argument_list|(
literal|"ru"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|chunker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadEnNER
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"person"
argument_list|,
literal|"organization"
argument_list|,
literal|"location"
argument_list|)
control|)
block|{
name|TokenNameFinderModel
name|model
init|=
name|openNLP
operator|.
name|getNameModel
argument_list|(
name|type
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|TokenNameFinder
name|ner
init|=
name|openNLP
operator|.
name|getNameFinder
argument_list|(
name|type
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ner
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMissingNER
parameter_list|()
throws|throws
name|IOException
block|{
comment|//first unknown type
name|TokenNameFinderModel
name|model
init|=
name|openNLP
operator|.
name|getNameModel
argument_list|(
literal|"person2"
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|TokenNameFinder
name|ner
init|=
name|openNLP
operator|.
name|getNameFinder
argument_list|(
literal|"person2"
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ner
argument_list|)
expr_stmt|;
comment|//unknown language
name|model
operator|=
name|openNLP
operator|.
name|getNameModel
argument_list|(
literal|"person"
argument_list|,
literal|"ru"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|ner
operator|=
name|openNLP
operator|.
name|getNameFinder
argument_list|(
literal|"person"
argument_list|,
literal|"ru"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadModelByName
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenizerModel
name|tokenModel
init|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|TokenizerModel
operator|.
name|class
argument_list|,
literal|"en-token.bin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tokenModel
argument_list|)
expr_stmt|;
name|SentenceModel
name|sentModel
init|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|SentenceModel
operator|.
name|class
argument_list|,
literal|"en-sent.bin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sentModel
argument_list|)
expr_stmt|;
name|POSModel
name|posModel
init|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|POSModel
operator|.
name|class
argument_list|,
literal|"en-pos-maxent.bin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|posModel
argument_list|)
expr_stmt|;
name|ChunkerModel
name|chunkModel
init|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|ChunkerModel
operator|.
name|class
argument_list|,
literal|"en-chunker.bin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|chunkModel
argument_list|)
expr_stmt|;
name|TokenNameFinderModel
name|nerModel
init|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|TokenNameFinderModel
operator|.
name|class
argument_list|,
literal|"en-ner-person.bin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nerModel
argument_list|)
expr_stmt|;
comment|//unavailable model
name|tokenModel
operator|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|TokenizerModel
operator|.
name|class
argument_list|,
literal|"ru-token.bin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tokenModel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLoadIncompatibleModelByName
parameter_list|()
throws|throws
name|IOException
block|{
name|SentenceModel
name|sentModel
init|=
name|openNLP
operator|.
name|getModel
argument_list|(
name|SentenceModel
operator|.
name|class
argument_list|,
literal|"en-token.bin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sentModel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

