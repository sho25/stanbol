begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|opennlp
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|OpenNLP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|AnalysedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|AnalysedText
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|opennlp
operator|.
name|TextAnalyzer
operator|.
name|AnalysedText
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TextAnalyzerTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SINGLE_SENTENCE
init|=
literal|"Dr Patrick Marshall (1869 - November 1950) was a"
operator|+
literal|" geologist who lived in New Zealand and worked at the University of Otago."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|SINGLE_SENTENCE_TOKENS
init|=
operator|new
name|String
index|[]
block|{
literal|"Dr"
block|,
literal|"Patrick"
block|,
literal|"Marshall"
block|,
literal|"("
block|,
literal|"1869"
block|,
literal|"-"
block|,
literal|"November"
block|,
literal|"1950"
block|,
literal|")"
block|,
literal|"was"
block|,
literal|"a"
block|,
literal|"geologist"
block|,
literal|"who"
block|,
literal|"lived"
block|,
literal|"in"
block|,
literal|"New"
block|,
literal|"Zealand"
block|,
literal|"and"
block|,
literal|"worked"
block|,
literal|"at"
block|,
literal|"the"
block|,
literal|"University"
block|,
literal|"of"
block|,
literal|"Otago"
block|,
literal|"."
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MULTI_SENTENCES
init|=
literal|"The life of Patrick Marshall.\n\n"
operator|+
literal|"Dr Patrick Marshall (1869 - November 1950) was a geologist who lived "
operator|+
literal|"in New Zealand and worked at the University of Otago. "
operator|+
literal|"This is another unrelated sentence without any name."
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
index|[]
name|MULTIPLE_SENTENCE_TOKENS
init|=
operator|new
name|String
index|[
literal|3
index|]
index|[]
decl_stmt|;
static|static
block|{
name|MULTIPLE_SENTENCE_TOKENS
index|[
literal|0
index|]
operator|=
operator|new
name|String
index|[]
block|{
literal|"The"
block|,
literal|"life"
block|,
literal|"of"
block|,
literal|"Patrick"
block|,
literal|"Marshall"
block|,
literal|"."
block|}
expr_stmt|;
name|MULTIPLE_SENTENCE_TOKENS
index|[
literal|1
index|]
operator|=
name|SINGLE_SENTENCE_TOKENS
expr_stmt|;
name|MULTIPLE_SENTENCE_TOKENS
index|[
literal|2
index|]
operator|=
operator|new
name|String
index|[]
block|{
literal|"This"
block|,
literal|"is"
block|,
literal|"another"
block|,
literal|"unrelated"
block|,
literal|"sentence"
block|,
literal|"without"
block|,
literal|"any"
block|,
literal|"name"
block|,
literal|"."
block|}
expr_stmt|;
block|}
specifier|private
specifier|static
name|OpenNLP
name|openNLP
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
name|openNLP
operator|=
operator|new
name|OpenNLP
argument_list|(
operator|new
name|ClasspathDataFileProvider
argument_list|(
literal|"DUMMY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleSentenceDefaultConfig
parameter_list|()
block|{
name|TextAnalyzer
name|analyzer
init|=
operator|new
name|TextAnalyzer
argument_list|(
name|openNLP
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|AnalysedText
name|analysed
init|=
name|analyzer
operator|.
name|analyseSentence
argument_list|(
name|SINGLE_SENTENCE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|analysed
argument_list|)
expr_stmt|;
comment|//check the default config
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isSimpleTokenizerForced
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTaggerEnable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerForced
argument_list|()
argument_list|)
expr_stmt|;
name|checkSingleSentence
argument_list|(
name|analysed
argument_list|,
name|SINGLE_SENTENCE_TOKENS
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleSentenceChunkerConfig
parameter_list|()
block|{
name|TextAnalyzer
name|analyzer
init|=
operator|new
name|TextAnalyzer
argument_list|(
name|openNLP
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|forcePosTypeChunker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AnalysedText
name|analysed
init|=
name|analyzer
operator|.
name|analyseSentence
argument_list|(
name|SINGLE_SENTENCE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|analysed
argument_list|)
expr_stmt|;
comment|//check the default config
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isSimpleTokenizerForced
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTaggerEnable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerForced
argument_list|()
argument_list|)
expr_stmt|;
name|checkSingleSentence
argument_list|(
name|analysed
argument_list|,
name|SINGLE_SENTENCE_TOKENS
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleSentenceNoChunkerConfig
parameter_list|()
block|{
name|TextAnalyzer
name|analyzer
init|=
operator|new
name|TextAnalyzer
argument_list|(
name|openNLP
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|enableChunker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AnalysedText
name|analysed
init|=
name|analyzer
operator|.
name|analyseSentence
argument_list|(
name|SINGLE_SENTENCE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|analysed
argument_list|)
expr_stmt|;
comment|//check the default config
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isSimpleTokenizerForced
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTaggerEnable
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|analyzer
operator|.
name|isChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerForced
argument_list|()
argument_list|)
expr_stmt|;
name|checkSingleSentence
argument_list|(
name|analysed
argument_list|,
name|SINGLE_SENTENCE_TOKENS
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleSentenceNoChunkerNoPosConfig
parameter_list|()
block|{
name|TextAnalyzer
name|analyzer
init|=
operator|new
name|TextAnalyzer
argument_list|(
name|openNLP
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|enablePosTagger
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|enableChunker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//must be ignored for Chunks if no Pos
name|AnalysedText
name|analysed
init|=
name|analyzer
operator|.
name|analyseSentence
argument_list|(
name|SINGLE_SENTENCE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|analysed
argument_list|)
expr_stmt|;
comment|//check the default config
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isSimpleTokenizerForced
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|analyzer
operator|.
name|isPosTaggerEnable
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|analyzer
operator|.
name|isPosTypeChunkerForced
argument_list|()
argument_list|)
expr_stmt|;
name|checkSingleSentence
argument_list|(
name|analysed
argument_list|,
name|SINGLE_SENTENCE_TOKENS
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleSentenceDefaultConfig
parameter_list|()
block|{
name|TextAnalyzer
name|analyzer
init|=
operator|new
name|TextAnalyzer
argument_list|(
name|openNLP
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|AnalysedText
argument_list|>
name|analysedSentences
init|=
name|analyzer
operator|.
name|analyse
argument_list|(
name|MULTI_SENTENCES
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|analysedSentences
argument_list|)
expr_stmt|;
name|int
name|sentenceCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|analysedSentences
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AnalysedText
name|analysed
init|=
name|analysedSentences
operator|.
name|next
argument_list|()
decl_stmt|;
name|checkSingleSentence
argument_list|(
name|analysed
argument_list|,
name|MULTIPLE_SENTENCE_TOKENS
index|[
name|sentenceCount
index|]
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sentenceCount
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|sentenceCount
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param tokens      */
specifier|private
name|void
name|checkSingleSentence
parameter_list|(
name|AnalysedText
name|analysed
parameter_list|,
name|String
index|[]
name|expectedTokens
parameter_list|,
name|boolean
name|posTaggerActive
parameter_list|,
name|boolean
name|chunkerActive
parameter_list|)
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|analysed
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|tokens
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
name|expectedTokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|lastEnd
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
name|assertEquals
argument_list|(
name|expectedTokens
index|[
name|i
index|]
argument_list|,
name|token
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|posTaggerActive
condition|)
block|{
name|assertNotNull
argument_list|(
name|token
operator|.
name|getPosTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getPosProbability
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|token
operator|.
name|getPosTag
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getPosProbability
argument_list|()
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|token
operator|.
name|getStart
argument_list|()
operator|>=
name|lastEnd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|token
operator|.
name|getEnd
argument_list|()
operator|>
name|token
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|lastEnd
operator|=
name|token
operator|.
name|getEnd
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Chunk
argument_list|>
name|chunks
init|=
name|analysed
operator|.
name|getChunks
argument_list|()
decl_stmt|;
if|if
condition|(
name|chunkerActive
condition|)
block|{
name|assertNotNull
argument_list|(
name|chunks
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|lastEnd
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Chunk
name|chunk
range|:
name|chunks
control|)
block|{
name|assertTrue
argument_list|(
name|chunk
operator|.
name|getStart
argument_list|()
operator|>=
name|lastEnd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunk
operator|.
name|getEnd
argument_list|()
operator|>=
name|chunk
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunk
operator|.
name|getEnd
argument_list|()
operator|<
name|expectedTokens
operator|.
name|length
argument_list|)
expr_stmt|;
name|lastEnd
operator|=
name|chunk
operator|.
name|getEnd
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|String
name|chunkText
init|=
name|chunk
operator|.
name|getText
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|analysed
operator|.
name|getText
argument_list|()
operator|.
name|indexOf
argument_list|(
name|chunkText
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ct
init|=
name|chunk
operator|.
name|getStart
argument_list|()
init|;
name|ct
operator|<=
name|chunk
operator|.
name|getEnd
argument_list|()
condition|;
name|ct
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|chunkText
operator|.
name|indexOf
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|ct
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
block|}
else|else
block|{
name|assertNull
argument_list|(
name|chunks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

