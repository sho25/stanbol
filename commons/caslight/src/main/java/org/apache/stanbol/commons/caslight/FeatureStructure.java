begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|caslight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * This class represents a UIMA Feature Structure.   * @author Mihály Héder<mihaly.heder@sztaki.hu>  */
end_comment

begin_class
specifier|public
class|class
name|FeatureStructure
block|{
name|String
name|id
decl_stmt|;
name|String
name|typeName
decl_stmt|;
comment|//Set<String> superTypes;
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
decl_stmt|;
name|String
name|coveredText
decl_stmt|;
comment|/**      * Comparator for Features      * @param<Feature>       */
class|class
name|FeatureComparator
parameter_list|<
name|Feature
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|Feature
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Feature
name|t
parameter_list|,
name|Feature
name|t1
parameter_list|)
block|{
return|return
name|t
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|t1
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Creatues a new FeatureStructure      * @param id Identifier      * @param typeName Type name      */
specifier|public
name|FeatureStructure
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|typeName
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
name|this
operator|.
name|features
operator|=
operator|new
name|TreeSet
argument_list|<
name|Feature
argument_list|>
argument_list|(
operator|new
name|FeatureComparator
argument_list|<
name|Feature
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the set of the features.       * @return       */
specifier|public
name|Set
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
comment|/**      * Returns the id of this feature structure      * @return       */
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Sets the id of this feature structure      * @param id       */
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Adds a feature to this Feature Structure      * @param feature       */
specifier|public
name|void
name|addFeature
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|this
operator|.
name|features
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a feature by its name      * @param key The feature name      * @return       */
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Feature
argument_list|>
name|it
init|=
name|features
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Feature
name|f
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the Feature Structure's type name.      * @return       */
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|typeName
return|;
block|}
comment|/**      * Sets the type name of this feature structure.      * @param typeName       */
specifier|public
name|void
name|setTypeName
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
block|}
comment|/**      * A customized toString method that prints this Feature Structure and its Feature values.      * @return       */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Feature id:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" typeName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * If this FS has begin and end features, this function calculates the corresponding       * covered text from the subject of annotation.      * @param sofaString the subject of annotation string      * @return the covered text or null      */
specifier|public
name|String
name|getSofaChunk
parameter_list|(
name|String
name|sofaString
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getFeature
argument_list|(
literal|"begin"
argument_list|)
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getFeature
argument_list|(
literal|"end"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|sofaChunk
decl_stmt|;
try|try
block|{
name|sofaChunk
operator|=
name|sofaString
operator|.
name|substring
argument_list|(
name|this
operator|.
name|getFeature
argument_list|(
literal|"begin"
argument_list|)
operator|.
name|getValueAsInteger
argument_list|()
argument_list|,
name|this
operator|.
name|getFeature
argument_list|(
literal|"end"
argument_list|)
operator|.
name|getValueAsInteger
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StringIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|sofaChunk
operator|=
literal|"ERROR: string index out of sofa bounds. begin:"
operator|+
name|this
operator|.
name|getFeature
argument_list|(
literal|"begin"
argument_list|)
operator|.
name|getValueAsString
argument_list|()
operator|+
literal|" end:"
operator|+
name|this
operator|.
name|getFeature
argument_list|(
literal|"end"
argument_list|)
operator|.
name|getValueAsString
argument_list|()
expr_stmt|;
block|}
return|return
name|sofaChunk
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns the covered text.      * @return       */
specifier|public
name|String
name|getCoveredText
parameter_list|()
block|{
return|return
name|coveredText
return|;
block|}
comment|/**      * Sets the covered Text.      * @param coveredText       */
specifier|public
name|void
name|setCoveredText
parameter_list|(
name|String
name|coveredText
parameter_list|)
block|{
name|this
operator|.
name|coveredText
operator|=
name|coveredText
expr_stmt|;
block|}
block|}
end_class

end_unit

