begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|launchpad
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AllPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|launchpad
operator|.
name|base
operator|.
name|shared
operator|.
name|SharedConstants
operator|.
name|SLING_HOME
import|;
end_import

begin_class
specifier|public
class|class
name|Main
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_STANBOL_HOME
init|=
literal|"stanbol"
decl_stmt|;
comment|/**      * If this argument is set Stanbol is started without a securitymanager      */
specifier|public
specifier|static
specifier|final
name|String
name|NOSECURITYARG
init|=
literal|"-no-security"
decl_stmt|;
comment|/**      * @param args      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|home
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SLING_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
name|home
operator|=
operator|new
name|File
argument_list|(
name|DEFAULT_STANBOL_HOME
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|SLING_HOME
argument_list|,
name|home
argument_list|)
expr_stmt|;
block|}
comment|//else do not override user configured values
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|argsList
operator|.
name|contains
argument_list|(
name|NOSECURITYARG
argument_list|)
condition|)
block|{
name|argsList
operator|.
name|remove
argument_list|(
name|NOSECURITYARG
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|=
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Policy
operator|.
name|setPolicy
argument_list|(
operator|new
name|Policy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PermissionCollection
name|getPermissions
parameter_list|(
name|ProtectionDomain
name|domain
parameter_list|)
block|{
name|PermissionCollection
name|result
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|AllPermission
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|SecurityManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//now use the standard Apache Sling launcher to do the job
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|launchpad
operator|.
name|app
operator|.
name|Main
operator|.
name|main
argument_list|(
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

