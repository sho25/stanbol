begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|standalone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility that allows to use the {@link DataFileProvider} to lookup   * solrindex archives outside of OSGI.<p>  * Usage:<ul>  *<li> {@link ServiceLoader} is used to search for DataFileProviders outside of  * OSGI. So make sure to have a default constructor and provide the required  * "org.apache.stanbol.commons.stanboltools.datafileprovider.DataFileProvider" files  * within the "META-INF/services" within your jar.  *<li> An instance of this class will load datafiles found within   * {@link #INDEX_BASE_PATH} ("solr/core/"). If you do not want to register an own  * {@link DataFileProvider} implementation with the {@link ServiceLoader} utility  * copy the files to this directory.  *<li> To register server our own datafile you might want to consider to extend  * this implementation by calling the protected constructor with two parameters.  * and parsing the path to your data files as second parameter. Do not forget to  * register your DataFileProvider with the {@link ServiceLoader} utility.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ClassPathDataFileProvider
implements|implements
name|DataFileProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Solr Core configuration are loaded form "solr/core/{core-name}      */
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_BASE_PATH
init|=
literal|"solr/core/"
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|String
name|symbolicName
decl_stmt|;
comment|/**      * Loads solr index configurations from "solr/core/" via the java classpath      */
specifier|public
name|ClassPathDataFileProvider
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a DataFileProvider that loads SolrIndexConfigurations via the      * classpath relative to {@value #INDEX_BASE_PATH}.      * @param bundleSymbolicName the symbolic name of the bundle to accept      * requests from or<code>null</code> to accept any request.      */
specifier|protected
name|ClassPathDataFileProvider
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|symbolicName
operator|=
name|bundleSymbolicName
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
operator|==
literal|null
condition|?
name|INDEX_BASE_PATH
else|:
comment|//use default path
comment|// else check if we need to add an '/' to the parsed path
operator|(
name|path
operator|.
name|isEmpty
argument_list|()
operator|||
name|path
operator|.
name|charAt
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'/'
operator|)
condition|?
name|path
operator|+
literal|'/'
else|:
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|dataFile
init|=
name|getDataFile
argument_list|(
name|bundleSymbolicName
argument_list|,
name|filename
argument_list|)
decl_stmt|;
comment|// Returning null is fine - if we don't have the data file, another
comment|// provider might supply it
return|return
name|dataFile
operator|!=
literal|null
condition|?
name|dataFile
operator|.
name|openStream
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|filename
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|comments
parameter_list|)
block|{
return|return
name|getDataFile
argument_list|(
name|bundleSymbolicName
argument_list|,
name|filename
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * @param bundleSymbolicName      * @param filename      * @return      */
specifier|private
name|URL
name|getDataFile
parameter_list|(
name|String
name|bundleSymbolicName
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
comment|//if the parsed bundleSymbolicName is null accept any request
comment|//if not, than check if the request is from the correct bundle.
if|if
condition|(
name|bundleSymbolicName
operator|!=
literal|null
operator|&&
operator|!
name|bundleSymbolicName
operator|.
name|equals
argument_list|(
name|bundleSymbolicName
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Requested bundleSymbolicName {} does not match mine ({}), request ignored"
argument_list|,
name|bundleSymbolicName
argument_list|,
name|symbolicName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// load default OpenNLP models from classpath (embedded in the defaultdata bundle)
specifier|final
name|String
name|resourcePath
init|=
name|path
operator|+
name|filename
decl_stmt|;
specifier|final
name|URL
name|dataFile
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
comment|//log.debug("Resource {} found: {}", (in == null ? "NOT" : ""), resourcePath);
return|return
name|dataFile
return|;
block|}
block|}
end_class

end_unit

