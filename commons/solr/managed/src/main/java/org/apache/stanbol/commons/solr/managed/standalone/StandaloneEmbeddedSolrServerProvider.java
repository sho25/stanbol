begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|standalone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|IndexReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides {@link EmbeddedSolrServer} instances based on the  * {@link StandaloneManagedSolrServer} implementation. Only intended to be used  * outside of an OSGI environment. If running within an OSGI Environment  * this functionality is provided by an {@link SolrServerProvider} implementation  * that uses {@link CoreContainer}s and {@link SolrCore}s registered as  * OSGI services.  * @see StandaloneManagedSolrServer  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|StandaloneEmbeddedSolrServerProvider
block|{
specifier|private
specifier|static
name|StandaloneEmbeddedSolrServerProvider
name|instance
decl_stmt|;
specifier|public
specifier|static
name|StandaloneEmbeddedSolrServerProvider
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|StandaloneEmbeddedSolrServerProvider
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StandaloneEmbeddedSolrServerProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Private constructor used to create the singleton.      */
specifier|private
name|StandaloneEmbeddedSolrServerProvider
parameter_list|()
block|{}
specifier|public
name|SolrServer
name|getSolrServer
parameter_list|(
name|IndexReference
name|indexRef
parameter_list|)
block|{
if|if
condition|(
name|indexRef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed InexReference MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|StandaloneManagedSolrServer
name|server
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Create EmbeddedSolrServer for Server: {}, Index: {}"
argument_list|,
name|indexRef
operator|.
name|getServer
argument_list|()
argument_list|,
name|indexRef
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexRef
operator|.
name|getServer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|server
operator|=
name|StandaloneManagedSolrServer
operator|.
name|getManagedServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|server
operator|=
name|StandaloneManagedSolrServer
operator|.
name|getManagedServer
argument_list|(
name|indexRef
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"> Managed Solr server with name {} not found -> return null"
argument_list|,
name|indexRef
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"> use managed Solr server with name {}"
argument_list|,
name|server
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|coreName
decl_stmt|;
if|if
condition|(
name|indexRef
operator|.
name|getIndex
argument_list|()
operator|==
literal|null
condition|)
block|{
name|coreName
operator|=
name|server
operator|.
name|getDefaultCore
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexRef
operator|.
name|isPath
argument_list|()
condition|)
block|{
name|coreName
operator|=
name|server
operator|.
name|getCoreForDirectory
argument_list|(
name|indexRef
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreName
operator|=
name|indexRef
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|coreName
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|EmbeddedSolrServer
argument_list|(
name|server
operator|.
name|getCoreContainer
argument_list|()
argument_list|,
name|coreName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

