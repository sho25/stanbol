begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceConfigurationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|AbstractAnalysisFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SPIClassIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@link BundleActivator} that initialises all {@link CharFilterFactory},  * {@link TokenizerFactory} and {@link TokenFilterFactory} implementations  * present in the current module as OSGI services.<p>  * Users need to extend this class, but do not need to provide any additional  * functionality.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAnalyzerFactoryActivator
implements|implements
name|BundleActivator
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractAnalyzerFactoryActivator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractAnalysisFactory
argument_list|>
argument_list|,
name|String
index|[]
argument_list|>
name|SUFFIXES
decl_stmt|;
static|static
block|{
comment|//Defaults are based on the source code of Solr 4.1
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractAnalysisFactory
argument_list|>
argument_list|,
name|String
index|[]
argument_list|>
name|suffixes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|AbstractAnalysisFactory
argument_list|>
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|suffixes
operator|.
name|put
argument_list|(
name|TokenFilterFactory
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|TokenFilterFactory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
block|,
literal|"FilterFactory"
block|}
argument_list|)
expr_stmt|;
name|SUFFIXES
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|suffixes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|charFilterFactoryRegistrations
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|tokenizerFactoryRegistrations
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|tokenFilterFactoryRegistrations
decl_stmt|;
specifier|protected
name|AbstractAnalyzerFactoryActivator
parameter_list|()
block|{
name|this
operator|.
name|classLoader
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|//we need to reset the context ClassLoader to avoid leaking of Solr
comment|//versions present in the System (when Stanbol is running in an embedded
comment|//OSGI environment)
name|ClassLoader
name|ccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|this
operator|.
name|classLoader
argument_list|)
expr_stmt|;
name|charFilterFactoryRegistrations
operator|=
name|registerAnalyzerFactories
argument_list|(
name|context
argument_list|,
name|classLoader
argument_list|,
name|CharFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenizerFactoryRegistrations
operator|=
name|registerAnalyzerFactories
argument_list|(
name|context
argument_list|,
name|classLoader
argument_list|,
name|TokenizerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|tokenFilterFactoryRegistrations
operator|=
name|registerAnalyzerFactories
argument_list|(
name|context
argument_list|,
name|classLoader
argument_list|,
name|TokenFilterFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|ccl
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|ServiceRegistration
name|sr
range|:
name|charFilterFactoryRegistrations
control|)
block|{
name|sr
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ServiceRegistration
name|sr
range|:
name|tokenizerFactoryRegistrations
control|)
block|{
name|sr
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ServiceRegistration
name|sr
range|:
name|tokenFilterFactoryRegistrations
control|)
block|{
name|sr
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Helper class that registers Lucene 4 {@link AbstractAnalysisFactory} instances      * with the OSGI service registry.      *<p>      * It uses the {@link SPIClassIterator} to load instances from the provided      * {@link ClassLoader}. Note that only factories noted in<code>META-INF/serivces</code>      * files embedded within the current module will be found and registered.      * This means that this code needs typically be used in the Bundle Activator for       * all modules providing Solr analyzer factories.           * @param bc The BundleContext used to register the services      * @param classloader the classloader of the current modlue      * @param type the type of the Factories to register      * @return the ServiceRegistrations for the found factories      */
specifier|protected
parameter_list|<
name|S
extends|extends
name|AbstractAnalysisFactory
parameter_list|>
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|registerAnalyzerFactories
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|ClassLoader
name|classloader
parameter_list|,
name|Class
argument_list|<
name|S
argument_list|>
name|type
parameter_list|)
block|{
comment|//this code is based on org.apache.lucene.analysis.util.AnalysisSPILoader
comment|//but registers the loaded classes as services to the OSGI environment
name|SPIClassIterator
argument_list|<
name|S
argument_list|>
name|loader
init|=
name|SPIClassIterator
operator|.
name|get
argument_list|(
name|type
argument_list|,
name|classloader
argument_list|)
decl_stmt|;
name|String
index|[]
name|suffixes
init|=
name|SUFFIXES
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffixes
operator|==
literal|null
condition|)
block|{
name|suffixes
operator|=
operator|new
name|String
index|[]
block|{
name|type
operator|.
name|getSimpleName
argument_list|()
block|}
expr_stmt|;
block|}
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|registrations
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceRegistration
argument_list|>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Register {} for Bundle {}"
argument_list|,
name|type
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|bc
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|loader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|S
argument_list|>
name|service
init|=
name|loader
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|clazzName
init|=
name|service
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|suffix
range|:
name|suffixes
control|)
block|{
if|if
condition|(
name|clazzName
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|name
operator|=
name|clazzName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clazzName
operator|.
name|length
argument_list|()
operator|-
name|suffix
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceConfigurationError
argument_list|(
literal|"The class name "
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|" has wrong suffix, allowed are: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|suffixes
argument_list|)
argument_list|)
throw|;
block|}
name|AbstractAnalysisFactory
name|factory
decl_stmt|;
try|try
block|{
name|factory
operator|=
name|service
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"SPI class of type "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" with name '"
operator|+
name|name
operator|+
literal|"' cannot be instantiated. This is likely "
operator|+
literal|"due to a misconfiguration of the java class '"
operator|+
name|service
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|prop
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|prop
operator|.
name|put
argument_list|(
name|SolrConstants
operator|.
name|PROPERTY_ANALYZER_FACTORY_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Version
name|version
init|=
name|factory
operator|.
name|getLuceneMatchVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|put
argument_list|(
name|SolrConstants
operator|.
name|PROPERTY_LUCENE_MATCH_VERSION
argument_list|,
name|version
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//use 0 - bundle id as service ranking. This ensures that if two
comment|//factories do use the same name the one provided by the bundle with the
comment|//lower id is used by default
name|int
name|serviceRanking
init|=
literal|0
operator|-
operator|(
name|int
operator|)
name|bc
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
name|prop
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|serviceRanking
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|" ... {} (name={})"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|bc
operator|.
name|registerService
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|factory
argument_list|,
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|registrations
return|;
block|}
block|}
end_class

end_unit

