begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|ServiceReferenceRankingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_comment
comment|/**  * Tracks the {@link CoreContainer} of the {@link SolrCore} referenced by the  * parsed {@link IndexReference}. All getService** and getServiceReference**  * methods do consider {@link Constants#SERVICE_RANKING}.<p>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|RegisteredSolrServerTracker
extends|extends
name|ServiceTracker
block|{
comment|/**      * In case<code>{@link IndexReference#isPath()} == true</code> than we need      * to track registered {@link SolrCore}s, because we do not know the      * {@link CoreContainer} in advance. In all other cases the      * {@link CoreContainer} is tracked. This variable avoids instanceof checks      */
specifier|private
specifier|final
name|boolean
name|trackingSolrCore
decl_stmt|;
comment|/**      * needed to create {@link EmbeddedSolrServer} instances      */
specifier|private
specifier|final
name|String
name|coreName
decl_stmt|;
comment|/**      * Creates a new Tracker for the parsed {@link IndexReference}      * @param context the BundleContext used for tracking      * @param reference the index reference      * @throws InvalidSyntaxException if the {@link Filter} could not be      * created for the parsed {@link IndexReference}.      * @throws IllegalArgumentException if the parsed {@link IndexReference} is       *<code>null</code>      */
specifier|public
name|RegisteredSolrServerTracker
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|IndexReference
name|reference
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|reference
operator|!=
literal|null
condition|?
name|reference
operator|.
name|isPath
argument_list|()
condition|?
name|context
operator|.
name|createFilter
argument_list|(
name|reference
operator|.
name|getIndexFilter
argument_list|()
argument_list|)
else|:
name|context
operator|.
name|createFilter
argument_list|(
name|reference
operator|.
name|getServerFilter
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed IndexReference MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|reference
operator|.
name|isPath
argument_list|()
condition|)
block|{
name|trackingSolrCore
operator|=
literal|true
expr_stmt|;
name|coreName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|trackingSolrCore
operator|=
literal|false
expr_stmt|;
name|coreName
operator|=
name|reference
operator|.
name|getIndex
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SolrServer
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|String
name|coreName
decl_stmt|;
name|CoreContainer
name|server
decl_stmt|;
if|if
condition|(
name|trackingSolrCore
condition|)
block|{
name|SolrCore
name|core
init|=
operator|(
name|SolrCore
operator|)
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|coreName
operator|=
name|core
operator|.
name|getName
argument_list|()
expr_stmt|;
name|CoreDescriptor
name|descriptior
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptior
operator|==
literal|null
condition|)
block|{
comment|//core not registered with a container!
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//ignore
block|}
else|else
block|{
name|server
operator|=
name|descriptior
operator|.
name|getCoreContainer
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|server
operator|=
operator|(
name|CoreContainer
operator|)
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|coreName
operator|=
name|this
operator|.
name|coreName
expr_stmt|;
block|}
return|return
operator|new
name|EmbeddedSolrServer
argument_list|(
name|server
argument_list|,
name|coreName
argument_list|)
return|;
block|}
comment|/**      * Overrides to provides a Array sorted by {@link Constants#SERVICE_RANKING}      * @see ServiceTracker#getServiceReferences()      */
annotation|@
name|Override
specifier|public
name|ServiceReference
index|[]
name|getServiceReferences
parameter_list|()
block|{
name|ServiceReference
index|[]
name|refs
init|=
name|super
operator|.
name|getServiceReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|refs
argument_list|,
name|ServiceReferenceRankingComparator
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
return|return
name|refs
return|;
block|}
comment|/**      * Overrides to provide the {@link ServiceReference} with the highest      * {@link Constants#SERVICE_RANKING}.      * @see ServiceTracker#getServiceReference()      */
annotation|@
name|Override
specifier|public
name|ServiceReference
name|getServiceReference
parameter_list|()
block|{
name|ServiceReference
index|[]
name|refs
init|=
name|super
operator|.
name|getServiceReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|refs
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Overrides to provide the SolrServer with the highest       * {@link Constants#SERVICE_RANKING}.      * @see ServiceTracker#getService()      */
annotation|@
name|Override
specifier|public
name|SolrServer
name|getService
parameter_list|()
block|{
name|ServiceReference
name|ref
init|=
name|getServiceReference
argument_list|()
decl_stmt|;
return|return
name|ref
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|SolrServer
operator|)
name|getService
argument_list|(
name|ref
argument_list|)
return|;
block|}
comment|/**      * Overrides to provide a {@link SolrServer} instead of {@link Object}      * @see ServiceTracker#getService(ServiceReference)      */
annotation|@
name|Override
specifier|public
name|SolrServer
name|getService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
return|return
name|reference
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|SolrServer
operator|)
name|super
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
return|;
block|}
comment|/**      * Overrides to provide a array of {@link SolrServer} that is sorted by      * {@link Constants#SERVICE_RANKING}.      * @see ServiceTracker#getServices()      */
annotation|@
name|Override
specifier|public
name|SolrServer
index|[]
name|getServices
parameter_list|()
block|{
name|ServiceReference
index|[]
name|refs
init|=
name|getServiceReferences
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SolrServer
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|(
name|refs
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
name|SolrServer
name|server
init|=
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|//else null ... ignore
block|}
block|}
return|return
name|servers
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|servers
operator|.
name|toArray
argument_list|(
operator|new
name|SolrServer
index|[
name|servers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

