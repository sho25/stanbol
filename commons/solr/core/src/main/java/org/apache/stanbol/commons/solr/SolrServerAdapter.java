begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_DATA_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_INDEX_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_RANKING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_SERVER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_CORE_SOLR_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_SERVER_CORES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_SERVER_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_SERVER_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_SERVER_PUBLISH_REST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_SERVER_RANKING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|PROPERTY_SOLR_XML_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|SOLR_CONFIG_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|SOLR_SCHEMA_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
operator|.
name|SOLR_XML_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|SERVICE_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CloseHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|impl
operator|.
name|OsgiSolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This Class 'wraps' a Solr {@link CoreContainer} with all its registered   * {@link SolrCore}s and registers them as OSGI services. It therefore adapts  * the components framework as used by Apache Solr to the OSGI.<p>  * This class itself is no OSGI component, but is intended to be used by  * other classes that allow to register/manage Solr {@link CoreContainer}  * running within the same JVM.<p>  * Properties set for CoreContainers are:<ul>  *<li> {@link SolrConstants#PROPERTY_SERVER_NAME}: The name assigned to  * the SolrServer as parsed by {@link SolrServerProperties#getServerName()}. If  * not defined than the directory of the SolrServer is used as name  *<li> {@link SolrConstants#PROPERTY_SERVER_DIR} the directory of the   * {@link CoreContainer} (SolrHome)  *<li> {@link SolrConstants#PROPERTY_SOLR_XML_NAME}: the name of the  * 'solr.xml' file  *<li> {@link SolrConstants#PROPERTY_SERVER_RANKING}: The   * {@link Constants#SERVICE_RANKING} for the {@link CoreContainer} used for all  * its core if not overridden.    *</ul>  *<p>  * Properties set for {@link SolrCore}s are:<ul>  *<li> The {@link SolrConstants#PROPERTY_SERVER_NAME name} and   * {@link SolrConstants#PROPERTY_SERVER_DIR dir} of the   * {@link CoreContainer} this {@link SolrCore} is part of  *<li> {@link SolrConstants#PROPERTY_CORE_NAME}: The name this SolrCore  * is registered with the CoreContainer.  *<li> {@link SolrConstants#PROPERTY_CORE_DIR}: The   * {@link CoreDescriptor#getInstanceDir() instance directory} of this SolrCore.  * By default this is '{@link SolrConstants#PROPERTY_SERVER_DIR CoreContainer.dir}/  * {@link SolrConstants#PROPERTY_CORE_NAME SolrCore.name}'  *<li> The {@link SolrConstants#PROPERTY_CORE_SCHEMA} and   * {@link SolrConstants#PROPERTY_CORE_SOLR_CONF} holding the names of the  * according core configuration files.  *<li> The {@link SolrConstants#PROPERTY_CORE_DATA_DIR} and  * {@link SolrConstants#PROPERTY_CORE_INDEX_DIR}.  *<li> The {@link SolrConstants#PROPERTY_CORE_RANKING}: the   * {@link Constants#SERVICE_RANKING} for the {@link SolrCore}. If not set the  * service ranking of the {@link CoreContainer} is used.  *</ul>  *<p>  *<b>Notes:</b><ul>  *<li>{@link CoreContainer} does not provide Events for changes in its configuration.  * Therefore the OSGI service registration for the CoreContainer can only be  * assured if the interface of this Class is used to change the state of the  * CoreContainer.  *<li> {@link SolrCore}s allow to register a {@link CloseHook} to get notified if a  * SolrCore is closed. Therefore this implementation can assure that closed  * {@link SolrCore}s are also unregistered as OSGI services.  *</ul>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|SolrServerAdapter
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrServerAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CoreRegistration
argument_list|>
name|registrations
decl_stmt|;
specifier|protected
specifier|final
name|CoreContainer
name|server
decl_stmt|;
specifier|protected
specifier|final
name|ServiceRegistration
name|serverRegistration
decl_stmt|;
specifier|protected
specifier|final
name|SolrServerProperties
name|serverProperties
decl_stmt|;
specifier|protected
specifier|final
name|BundleContext
name|context
decl_stmt|;
comment|/**      * Used to skip registration of OSGI services during the initialisation      * of the {@link CoreContainer}.<p>      * This is necessary to avoid deadlocks with      * OSGI allowing only a single thread to register services and the      * {@link CoreContainer} using a thread pool to initialise SolrCores during      * startup. The combination of this would result in deadlock if the      * {@link SolrServerAdapter} is created within a activate method and the      * CoreContainer does contain more then a single {@link SolrCore} to load.      *<p>      *       */
specifier|private
name|boolean
name|initialised
init|=
literal|false
decl_stmt|;
comment|/**      * This implements CloseHook as used by {@link SolrCore} to notify about      * the event that a specific SolrCore was finally closed. This is the only      * way to get notified if a SolrCore is removed by other means than using      * this class (e.g. by using the AdminRequestHandler)      */
specifier|private
specifier|final
name|CloseHook
name|closeHook
init|=
operator|new
name|CloseHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|server
operator|.
name|getCoreNames
argument_list|(
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|registrations
init|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|CoreRegistration
name|coreRegistration
init|=
name|registrations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|//we need to check if the core registered for the
comment|//parsed name is still the same as parsed
if|if
condition|(
name|coreRegistration
operator|.
name|getCore
argument_list|()
operator|.
name|equals
argument_list|(
name|core
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"unregister Core with name '{}' based on call to"
operator|+
literal|" CloseHook#close()"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|coreRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Core registered for name '{}' is not the same as"
operator|+
literal|" parsed to CloseHook#close()"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//update the OSGI service for the CoreContainer
name|updateServerRegistration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
comment|//If we want to delete SolrCores from Disc, this can be done here!
block|}
block|}
decl_stmt|;
comment|/**      * Creates and Initialise a Solr {@link CoreContainer} based on the provided      * {@link SolrServerProperties} and registers it and all its configured       * {@link SolrCore}s as OSGI services by using the provided {@link BundleContext}.      * @throws SAXException On any error while parsing the solr.xml file used to       * initialise the {@link CoreContainer}      * @throws IOException On any error while accessing the solr.xml used to       * initialise the {@link CoreContainer} or the home directory for the       * {@link CoreContainer}      * @throws ParserConfigurationException Configuration error of the XML parser      * @throws IllegalArgumentException if any of the parsed parameters is      *<code>null</code> or the {@link SolrServerProperties} do not contain a      * valid value for the {@link SolrConstants#PROPERTY_SERVER_DIR}       * property.      */
specifier|public
name|SolrServerAdapter
parameter_list|(
specifier|final
name|BundleContext
name|context
parameter_list|,
name|SolrServerProperties
name|parsedServerProperties
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|parsedServerProperties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The prsed Server Properties MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed BundlContext used to register "
operator|+
literal|"the Solr Components as OSGI services MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|File
name|solrDir
init|=
name|parsedServerProperties
operator|.
name|getServerDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SolrServerPropertis MUST contain a value for the '"
operator|+
name|PROPERTY_SERVER_DIR
operator|+
literal|"' property (value: '"
operator|+
name|parsedServerProperties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_DIR
argument_list|)
operator|+
literal|"')"
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
comment|//create a clone so that only we control who changes to the properties
name|serverProperties
operator|=
name|parsedServerProperties
operator|.
name|clone
argument_list|()
expr_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|OsgiSolrResourceLoader
argument_list|(
name|context
argument_list|,
name|solrDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|SolrServerAdapter
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|ClassLoader
name|classLoader
init|=
name|updateContextClassLoader
argument_list|()
decl_stmt|;
name|CoreContainer
name|container
decl_stmt|;
try|try
block|{
name|container
operator|=
operator|new
name|OsgiCoreContainer
argument_list|(
name|loader
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
name|File
name|solrCof
init|=
operator|new
name|File
argument_list|(
name|solrDir
argument_list|,
name|parsedServerProperties
operator|.
name|getSolrXml
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|registrations
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CoreRegistration
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|serverName
init|=
name|serverProperties
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverName
operator|==
literal|null
condition|)
block|{
comment|//set the name to the absolute path of the solr dir
name|serverProperties
operator|.
name|setServerName
argument_list|(
name|solrDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//now load the cores
name|classLoader
operator|=
name|updateContextClassLoader
argument_list|()
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    ... load SolrConfig {}"
argument_list|,
name|solrCof
argument_list|)
expr_stmt|;
name|container
operator|.
name|load
argument_list|(
name|solrDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solrCof
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"      - loaded SolrConfig {}"
argument_list|,
name|solrCof
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
comment|//add the currently available cores to the properties
name|updateCoreNamesInServerProperties
argument_list|()
expr_stmt|;
comment|//register the SolrServer
name|this
operator|.
name|serverRegistration
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|CoreContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|server
argument_list|,
name|serverProperties
argument_list|)
expr_stmt|;
comment|//activate OSGI service registration on changes of the CoreContainer
name|initialised
operator|=
literal|true
expr_stmt|;
comment|//register the cores;
for|for
control|(
name|String
name|coreName
range|:
name|server
operator|.
name|getCoreNames
argument_list|()
control|)
block|{
name|SolrCore
name|core
init|=
name|server
operator|.
name|getCore
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
try|try
block|{
name|registerCoreService
argument_list|(
name|coreName
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|core
operator|.
name|addCloseHook
argument_list|(
name|closeHook
argument_list|)
expr_stmt|;
comment|//add a closeHook
block|}
finally|finally
block|{
comment|//decrease the reference count
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Shutdown the {@link CoreContainer} and all {@link SolrCore}s managed by       * this instance. This will also cause all OSGI services to be unregistered      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|Collection
argument_list|<
name|CoreRegistration
argument_list|>
name|coreRegistrations
decl_stmt|;
synchronized|synchronized
init|(
name|registrations
init|)
block|{
name|coreRegistrations
operator|=
operator|new
name|ArrayList
argument_list|<
name|CoreRegistration
argument_list|>
argument_list|(
name|registrations
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CoreRegistration
name|reg
range|:
name|coreRegistrations
control|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|registrations
operator|.
name|remove
argument_list|(
name|reg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"removed Registration for SolrCore {}"
argument_list|,
name|reg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//unregister the serviceRegistration for the CoreContainer
name|serverRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
comment|//shutdown the CoreContainer itself
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Removes the SolrCore for with the given name. This will also unregister      * the according OSGI service. Note that SolrCores can be registerd with      * several names.      * @param name the name of the core to remove      */
specifier|public
name|void
name|removeCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Remove Core {} on CoreContainer {}"
argument_list|,
name|name
argument_list|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|server
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|CoreRegistration
name|reg
init|=
name|registrations
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|cleanupSolrCore
argument_list|(
name|core
argument_list|)
expr_stmt|;
comment|//server.persist();
comment|//update the OSGI service for the CoreContainer
name|updateServerRegistration
argument_list|()
expr_stmt|;
block|}
comment|//else core already removed -> nothing to do
block|}
comment|/**      * Reloads a SolrCore e.g. to apply a change in its configuration      * @param name the name of the Core to reload      * @return The ServiceReference to the SolrCore.      * @throws ParserConfigurationException if the XML parser could not be configured      * @throws IOException indicated an error related to accessing the configured resource      * @throws SAXException indicated an formatting error in the xml configuration files.      */
specifier|public
name|void
name|reloadCore
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
comment|//try to reload
name|log
operator|.
name|info
argument_list|(
literal|"Reload Core {} on CoreContainer {}"
argument_list|,
name|name
argument_list|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|updateContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
comment|//TODO: what happens if the core with 'name' is no longer present?
name|server
operator|.
name|reload
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
comment|//if succeeded (re-)register the core
name|registerCoreService
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//update the OSGI service for the CoreContainer
name|updateServerRegistration
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the {@link ClassLoader} of the {@link Thread#currentThread()} to the      * ClassLoader of {@link SolrServerAdapter} to ensure that all needed      * Solr dependencies are loaded via the Bundle Classpath of the      *<code>org.apache.commons.solr</code> bundle.<p>      * Make sure that the ClassLoader is reset to the original value - as      * returned by this method by adding a       *<pre><code>      *     ClassLoader classLoader = updateContextClassLoader();      *     try {      *         //init Solr component      *     } finally {      *         Thread.currentThread().setContextClassLoader(classLoader);      *     }      *</code></pre><p>      *<b>TODO:</b><p>      * This currently sets the ClassLoader of {@link SolrServerAdapter}      * to set the {@link Thread#setContextClassLoader(ClassLoader)}. It would       * be better to explicitly get the ClassLoader of the Bundle providing the      * Solr Classes.      * @return the {@link ClassLoader} of {@link Thread#currentThread()} before      * calling this method      */
specifier|private
name|ClassLoader
name|updateContextClassLoader
parameter_list|()
block|{
comment|/*          * NOTE: We need to reset the ContextClassLoader to the one used for this Bundle, because Solr          * uses this ClassLoader to load all the plugins configured in the SOLR_XML_NAME and          * schema.xml. The finally block resets the context class loader to the previous value.          * (Rupert Westenthaler 20010209)          */
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|CoreContainer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|classLoader
return|;
block|}
comment|/**      * Swaps two cores      * @param core1 the first core to swap      * @param core2 the second core to swap      */
specifier|public
name|void
name|swap
parameter_list|(
name|String
name|core1
parameter_list|,
name|String
name|core2
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Swap Core {} with Core {}on CoreContainer {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|core1
block|,
name|core2
block|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|//swap the cores
name|server
operator|.
name|swap
argument_list|(
name|core1
argument_list|,
name|core2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Registers a SolrCore based on the parsed configuration. If a SolrCore      * with the same name as provided by the configuration is already present      * it will be replace by this one.      * @param parsedCoreConfig The configuration.      * @return The ServiceReference to the SolrCore.      * @throws ParserConfigurationException if the XML parser could not be configured      * @throws IOException indicated an error related to accessing the configured resource      * @throws SAXException indicated an formatting error in the xml configuration files.      */
specifier|public
name|ServiceReference
name|registerCore
parameter_list|(
name|SolrCoreProperties
name|parsedCoreConfig
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|SolrCoreProperties
name|coreConfig
init|=
name|parsedCoreConfig
operator|.
name|clone
argument_list|()
decl_stmt|;
name|String
name|coreName
init|=
name|coreConfig
operator|.
name|getCoreName
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Register Core {} to SolrServerAdapter (coreContainer: {})"
argument_list|,
name|coreName
argument_list|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreName
operator|==
literal|null
condition|)
block|{
name|coreName
operator|=
name|server
operator|.
name|getDefaultCoreName
argument_list|()
expr_stmt|;
block|}
name|File
name|coreDir
init|=
name|coreConfig
operator|.
name|getCoreDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreDir
operator|==
literal|null
condition|)
block|{
name|coreDir
operator|=
operator|new
name|File
argument_list|(
name|serverProperties
operator|.
name|getServerDir
argument_list|()
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|coreDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Core Directory '"
operator|+
name|coreDir
operator|+
literal|" for the Core '"
operator|+
name|coreName
operator|+
literal|"' does not exist or is not an directory"
argument_list|)
throw|;
block|}
name|SolrCore
name|old
init|=
literal|null
decl_stmt|;
name|ClassLoader
name|classLoader
init|=
name|updateContextClassLoader
argument_list|()
decl_stmt|;
name|SolrCore
name|core
decl_stmt|;
try|try
block|{
comment|//NOTE: this code depends on the fact that the create method of the
comment|//      CoreContainer is overridden by the SolrServerAdapter
comment|//      to use the OSGI specific SolrResourceLoader!
name|core
operator|=
name|server
operator|.
name|create
argument_list|(
operator|new
name|CoreDescriptor
argument_list|(
name|server
argument_list|,
name|coreName
argument_list|,
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//CloseHook is now appied by the overridden registerCore(..) method
comment|//of the wrapped CoreContainer!
comment|//core.addCloseHook(closeHook);
comment|// parse ture as third argument to avoid closing the current core for now
name|old
operator|=
name|server
operator|.
name|register
argument_list|(
name|coreName
argument_list|,
name|core
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
comment|//update the OSGI service for the new Core
name|ServiceReference
name|coreRef
init|=
name|registerCoreService
argument_list|(
name|coreName
argument_list|,
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
comment|//cleanup the old core
name|cleanupSolrCore
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
comment|// persist the new core to have it available on the next start
comment|//server.persist();
comment|//update the OSGI service is now done by the overridden CoreContainer#create(..)
comment|//method
comment|//updateServerRegistration();
return|return
name|coreRef
return|;
block|}
comment|/**      * Closes the parsed SolrCore      * @param old the core to close      */
specifier|private
name|void
name|cleanupSolrCore
parameter_list|(
name|SolrCore
name|old
parameter_list|)
block|{
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|old
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//this frees the reference hold by the SolrServerAdapter
comment|//We do no longer free additional references (that could be hold by other
comment|//OSGI components that do retrieve a SolrCore from the CoreContainer)
comment|//Those components will need to close their SolrCores themselves!
comment|//As it is expected that most components will use EmbeddedSolrServer
comment|//to use registered CoreContainer and SolrCores and this implementation
comment|//does correctly call SolrCore#close() on each retrieved SolrCore this
comment|//assumption will be true in most Situations.
comment|//        if(!old.isClosed()){
comment|//            log.warn("Old SolrCore was not Closed correctly - this indicates that some other" +
comment|//            		"components calling CoreContainer#getSolrCore() has not colled SolrCore#close()" +
comment|//            		"after using it.");
comment|//            log.warn("To avoid memory leaks this will call SolrCore#close() until closed");
comment|//            int i=0;
comment|//            for(;!old.isClosed();i++){
comment|//                old.close();
comment|//            }
comment|//            log.warn("   ... called SolrCore#close() {} times before closed",i);
comment|//        }
block|}
comment|/**      * Registers a {@link SolrCore} as OSGI service with the some additional      * metadata allowing other components to explicitly register for this      * SolrCore      * @param name the name of the core      * @param core the Core or<code>null</code> if not available. If       *<code>null</code> is parsed the {@link SolrCore} will be looked up by      * using the {@link #server}. This is mainly to do not increase the      * {@link SolrCore#getOpenCount()}.      */
specifier|protected
name|ServiceReference
name|registerCoreService
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{
comment|//first create the new and only than unregister the old (to ensure that
comment|//the reference count of the SolrCore does not reach 0)
name|CoreRegistration
name|current
init|=
operator|new
name|CoreRegistration
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
decl_stmt|;
name|CoreRegistration
name|old
init|=
name|registrations
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|old
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"added Registration for SolrCore {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|getServiceReference
argument_list|()
return|;
block|}
comment|/**      * Returns the ServiceReference for the {@link SolrCore} of the core      * with the parsed name      * @param name the name of the core      * @return the reference to the {@link SolrCore} or<code>null</code> if      * not managed.      */
specifier|public
name|ServiceReference
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|CoreRegistration
name|reg
init|=
name|registrations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|reg
operator|!=
literal|null
condition|?
name|reg
operator|.
name|getServiceReference
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Returns the ServiceReference for the {@link SolrCore} of the parsed      * directory      * @param directory the directory      * @return the reference of<code>null</code> if no {@link SolrCore} for the      * parsed directory is registered for this {@link CoreContainer}.      */
specifier|public
name|ServiceReference
name|getCoreForDir
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
comment|//solr always uses ending '/'
if|if
condition|(
name|directory
operator|.
name|charAt
argument_list|(
name|directory
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
name|File
operator|.
name|separatorChar
condition|)
block|{
name|directory
operator|=
name|directory
operator|+
name|File
operator|.
name|separatorChar
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|registrations
init|)
block|{
for|for
control|(
name|CoreRegistration
name|reg
range|:
name|registrations
operator|.
name|values
argument_list|()
control|)
block|{
name|ServiceReference
name|ref
init|=
name|reg
operator|.
name|getServiceReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|FilenameUtils
operator|.
name|equalsNormalizedOnSystem
argument_list|(
name|directory
argument_list|,
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|PROPERTY_CORE_DIR
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Getter for a read-only list of cores that are currently managed by this      * ManagedSolrServer      * @return the read-only list of managed cores.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCores
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|serverProperties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_CORES
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Checks if a core with this name is managed.      * @param name the name      * @return the state      */
specifier|public
name|boolean
name|isCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|CoreRegistration
name|reg
init|=
name|registrations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|reg
operator|!=
literal|null
operator|&&
name|reg
operator|.
name|getServiceReference
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
name|Object
name|value
init|=
name|serverRegistration
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Getter for the {@link ServiceReference} for the {@link CoreContainer}      * managed by this instance      * @return the {@link ServiceReference}      */
specifier|public
name|ServiceReference
name|getServerReference
parameter_list|()
block|{
return|return
name|serverRegistration
operator|.
name|getReference
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|server
operator|.
name|hashCode
argument_list|()
operator|+
name|serverProperties
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|SolrServerAdapter
operator|&&
operator|(
operator|(
name|SolrServerAdapter
operator|)
name|obj
operator|)
operator|.
name|server
operator|.
name|equals
argument_list|(
name|server
argument_list|)
operator|&&
operator|(
operator|(
name|SolrServerAdapter
operator|)
name|obj
operator|)
operator|.
name|context
operator|.
name|equals
argument_list|(
name|context
argument_list|)
operator|&&
operator|(
operator|(
name|SolrServerAdapter
operator|)
name|obj
operator|)
operator|.
name|serverProperties
operator|.
name|equals
argument_list|(
name|serverProperties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|serverName
init|=
name|getServerName
argument_list|()
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ManagedSolrServerImps[server=%s,cores=%s]"
argument_list|,
operator|(
name|serverName
operator|==
literal|null
condition|?
literal|"default"
else|:
name|serverName
operator|)
argument_list|,
name|getCores
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|updateCoreNamesInServerProperties
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|coreNames
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|server
operator|.
name|getCoreNames
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|serverProperties
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_CORES
argument_list|,
name|coreNames
argument_list|)
expr_stmt|;
return|return
name|coreNames
return|;
block|}
comment|/**      * Updates the {@link ServiceRegistration} of the {@link CoreContainer} after      * some changes to the cores      */
specifier|private
name|void
name|updateServerRegistration
parameter_list|()
block|{
name|serverRegistration
operator|.
name|setProperties
argument_list|(
name|serverProperties
argument_list|)
expr_stmt|;
block|}
comment|/**      * We need to override some methods of the CoreContainer to      * (1) ensure the OsigSolrResourceLoader is used      * (2) update the OSGI service registrations      * Previously this was done in the SolrServerAdapter, but to also support      * ReferencedSolrServer (STANBOL-1081) we do it now directly for the      * CoreContainer. This allows also to correctly load and register      * cores that are created/changed via the Solr RESTful API      * @author Rupert Westenthaler      */
specifier|private
specifier|final
class|class
name|OsgiCoreContainer
extends|extends
name|CoreContainer
block|{
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|OsgiCoreContainer
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|BundleContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|//override this to ensure that the OsgiSolrResourceLodaer is used
comment|//to create SolrCores
annotation|@
name|Override
specifier|public
name|SolrCore
name|create
parameter_list|(
name|CoreDescriptor
name|dcore
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" .... createCore {}:{}"
argument_list|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
argument_list|,
name|dcore
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getZkController
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//TODO: add support for ZooKeeper managed cores
return|return
name|super
operator|.
name|create
argument_list|(
name|dcore
argument_list|)
return|;
block|}
else|else
block|{
name|File
name|idir
init|=
operator|new
name|File
argument_list|(
name|dcore
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|idir
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|//TODO: we can not use the indexSchemaCache because it is
comment|//      a private variable
name|SolrResourceLoader
name|loader
init|=
operator|new
name|OsgiSolrResourceLoader
argument_list|(
name|context
argument_list|,
name|instanceDir
argument_list|,
name|CoreContainer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|SolrConfig
name|config
decl_stmt|;
try|try
block|{
name|config
operator|=
operator|new
name|SolrConfig
argument_list|(
name|loader
argument_list|,
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not load config for "
operator|+
name|dcore
operator|.
name|getConfigName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IndexSchema
name|schema
init|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|dcore
operator|.
name|getSchemaName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
operator|new
name|SolrCore
argument_list|(
name|dcore
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|config
argument_list|,
name|schema
argument_list|,
name|dcore
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// always kick off recovery if we are in standalone mode.
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|recoverFromLog
argument_list|()
expr_stmt|;
block|}
return|return
name|core
return|;
block|}
block|}
comment|//this ensures that a closeHook is added to registered cores
annotation|@
name|Override
specifier|protected
name|SolrCore
name|registerCore
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|whichCores
parameter_list|,
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|boolean
name|returnPrevNotClosed
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" .... registerCore {}:{}"
argument_list|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|SolrCore
name|old
init|=
name|super
operator|.
name|registerCore
argument_list|(
name|whichCores
argument_list|,
name|name
argument_list|,
name|core
argument_list|,
name|returnPrevNotClosed
argument_list|)
decl_stmt|;
comment|//NOTE: we can not register the services here, as this can trigger
comment|//      a deadlock!!
comment|//Reason: OSGI ensures that activation is done by a single thread.
comment|//        Solr uses a Threadpool to activate SolrCores. This means
comment|//        that this method is called in a different thread context
comment|//        as the OSGI activation thread. However the registration
comment|//        of the SolrCore would try to re-sync on the OSGI activation
comment|//        Thread and therefore cause a deadlock as the
comment|//        constructor of the SolrServerAdapter is typically expected
comment|//        to be called within an activate method.
comment|//Solution: the 'initialised' switch is only set to TRUE after the
comment|//          initialisation of the CoreContainer. During initialisation
comment|//          the SolrCores ore only registered after the construction
comment|//          of the CoreContainer. This ensures that the OSGI
comment|//          activation thread context is used for registration
comment|//          If SolrCores are registered afterwards (e.g a SolrCore
comment|//          is added to a ManagedSolrServer) the registration is
comment|//          done as part of this method (because 'initialised' is
comment|//          already set to TRUE).
if|if
condition|(
name|initialised
condition|)
block|{
comment|//already initialised ?
comment|//register the core as OSGI service
name|registerCoreService
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|updateCoreNamesInServerProperties
argument_list|()
expr_stmt|;
name|updateServerRegistration
argument_list|()
expr_stmt|;
comment|//add a closeHook so that we know when to unregister
name|core
operator|.
name|addCloseHook
argument_list|(
name|closeHook
argument_list|)
expr_stmt|;
block|}
comment|//else ignore registration during startup
return|return
name|old
return|;
block|}
comment|//in the case of a swap we need to update the OSGI service registrations
annotation|@
name|Override
specifier|public
name|void
name|swap
parameter_list|(
name|String
name|name1
parameter_list|,
name|String
name|name2
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" .... swap {}:{} with {}:{}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|serverProperties
operator|.
name|getServerName
argument_list|()
block|,
name|name1
block|,
name|serverProperties
operator|.
name|getServerName
argument_list|()
block|,
name|name2
block|}
argument_list|)
expr_stmt|;
name|super
operator|.
name|swap
argument_list|(
name|name1
argument_list|,
name|name2
argument_list|)
expr_stmt|;
comment|//also update the OSGI Service registrations
if|if
condition|(
name|initialised
condition|)
block|{
name|registerCoreService
argument_list|(
name|name1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerCoreService
argument_list|(
name|name2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//update the OSGI service for the CoreContainer
name|updateCoreNamesInServerProperties
argument_list|()
expr_stmt|;
name|updateServerRegistration
argument_list|()
expr_stmt|;
block|}
comment|//else ignore registration during startup
block|}
block|}
comment|/**      * Internally used to manage the OSGI service registration for      * {@link SolrCore}s of the {@link CoreContainer} managed by this      * {@link SolrServerAdapter} instance      * @author Rupert Westenthaler      *      */
specifier|private
class|class
name|CoreRegistration
block|{
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|final
name|SolrCore
name|core
decl_stmt|;
specifier|private
name|ServiceRegistration
name|registration
decl_stmt|;
comment|/**          * Creates and registers a {@link CoreRegistration}          * @param name the name used to register the core          * @param parsedCore the SolrCore to register          * @throws IllegalStateException if the parsed name is<code>null</code>          * or empty; if the {@link SolrServerAdapter#server} does not know a          * SolrCore with the parsed name or if the {@link SolrServerAdapter#context}          * is no longer valid          */
specifier|protected
name|CoreRegistration
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|parsedCore
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The name of a SolrCore MUST NOT be NULL nor emtpy"
argument_list|)
throw|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|parsedCore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|core
operator|=
name|server
operator|.
name|getCore
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//increases the reference count
block|}
else|else
block|{
name|this
operator|.
name|core
operator|=
name|parsedCore
expr_stmt|;
name|parsedCore
operator|.
name|open
argument_list|()
expr_stmt|;
comment|//increase the reference count!!
block|}
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to getCore with name "
operator|+
name|name
operator|+
literal|" from CoreContainer "
operator|+
name|server
argument_list|)
throw|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_DIR
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_DATA_DIR
argument_list|,
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_INDEX_DIR
argument_list|,
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_SCHEMA
argument_list|,
name|core
operator|.
name|getSchemaResource
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_SOLR_CONF
argument_list|,
name|core
operator|.
name|getConfigResource
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|,
name|serverProperties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_DIR
argument_list|,
name|serverProperties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_DIR
argument_list|)
argument_list|)
expr_stmt|;
comment|//looks like the SERVICE_PID property is not present within the metadata
comment|//so we use SERVICE_ID instead. However keep on mind that SERVIVE_ID
comment|//values change if a service is restarted.
comment|//            props.put(PROPERTY_CORE_SERVER_PID, serverRegistration.getReference().getProperty(SERVICE_PID));
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_SERVER_ID
argument_list|,
name|serverRegistration
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SERVICE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|ranking
init|=
name|serverProperties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_RANKING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranking
operator|!=
literal|null
condition|)
name|props
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_RANKING
argument_list|,
name|ranking
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|registration
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|SolrCore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|core
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to refister Service for SolrCore "
operator|+
name|name
operator|+
literal|": Clean-up and rethrow"
argument_list|)
expr_stmt|;
name|this
operator|.
name|registration
operator|=
literal|null
expr_stmt|;
comment|//core.close(); ... do not close (this registration need to keep a reference
throw|throw
name|e
throw|;
block|}
block|}
comment|/**          * Unregisters this {@link CoreRegistration}          */
specifier|protected
name|void
name|unregister
parameter_list|()
block|{
name|ServiceRegistration
name|tmp
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|//to avoid multiple unregister calls
name|tmp
operator|=
name|registration
expr_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
comment|//already unregistered
return|return;
comment|//nothing to do
block|}
else|else
block|{
name|registration
operator|=
literal|null
expr_stmt|;
block|}
block|}
try|try
block|{
name|tmp
operator|.
name|unregister
argument_list|()
expr_stmt|;
comment|//unregister the service
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Looks like that the registration for SolrCore %s was already unregisterd"
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//close the core to decrease the refernece count!!
block|}
block|}
comment|/**          * The name under witch the {@link #getCore() SolrCore} is registered.          * {@link SolrCore#getName()} MAY NOT be equals to the name returned by          * this Method.          * @return the name under witch the SolrCore is registered. This can be          * also retrieved by using {@link ServiceReference#getProperty(String)          * gerServiceReference().getProperty(String)} with the key          * {@link SolrConstants#PROPERTY_CORE_NAME}.          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * The registered SolrCore. If<code>{@link #isRegistered()} == false</code>          * the {@link SolrCore#isClosed()} will return true;          * @return the SolrCore          */
specifier|public
name|SolrCore
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
comment|/**          * The ServiceReference          * @return the {@link ServiceReference} or<code>null</code> if already          * unregistered          */
specifier|public
name|ServiceReference
name|getServiceReference
parameter_list|()
block|{
return|return
name|registration
operator|==
literal|null
condition|?
literal|null
else|:
name|registration
operator|.
name|getReference
argument_list|()
return|;
block|}
comment|/**          * If the {@link #getCore()} is still registered          * @return the registration state          */
specifier|public
name|boolean
name|isRegistered
parameter_list|()
block|{
return|return
name|registration
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|CoreRegistration
operator|&&
operator|(
operator|(
name|CoreRegistration
operator|)
name|obj
operator|)
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"CoreRegistration[name: %s, registered: %s]"
argument_list|,
name|name
argument_list|,
name|isRegistered
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * {@link Dictionary} implementation that provides getter and setter for      * typical properties configured for a {@link SolrServerAdapter}.<p>      * Stores its state in the {@link Dictionary} and implements {@link Cloneable}      * @author Rupert Westenthaler      */
specifier|public
specifier|static
class|class
name|SolrServerProperties
extends|extends
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
implements|implements
name|Cloneable
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrServerProperties
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SolrServerProperties
parameter_list|(
name|File
name|solrServerDir
parameter_list|)
block|{
if|if
condition|(
name|solrServerDir
operator|==
literal|null
operator|||
operator|!
name|solrServerDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SolrServerDir '"
operator|+
name|solrServerDir
operator|+
literal|"' MUST refer to a Directory"
argument_list|)
throw|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_DIR
argument_list|,
name|solrServerDir
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SOLR_XML_NAME
argument_list|,
name|SOLR_XML_NAME
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_RANKING
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**          * Internally used for the implementation of {@link #clone()}          * @param properties the already cloned properties          */
specifier|private
name|SolrServerProperties
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|File
name|getServerDir
parameter_list|()
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|File
condition|)
block|{
return|return
operator|(
name|File
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|getSolrXml
parameter_list|()
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_SOLR_XML_NAME
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|SOLR_XML_NAME
return|;
block|}
comment|/**          * Setter for the file name of the "solr.xml". If<code>null</code> or          * an empty string is parsed the value will be reset to the default          * {@link SolrConstants#SOLR_XML_NAME}          * @param solrXmlName          */
specifier|public
name|void
name|setSorlXml
parameter_list|(
name|String
name|solrXmlName
parameter_list|)
block|{
if|if
condition|(
name|solrXmlName
operator|==
literal|null
operator|||
name|solrXmlName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solrXmlName
operator|=
name|SOLR_XML_NAME
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SOLR_XML_NAME
argument_list|,
name|solrXmlName
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns the value of the name for this SolrCore or<code>null</code>          * if non is explicitly set.          * @return the human readable name for this {@link CoreContainer}          */
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**          * Setter for the human readable name of this {@link CoreContainer Solr Server}.          * Parsed values will be trimmed. If<code>null</code> or an empty          * string is parsed the parameter will be removed          * @param name the name of the server. Parsed values will be trimmed.           * If<code>null</code> or an empty string is parsed the parameter will           * be removed          */
specifier|public
name|void
name|setServerName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|,
name|name
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Integer
name|getServerRanking
parameter_list|()
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_RANKING
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Illegal ServerRanking '"
operator|+
name|value
operator|+
literal|"' return default ranking '0'!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|setServerRanking
parameter_list|(
name|Integer
name|ranking
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_RANKING
argument_list|,
name|ranking
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPublishREST
parameter_list|()
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_PUBLISH_REST
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|SolrConstants
operator|.
name|DEFAULT_PUBLISH_REST
return|;
block|}
block|}
specifier|public
name|void
name|setPublishREST
parameter_list|(
name|Boolean
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|PROPERTY_SERVER_PUBLISH_REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_SERVER_PUBLISH_REST
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|elements
parameter_list|()
block|{
return|return
name|properties
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|properties
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|()
block|{
return|return
name|properties
operator|.
name|keys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|properties
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolrServerProperties
name|clone
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clonedProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|properties
argument_list|)
decl_stmt|;
return|return
operator|new
name|SolrServerProperties
argument_list|(
name|clonedProperties
argument_list|)
return|;
block|}
block|}
comment|/**      * {@link Dictionary} implementation that provides getter and setter for      * typical properties configured for a {@link SolrCore} registered to a       * {@link SolrServerAdapter}.<p>      * Stores its state in the {@link Dictionary} and implements {@link Cloneable}      * @author Rupert Westenthaler      */
specifier|public
specifier|static
class|class
name|SolrCoreProperties
extends|extends
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
implements|implements
name|Cloneable
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrCoreProperties
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|coreProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Creates a new SolrCore properties instance.          * @param coreName The name of the core to add or<code>null</code> to           * create properties for the {@link CoreContainer#getDefaultCoreName() default SolrCore}.          */
specifier|public
name|SolrCoreProperties
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
if|if
condition|(
name|coreName
operator|!=
literal|null
condition|)
block|{
name|coreProperties
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_NAME
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
block|}
name|coreProperties
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_SOLR_CONF
argument_list|,
name|SOLR_CONFIG_NAME
argument_list|)
expr_stmt|;
name|coreProperties
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_SCHEMA
argument_list|,
name|SOLR_SCHEMA_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**          * internally used for the {@link #clone()} implementation          * @param properties the already cloned properties          */
specifier|private
name|SolrCoreProperties
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|coreProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|String
name|getSolrconf
parameter_list|()
block|{
name|Object
name|value
init|=
name|coreProperties
operator|.
name|get
argument_list|(
name|PROPERTY_CORE_SOLR_CONF
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|SOLR_CONFIG_NAME
return|;
block|}
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
name|Object
name|value
init|=
name|coreProperties
operator|.
name|get
argument_list|(
name|PROPERTY_CORE_SCHEMA
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|SOLR_SCHEMA_NAME
return|;
block|}
specifier|public
name|File
name|getCoreDir
parameter_list|()
block|{
name|Object
name|value
init|=
name|coreProperties
operator|.
name|get
argument_list|(
name|PROPERTY_CORE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|File
condition|)
block|{
return|return
operator|(
name|File
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setCoreDir
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
name|coreProperties
operator|.
name|remove
argument_list|(
name|PROPERTY_CORE_DIR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|coreProperties
operator|.
name|put
argument_list|(
name|PROPERTY_CORE_DIR
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed File '"
operator|+
name|directory
operator|+
literal|"' MUST represent a Directory!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getCoreName
parameter_list|()
block|{
name|Object
name|value
init|=
name|coreProperties
operator|.
name|get
argument_list|(
name|PROPERTY_CORE_NAME
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|Integer
name|getRanking
parameter_list|()
block|{
name|Object
name|value
init|=
name|coreProperties
operator|.
name|get
argument_list|(
name|PROPERTY_CORE_RANKING
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|coreProperties
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_RANKING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Illegal ServerRanking '"
operator|+
name|value
operator|+
literal|"' return default ranking '0'!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|elements
parameter_list|()
block|{
return|return
name|coreProperties
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|coreProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|coreProperties
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|()
block|{
return|return
name|coreProperties
operator|.
name|keys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|coreProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|coreProperties
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|coreProperties
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolrCoreProperties
name|clone
parameter_list|()
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clonedProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|coreProperties
argument_list|)
decl_stmt|;
return|return
operator|new
name|SolrCoreProperties
argument_list|(
name|clonedProperties
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

