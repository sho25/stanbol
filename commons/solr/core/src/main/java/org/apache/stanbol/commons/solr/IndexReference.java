begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|IndexReference
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexReference
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONSTRAINT
init|=
literal|"(%s=%s)"
decl_stmt|;
specifier|public
specifier|static
name|IndexReference
name|parse
parameter_list|(
name|String
name|uriOrPathOrReference
parameter_list|)
block|{
name|String
index|[]
name|referencedCore
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|boolean
name|isFile
decl_stmt|;
if|if
condition|(
name|uriOrPathOrReference
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
comment|//file URL
name|isFile
operator|=
literal|true
expr_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
try|try
block|{
name|file
operator|=
name|FileUtils
operator|.
name|toFile
argument_list|(
operator|new
name|URL
argument_list|(
name|uriOrPathOrReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to parse file URL '"
operator|+
name|uriOrPathOrReference
operator|+
literal|"'!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
block|}
name|referencedCore
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
comment|//no server name for such values
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|referencedCore
index|[
literal|1
index|]
operator|=
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|uriOrPathOrReference
operator|.
name|indexOf
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|)
operator|>=
literal|0
operator|||
name|uriOrPathOrReference
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|//also support UNIX style on Windows
comment|//we assume a File Reference
name|isFile
operator|=
literal|true
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|FilenameUtils
operator|.
name|separatorsToSystem
argument_list|(
name|uriOrPathOrReference
argument_list|)
argument_list|)
decl_stmt|;
name|referencedCore
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|referencedCore
index|[
literal|1
index|]
operator|=
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//reference in the style [{server-name}:]{core-name}
name|isFile
operator|=
literal|false
expr_stmt|;
name|int
name|index
init|=
name|uriOrPathOrReference
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|referencedCore
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|referencedCore
index|[
literal|1
index|]
operator|=
name|uriOrPathOrReference
expr_stmt|;
block|}
else|else
block|{
name|referencedCore
index|[
literal|0
index|]
operator|=
name|uriOrPathOrReference
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|referencedCore
index|[
literal|1
index|]
operator|=
name|uriOrPathOrReference
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|validateIndexName
argument_list|(
name|referencedCore
index|[
literal|1
index|]
argument_list|,
name|uriOrPathOrReference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IndexReference
argument_list|(
name|referencedCore
index|[
literal|0
index|]
argument_list|,
name|referencedCore
index|[
literal|1
index|]
argument_list|,
name|isFile
argument_list|)
return|;
block|}
comment|/**      * Validates the indexName      * @param indexName the name to validate      * @param indexRef the parsed indexRef      * @throws IllegalArgumentException if the validation fails      */
specifier|private
specifier|static
name|void
name|validateIndexName
parameter_list|(
name|String
name|indexName
parameter_list|,
name|String
name|indexRef
parameter_list|)
block|{
if|if
condition|(
name|indexName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The index name MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed index reference '"
operator|+
name|indexRef
operator|+
literal|"' MUST NOT contain an empty index name"
operator|+
literal|"(e.g. such as ending with ':')!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|>=
literal|0
operator|||
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
operator|||
name|indexName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>=
literal|0
operator|||
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The index name '"
operator|+
name|indexName
operator|+
literal|"' of the prased index reference '"
operator|+
name|indexRef
operator|+
literal|"' MUST NOT contain any of the "
operator|+
literal|"following chars '"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
operator|new
name|char
index|[]
block|{
literal|'\\'
block|,
literal|'/'
block|,
literal|':'
block|,
literal|':'
block|,
literal|'.'
block|}
argument_list|)
operator|+
literal|"'!"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|String
name|server
decl_stmt|;
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isFile
decl_stmt|;
comment|/**      * Creates a new IndexReference for the parsed server and index      * @param server the server or<code>null</code> if not known      * @param index the index. MUST NOT be<code>null</code> nor empty      */
specifier|public
name|IndexReference
parameter_list|(
name|String
name|server
parameter_list|,
name|String
name|index
parameter_list|)
block|{
name|validateIndexName
argument_list|(
name|index
argument_list|,
name|server
operator|+
literal|':'
operator|+
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|isFile
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|IndexReference
parameter_list|(
name|String
name|server
parameter_list|,
name|String
name|index
parameter_list|,
name|boolean
name|isFile
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|isFile
operator|=
name|isFile
expr_stmt|;
block|}
comment|/**      * @return the server      */
specifier|public
specifier|final
name|String
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
comment|/**      * @return the index      */
specifier|public
specifier|final
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|boolean
name|isPath
parameter_list|()
block|{
return|return
name|isFile
return|;
block|}
specifier|public
name|boolean
name|isName
parameter_list|()
block|{
return|return
operator|!
name|isFile
return|;
block|}
comment|/**      * Checks if the referenced index could be on the parsed server      * @param serverName      * @return      */
specifier|public
name|boolean
name|checkServer
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
return|return
name|server
operator|==
literal|null
operator|||
name|server
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
return|;
block|}
comment|/**      * Getter for the {@link Filter} that can be used to track the      * {@link SolrCore} referenced by this IndexReference.      * @return the string representation of the OSGI {@link Filter}.      */
specifier|public
name|String
name|getIndexFilter
parameter_list|()
block|{
name|StringBuilder
name|filterString
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"(&"
argument_list|)
decl_stmt|;
comment|//first filter for the type
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONSTRAINT
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|SolrCore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFile
condition|)
block|{
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONSTRAINT
argument_list|,
name|SolrConstants
operator|.
name|PROPERTY_CORE_DIR
argument_list|,
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//isName
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONSTRAINT
argument_list|,
name|SolrConstants
operator|.
name|PROPERTY_CORE_NAME
argument_list|,
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addServerFilterConstraint
argument_list|(
name|filterString
argument_list|)
expr_stmt|;
name|filterString
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|filterString
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Getter for the {@link Filter} that can be used to track the      * {@link CoreContainer} referenced by this IndexReference. If no      * server is defined. This will track all {@link CoreContainer} instances.      * Note that the {@link CoreContainer} with the highest       * {@link Constants#SERVICE_RANKING} is expected to be the default server      */
specifier|public
name|String
name|getServerFilter
parameter_list|()
block|{
name|StringBuilder
name|filterString
decl_stmt|;
if|if
condition|(
name|getServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//add AND for class and name constraint
name|filterString
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"(&"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if no server is defined we have only one constraint
name|filterString
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONSTRAINT
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|CoreContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addServerFilterConstraint
argument_list|(
name|filterString
argument_list|)
expr_stmt|;
if|if
condition|(
name|getServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filterString
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
return|return
name|filterString
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @param filterString      */
specifier|private
name|void
name|addServerFilterConstraint
parameter_list|(
name|StringBuilder
name|filterString
parameter_list|)
block|{
if|if
condition|(
name|getServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filterString
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONSTRAINT
argument_list|,
name|SolrConstants
operator|.
name|PROPERTY_SERVER_NAME
argument_list|,
name|getServer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"IndexReference[server:%s,index:%s]"
argument_list|,
name|getServer
argument_list|()
argument_list|,
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

