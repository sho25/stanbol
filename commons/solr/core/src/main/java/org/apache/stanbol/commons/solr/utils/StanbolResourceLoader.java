begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|stanboltools
operator|.
name|datafileprovider
operator|.
name|DataFileProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Solr {@link ResourceLoader} implementation that supports adding an parent as  * well as parsing the classloader used for   * {@link #newInstance(String, Class)}.<p>  * This implementation can be used in combination with the   * {@link DataFileResourceLoader} to allow providing resources via the  * Stanbol {@link DataFileProvider} infrastructure.<p>  * The {@link #newInstance(String, Class)} method uses the same algorithm as  * the {@link SolrResourceLoader#newInstance(String, Class)} method to  * build candidate class names. It supports the default packages.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|StanbolResourceLoader
implements|implements
name|ResourceLoader
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StanbolResourceLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|project
init|=
literal|"solr"
decl_stmt|;
specifier|static
specifier|final
name|String
name|base
init|=
literal|"org.apache"
operator|+
literal|"."
operator|+
name|project
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|packages
init|=
block|{
literal|""
block|,
literal|"analysis."
block|,
literal|"schema."
block|,
literal|"handler."
block|,
literal|"search."
block|,
literal|"update."
block|,
literal|"core."
block|,
literal|"response."
block|,
literal|"request."
block|,
literal|"update.processor."
block|,
literal|"util."
block|,
literal|"spelling."
block|,
literal|"handler.component."
block|,
literal|"handler.dataimport."
block|}
decl_stmt|;
specifier|protected
specifier|final
name|ClassLoader
name|classloader
decl_stmt|;
specifier|protected
specifier|final
name|ResourceLoader
name|parent
decl_stmt|;
specifier|public
name|StanbolResourceLoader
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StanbolResourceLoader
parameter_list|(
name|ClassLoader
name|classloader
parameter_list|)
block|{
name|this
argument_list|(
name|classloader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StanbolResourceLoader
parameter_list|(
name|ResourceLoader
name|parent
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StanbolResourceLoader
parameter_list|(
name|ClassLoader
name|classloader
parameter_list|,
name|ResourceLoader
name|parent
parameter_list|)
block|{
name|this
operator|.
name|classloader
operator|=
name|classloader
operator|==
literal|null
condition|?
name|StanbolResourceLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
else|:
name|classloader
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|openResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
decl_stmt|;
name|String
name|parentMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|=
name|parent
operator|.
name|openResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|in
operator|=
literal|null
expr_stmt|;
name|parentMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|//do not catch security related exceptions
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|in
operator|=
literal|null
expr_stmt|;
name|parentMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|in
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|classloader
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to load Resource '"
operator|+
name|resource
operator|+
literal|"' from "
operator|+
operator|(
name|parent
operator|!=
literal|null
condition|?
operator|(
literal|"parent (message: "
operator|+
name|parentMessage
operator|+
literal|") and from"
operator|)
else|:
literal|""
operator|)
operator|+
literal|"classpath!"
argument_list|)
throw|;
block|}
return|return
name|in
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LineIterator
name|it
init|=
name|IOUtils
operator|.
name|lineIterator
argument_list|(
name|openResource
argument_list|(
name|resource
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|it
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
operator|&&
operator|!
name|line
operator|.
name|isEmpty
argument_list|()
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'#'
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lines
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|findClass
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
name|String
name|parentMessage
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clazz
operator|=
name|parent
operator|.
name|findClass
argument_list|(
name|cname
argument_list|,
name|expectedType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|//do not catch security related exceptions
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|parentMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|classloader
operator|.
name|loadClass
argument_list|(
name|cname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|newName
init|=
name|cname
decl_stmt|;
if|if
condition|(
name|newName
operator|.
name|startsWith
argument_list|(
name|project
argument_list|)
condition|)
block|{
name|newName
operator|=
name|cname
operator|.
name|substring
argument_list|(
name|project
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|subpackage
range|:
name|packages
control|)
block|{
try|try
block|{
name|String
name|name
init|=
name|base
operator|+
literal|'.'
operator|+
name|subpackage
operator|+
name|newName
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Trying class name "
operator|+
name|name
argument_list|)
expr_stmt|;
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|classloader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// ignore... assume first exception is best.
block|}
block|}
block|}
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error loading class '"
operator|+
name|cname
operator|+
literal|"' "
operator|+
operator|(
name|parent
operator|!=
literal|null
condition|?
operator|(
literal|"from parent (message: "
operator|+
name|parentMessage
operator|+
literal|") and "
operator|)
else|:
literal|""
operator|)
operator|+
literal|"via Classloader "
operator|+
name|classloader
argument_list|)
throw|;
block|}
return|return
name|clazz
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|cname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
init|=
name|findClass
argument_list|(
name|cname
argument_list|,
name|expectedType
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating class: '"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

