begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|web
operator|.
name|dispatch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
operator|.
name|Initializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Special version of the {@link SolrDispatchFilter} (implemented based on the  * {@link DelegatingSolrDispatchFilter} abstract class) that does NOT create a  * new {@link CoreContainer}, but retrieves it via a OSGI {@link ServiceReference}  * from a {@link BundleContext}. This implementation also ensures that removing  * the FIlter does NOT {@link CoreContainer#shutdown() shutdown} the   * {@link CoreContainer} but instead.  * {@link BundleContext#ungetService(ServiceReference) releases} the reference.<p>  * This does make is save to use this {@link Filter} in combination with a   * {@link CoreContainer} that is managed as a {@link ManagedSolrServer}.<p>  * See<a href="">TODO</a> to see how to use {@link Filter}s in combination with  * the OSGI {@link HttpService}.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|ReferencedSolrDispatchFilter
extends|extends
name|DelegatingSolrDispatchFilter
block|{
specifier|private
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|ServiceReference
name|coreContainerRef
decl_stmt|;
comment|/**      * Creates a new referenced Solr server dispatch filter. Referenced because      * the {@link CoreContainer} is not created (as by the normal      * {@link SolrDispatchFilter} implementation)      * but looked up via the parsed {@link BundleContext} based on the      * {@link ServiceReference}.      * @param context the BundleContext used to get/unget the CoreContainer service      * @param serviceReference A {@link ServiceReference} to a CoreContainer      * registered as OSGI service.      */
specifier|public
name|ReferencedSolrDispatchFilter
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|ServiceReference
name|serviceReference
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed BundleContext MUST NOT be NULL!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|serviceReference
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed SerivceReference MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|coreContainerRef
operator|=
name|serviceReference
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
if|if
condition|(
name|coreContainerRef
operator|!=
literal|null
condition|)
block|{
name|Object
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|coreContainerRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|instanceof
name|CoreContainer
condition|)
block|{
return|return
operator|(
name|CoreContainer
operator|)
name|service
return|;
block|}
elseif|else
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
comment|//incompatible service
name|context
operator|.
name|ungetService
argument_list|(
name|coreContainerRef
argument_list|)
expr_stmt|;
comment|//clean up
name|coreContainerRef
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Service"
operator|+
name|service
operator|+
literal|" returned by ServiceReference "
operator|+
name|coreContainerRef
operator|+
literal|" is not compatible to "
operator|+
name|CoreContainer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Unable to get Service for ServiceReference "
operator|+
name|coreContainerRef
decl_stmt|;
name|coreContainerRef
operator|=
literal|null
expr_stmt|;
comment|//clean up
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceRegerence was NULL. This indicated"
operator|+
literal|"that this filter was already destroyed! Reusage of this filter"
operator|+
literal|"is currently not supported by this implementation. If you need this"
operator|+
literal|"please report to the Stanbol Development team."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|ungetCoreContainer
parameter_list|()
block|{
if|if
condition|(
name|coreContainerRef
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|ungetService
argument_list|(
name|coreContainerRef
argument_list|)
expr_stmt|;
block|}
name|coreContainerRef
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

