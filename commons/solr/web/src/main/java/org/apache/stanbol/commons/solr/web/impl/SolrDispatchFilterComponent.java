begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|web
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|http
operator|.
name|api
operator|.
name|ExtHttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|web
operator|.
name|dispatch
operator|.
name|DelegatingSolrDispatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|web
operator|.
name|utils
operator|.
name|ServiceReferenceRankingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Component that allows to configuer a {@link SolrDispatchFilter} for a   * Solr {@link CoreContainer} running as OSGI service.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
comment|//this requires the CoreContainer name
name|specVersion
operator|=
literal|"1.1"
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|SolrDispatchFilterComponent
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SolrDispatchFilterComponent
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrDispatchFilterComponent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_SERVER_NAME
init|=
literal|"org.apache.stanbl.commons.solr.web.dispatchfilter.name"
decl_stmt|;
annotation|@
name|Property
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_PREFIX_PATH
init|=
literal|"org.apache.stanbl.commons.solr.web.dispatchfilter.prefix"
decl_stmt|;
comment|/**      * Will only work within Felix!      */
annotation|@
name|Reference
specifier|protected
name|ExtHttpService
name|extHttpService
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
specifier|private
name|SolrDispatchFilter
name|dispatchFilter
decl_stmt|;
specifier|private
name|ServiceTracker
name|tracker
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServiceReference
argument_list|>
name|coreContainerRefs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ServiceReference
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|CoreContainer
name|coreContainer
decl_stmt|;
specifier|private
name|ServiceTrackerCustomizer
name|trackerCustomizer
init|=
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|ref
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
synchronized|synchronized
init|(
name|coreContainerRefs
init|)
block|{
name|coreContainerRefs
operator|.
name|remove
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|.
name|equals
argument_list|(
name|coreContainer
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|coreContainerRefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|coreContainer
operator|=
operator|(
name|CoreContainer
operator|)
name|tracker
operator|.
name|getService
argument_list|(
name|coreContainerRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coreContainer
operator|=
literal|null
expr_stmt|;
block|}
name|updateFilter
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
block|}
comment|//else the remove does not affect the currently used CoreContainer
block|}
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|ref
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
comment|//maybe the serviceRanking was modified
if|if
condition|(
name|coreContainerRefs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|coreContainerRefs
argument_list|,
name|SERVICE_REFERENCE_COMPARATOR
argument_list|)
expr_stmt|;
name|Object
name|bestService
init|=
name|tracker
operator|.
name|getService
argument_list|(
name|coreContainerRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bestService
operator|.
name|equals
argument_list|(
name|coreContainer
argument_list|)
condition|)
block|{
name|coreContainer
operator|=
operator|(
name|CoreContainer
operator|)
name|bestService
expr_stmt|;
name|updateFilter
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
block|}
comment|//else ... no change needed
block|}
comment|// else -> property changes to the only registered CoreContainer
comment|//are of no interest
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|ref
parameter_list|)
block|{
name|Object
name|service
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|instanceof
name|CoreContainer
condition|)
block|{
name|coreContainerRefs
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreContainerRefs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|coreContainerRefs
argument_list|,
name|SERVICE_REFERENCE_COMPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|.
name|equals
argument_list|(
name|coreContainerRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|coreContainer
operator|=
operator|(
name|CoreContainer
operator|)
name|service
expr_stmt|;
name|updateFilter
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
else|else
block|{
comment|//wrong Filter used to track CoreConatiners!
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceTracker selected Service "
operator|+
name|service
operator|+
literal|" that is no instanceof CoreContainer! "
operator|+
literal|"Please report this on the STANBOL issue tracker of the "
operator|+
literal|"stanbol-dev mailing list or "
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|/**      * This is the prefix the Servlet {@link Filter} is registerd (e.g.       * '/solr/.*'      */
specifier|private
name|String
name|prefix
decl_stmt|;
comment|/**      * The properties to be used when registering the Servlet {@link Filter}.      */
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filterPrpoerties
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ServiceReference
argument_list|>
name|SERVICE_REFERENCE_COMPARATOR
init|=
name|ServiceReferenceRankingComparator
operator|.
name|INSTANCE
decl_stmt|;
specifier|protected
name|String
name|serverName
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|ServletException
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|BundleContext
name|bc
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|,
literal|"The configured CoreContainer name MUST NOT be NULL nor empty!"
argument_list|)
throw|;
block|}
name|serverName
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|filterString
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=%s)(%s=%s))"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|CoreContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|SolrConstants
operator|.
name|PROPERTY_SERVER_NAME
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
try|try
block|{
name|tracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|bc
argument_list|,
name|bc
operator|.
name|createFilter
argument_list|(
name|filterString
argument_list|)
argument_list|,
name|trackerCustomizer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROPERTY_SERVER_NAME
argument_list|,
literal|"Unable to build Filter for parsed CoreContainer name '"
operator|+
name|serverName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|value
operator|=
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROPERTY_PREFIX_PATH
argument_list|)
expr_stmt|;
specifier|final
name|String
name|prefixPath
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|prefix
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|prefix
operator|=
literal|'/'
operator|+
name|prefix
expr_stmt|;
block|}
name|prefixPath
operator|=
name|prefix
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|//TODO: check if this is a good idea
name|prefix
operator|=
name|prefix
operator|+
literal|"/.*"
expr_stmt|;
block|}
block|}
else|else
block|{
name|prefixPath
operator|=
literal|null
expr_stmt|;
name|prefix
operator|=
literal|"/.*"
expr_stmt|;
block|}
name|filterPrpoerties
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefixPath
operator|!=
literal|null
condition|)
block|{
name|filterPrpoerties
operator|.
name|put
argument_list|(
literal|"path-prefix"
argument_list|,
name|prefixPath
argument_list|)
expr_stmt|;
block|}
comment|//now start tracking! ...
comment|//  ... as soon as the first CoreContainer is tracked the Filter will
comment|//      be created and added to the ExtHttpService
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**      * A change was made to the tracked CoreContainer (adding ,removal, ranking change).      * This removes and re-add the Servlet filter to apply such changes.      */
specifier|protected
name|void
name|updateFilter
parameter_list|(
name|CoreContainer
name|service
parameter_list|)
block|{
if|if
condition|(
name|dispatchFilter
operator|!=
literal|null
condition|)
block|{
name|extHttpService
operator|.
name|unregisterFilter
argument_list|(
name|dispatchFilter
argument_list|)
expr_stmt|;
name|dispatchFilter
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|dispatchFilter
operator|=
operator|new
name|SolrFilter
argument_list|(
name|service
argument_list|)
expr_stmt|;
try|try
block|{
name|extHttpService
operator|.
name|registerFilter
argument_list|(
name|dispatchFilter
argument_list|,
name|prefix
argument_list|,
name|filterPrpoerties
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to register SolrDispatchFilter for"
operator|+
literal|"CoreContainer with name"
operator|+
name|serverName
operator|+
literal|" (prefix: "
operator|+
name|prefix
operator|+
literal|"| properties: "
operator|+
name|filterPrpoerties
operator|+
literal|")."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Add ServletFilter for SolrServer {} and prefix {}"
argument_list|,
name|serverName
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|updateFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//removes the filter
name|coreContainer
operator|=
literal|null
expr_stmt|;
name|serverName
operator|=
literal|null
expr_stmt|;
name|prefix
operator|=
literal|null
expr_stmt|;
name|filterPrpoerties
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
class|class
name|SolrFilter
extends|extends
name|DelegatingSolrDispatchFilter
block|{
specifier|private
name|CoreContainer
name|server
decl_stmt|;
specifier|protected
name|SolrFilter
parameter_list|(
name|CoreContainer
name|server
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|ungetCoreContainer
parameter_list|()
block|{
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

