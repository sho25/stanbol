begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|web
operator|.
name|dispatch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
operator|.
name|Initializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * A {@link SolrDispatchFilter} that does not create a new {@link CoreContainer}  * on initialisation, but instead delegates to a already existing instance.<p>  * Users of this Class MUST implement two methods<ul>  *<li> {@link #getCoreContainer()}: Called during   * {@link Filter#init(javax.servlet.FilterConfig)} to get the {@link CoreContainer}  * instance to be used for the Servlet filter.  *<li> {@link #ungetCoreContainer()}: Called during the {@link Filter#destroy()}  * method to indicate the the delegate is no longer needed by this Filter  * {@link ServiceReference} provided by {@link #getCoreContainerReference()}  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DelegatingSolrDispatchFilter
extends|extends
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DelegatingSolrDispatchFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The delegate (used to call {@link #ungetCoreContainer()} in case of      * multiple calls to init)      */
specifier|private
name|CoreContainer
name|delegate
init|=
literal|null
decl_stmt|;
comment|/**      * {@link Initializer} implementation that calls the abstract      * {@link #getCoreContainerReference()} method to lookup the {@link ServiceReference}      * to the {@link CoreContainer} used for this dispatch filter      *       */
specifier|private
name|Initializer
name|initialiser
init|=
operator|new
name|Initializer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CoreContainer
name|initialize
parameter_list|()
block|{
comment|//support multiple calls
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|ungetCoreContainer
argument_list|()
expr_stmt|;
comment|//cleanup current
block|}
name|delegate
operator|=
name|getCoreContainer
argument_list|()
expr_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
return|return
name|delegate
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"CoreContainer currently not available"
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|/**      * Protected Constructor intended to be overwritten by sub classes      */
specifier|public
name|DelegatingSolrDispatchFilter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Initializer
name|createInitializer
parameter_list|()
block|{
comment|//we do not need to initialise a new CoreContaine. Just get the service
comment|//via the OSGI environment
return|return
name|initialiser
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|//we need NOT do shutdown the CoreContainer! Just release the
comment|//OSGI service!
try|try
block|{
name|ungetCoreContainer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"RuntimeException during ungetCoreContainer ... ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Getter for the {@link CoreContainer} used for the Solr dispatch filter      * @return      */
specifier|protected
specifier|abstract
name|CoreContainer
name|getCoreContainer
parameter_list|()
function_decl|;
comment|/**      * Releases the {@link CoreContainer} no longer needed by the Solr dispatch      * filter.      */
specifier|protected
specifier|abstract
name|void
name|ungetCoreContainer
parameter_list|()
function_decl|;
block|}
end_class

end_unit

