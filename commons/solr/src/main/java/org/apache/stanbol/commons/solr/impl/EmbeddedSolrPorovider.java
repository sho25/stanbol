begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|NameFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrServerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|SolrServerTypeEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|ConfigUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Support for the use of {@link EmbeddedSolrPorovider} in combination with the SolrYard implementation. This  * implements the {@link SolrServerProvider} interface for the {@link SolrServerTypeEnum#EMBEDDED}.  *<p>  *   * TODO: add functionality to lookup the internally managed {@link CoreContainer}. Maybe this requires to add  * a second service  *   * @author Rupert Westenthaler  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|EmbeddedSolrPorovider
implements|implements
name|SolrServerProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EmbeddedSolrPorovider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// define the default values here because they are not accessible via the Solr API
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_XML_NAME
init|=
literal|"solr.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_CONFIG_NAME
init|=
literal|"solrconfig.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_SCHEMA_NAME
init|=
literal|"schema.xml"
decl_stmt|;
comment|/**      * internally used to keep track of active {@link CoreContainer}s for requested paths.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CoreContainer
argument_list|>
name|coreContainers
init|=
operator|new
name|ReferenceMap
argument_list|()
decl_stmt|;
comment|//    @Reference(cardinality=ReferenceCardinality.OPTIONAL_UNARY,
comment|//        policy=ReferencePolicy.DYNAMIC,
comment|//        strategy=ReferenceStrategy.EVENT,
comment|//        bind="bindSolrDirectoryManager",
comment|//        unbind="unbindSolrDirectoryManager")
comment|//    private SolrDirectoryManager solrDirectoryManager;
specifier|public
name|EmbeddedSolrPorovider
parameter_list|()
block|{}
comment|//    protected void bindSolrDirectoryManager(SolrDirectoryManager solrDirectoryManager){
comment|//        this.solrDirectoryManager = solrDirectoryManager;
comment|//    }
comment|//    protected void unbindSolrDirectoryManager(SolrDirectoryManager solrDirectoryManager) {
comment|//        this.solrDirectoryManager = null;
comment|//    }
comment|//    protected SolrDirectoryManager getSolrDirectoryManager(){
comment|//        return this.solrDirectoryManager;
comment|//    }
annotation|@
name|Override
specifier|public
name|SolrServer
name|getSolrServer
parameter_list|(
name|SolrServerTypeEnum
name|type
parameter_list|,
name|String
name|uriOrPath
parameter_list|,
name|String
modifier|...
name|additional
parameter_list|)
throws|throws
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"getSolrServer Request for %s and path %s"
argument_list|,
name|type
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uriOrPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The Path to the Index MUST NOT be NULL!"
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"parsed solr server location "
operator|+
name|uriOrPath
argument_list|)
expr_stmt|;
comment|// first try as file (but keep in mind it could also be an URI)
name|File
name|index
init|=
name|ConfigUtils
operator|.
name|toFile
argument_list|(
name|uriOrPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s does not exist"
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"get solr server for location "
operator|+
name|index
argument_list|)
expr_stmt|;
name|File
name|coreDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|solr
init|=
name|getFile
argument_list|(
name|index
argument_list|,
name|SOLR_XML_NAME
argument_list|)
decl_stmt|;
name|String
name|coreName
decl_stmt|;
if|if
condition|(
name|solr
operator|!=
literal|null
condition|)
block|{
comment|// in that case we assume that this is a single core installation
name|coreName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|solr
operator|=
name|getFile
argument_list|(
name|index
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|SOLR_XML_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|solr
operator|!=
literal|null
condition|)
block|{
comment|// assume this is a multi core
name|coreName
operator|=
name|index
operator|.
name|getName
argument_list|()
expr_stmt|;
name|coreDir
operator|=
name|index
expr_stmt|;
name|index
operator|=
name|index
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
comment|// set the index dir to the parent
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s is not an Solr "
operator|+
literal|"Index nor a Core of an Multi Core Configuration "
operator|+
literal|"(no \""
operator|+
name|SOLR_XML_NAME
operator|+
literal|"\" was found in this nor the parent directory!)"
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// now init the EmbeddedSolrServer
name|log
operator|.
name|info
argument_list|(
literal|"Create EmbeddedSolrServer for index {} and core {}"
argument_list|,
name|index
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|CoreContainer
name|coreContainer
init|=
name|getCoreContainer
argument_list|(
name|index
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solr
argument_list|)
decl_stmt|;
comment|// if we have a multi core environment and the core is not yet registered
if|if
condition|(
operator|!
name|coreName
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|coreContainer
operator|.
name|getCoreNames
argument_list|()
operator|.
name|contains
argument_list|(
name|coreName
argument_list|)
condition|)
block|{
comment|// register this core first
comment|/*                  * NOTE: We need to reset the ContextClassLoader to the one used for this Bundle, because Solr                  * uses this ClassLoader to load all the plugins configured in the SOLR_XML_NAME and                  * schema.xml. The finally block resets the context class loader to the previous value.                  * (Rupert Westenthaler 20010209)                  */
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|EmbeddedSolrPorovider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// SolrResourceLoader solrLoader = new SolrResourceLoader(coreDir.getAbsolutePath());
name|CoreDescriptor
name|coreDescriptor
init|=
operator|new
name|CoreDescriptor
argument_list|(
name|coreContainer
argument_list|,
name|coreName
argument_list|,
name|coreDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|SolrCore
name|core
decl_stmt|;
try|try
block|{
name|core
operator|=
name|coreContainer
operator|.
name|create
argument_list|(
name|coreDescriptor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to load/register Solr Core %s "
operator|+
literal|"to SolrServer %s!"
argument_list|,
name|coreName
argument_list|,
name|index
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|coreContainer
operator|.
name|register
argument_list|(
name|coreName
argument_list|,
name|core
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// persist the new core to have it available on the next start
name|coreContainer
operator|.
name|persist
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|SolrServer
operator|)
operator|new
name|EmbeddedSolrServer
argument_list|(
name|coreContainer
argument_list|,
name|coreName
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The parsed Index Path %s is no Directory"
argument_list|,
name|uriOrPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|final
name|CoreContainer
name|getCoreContainer
parameter_list|(
name|File
name|solrDir
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalStateException
block|{
return|return
name|getCoreContainer
argument_list|(
name|solrDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|solrDir
argument_list|,
name|SOLR_XML_NAME
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|CoreContainer
name|getCoreContainer
parameter_list|(
name|String
name|solrDir
parameter_list|,
name|File
name|solrConf
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalStateException
block|{
name|CoreContainer
name|container
init|=
name|coreContainers
operator|.
name|get
argument_list|(
name|solrDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|container
operator|=
operator|new
name|CoreContainer
argument_list|(
name|solrDir
argument_list|)
expr_stmt|;
comment|/*              * NOTE: We need to reset the ContextClassLoader to the one used for this Bundle, because Solr              * uses this ClassLoader to load all the plugins configured in the SOLR_XML_NAME and schema.xml.              * The finally block resets the context class loader to the previous value. (Rupert Westenthaler              * 20010209)              */
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|EmbeddedSolrPorovider
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|container
operator|.
name|load
argument_list|(
name|solrDir
argument_list|,
name|solrConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse Solr Configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to access Solr Configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to parse Solr Configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
name|coreContainers
operator|.
name|put
argument_list|(
name|solrDir
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|SolrServerTypeEnum
argument_list|>
name|supportedTypes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|SolrServerTypeEnum
operator|.
name|EMBEDDED
argument_list|)
return|;
block|}
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"activating"
operator|+
name|EmbeddedSolrPorovider
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|// currently not used
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"deactivating"
operator|+
name|EmbeddedSolrPorovider
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
comment|// currently not used
block|}
comment|// Keeping for now because this might be useful when checking for required files
comment|// /**
comment|// * Checks if the parsed directory contains a file that starts with the parsed
comment|// * name. Parsing "hallo" will find "hallo.all", "hallo.ween" as well as "hallo".
comment|// * @param dir the Directory. This assumes that the parsed File is not
comment|// *<code>null</code>, exists and is an directory
comment|// * @param name the name. If<code>null</code> any file is accepted, meaning
comment|// * that this will return true if the directory contains any file
comment|// * @return the state
comment|// */
comment|// private boolean hasFile(File dir, String name){
comment|// return dir.list(new NameFileFilter(name)).length>0;
comment|// }
comment|// /**
comment|// * Returns the first file that matches the parsed name.
comment|// * Parsing "hallo" will find "hallo.all", "hallo.ween" as well as "hallo".
comment|// * @param dir the Directory. This assumes that the parsed File is not
comment|// *<code>null</code>, exists and is an directory.
comment|// * @param name the name. If<code>null</code> any file is accepted, meaning
comment|// * that this will return true if the directory contains any file
comment|// * @return the first file matching the parsed prefix.
comment|// */
comment|// private File getFileByPrefix(File dir, String prefix){
comment|// String[] files = dir.list(new PrefixFileFilter(prefix));
comment|// return files.length>0?new File(dir,files[0]):null;
comment|// }
comment|/**      * Returns the first file that matches the parsed name (case sensitive)      *       * @param dir      *            the Directory. This assumes that the parsed File is not<code>null</code>, exists and is an      *            directory.      * @param name      *            the name. If<code>null</code> any file is accepted, meaning that this will return true if      *            the directory contains any file      * @return the first file matching the parsed name.      */
specifier|private
name|File
name|getFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|list
argument_list|(
operator|new
name|NameFileFilter
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|files
operator|.
name|length
operator|>
literal|0
condition|?
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|files
index|[
literal|0
index|]
argument_list|)
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

