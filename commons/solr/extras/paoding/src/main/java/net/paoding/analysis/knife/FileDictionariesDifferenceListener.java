begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|Difference
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|DifferenceListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @since 2.0.2  *   */
end_comment

begin_class
specifier|public
class|class
name|FileDictionariesDifferenceListener
implements|implements
name|DifferenceListener
block|{
specifier|private
name|FileDictionaries
name|dictionaries
decl_stmt|;
specifier|private
name|KnifeBox
name|knifeBox
decl_stmt|;
specifier|public
name|FileDictionariesDifferenceListener
parameter_list|()
block|{ 	}
specifier|public
name|FileDictionariesDifferenceListener
parameter_list|(
name|Dictionaries
name|dictionaries
parameter_list|,
name|KnifeBox
name|knifeBox
parameter_list|)
block|{
name|this
operator|.
name|dictionaries
operator|=
operator|(
name|FileDictionaries
operator|)
name|dictionaries
expr_stmt|;
name|this
operator|.
name|knifeBox
operator|=
name|knifeBox
expr_stmt|;
block|}
specifier|public
name|Dictionaries
name|getDictionaries
parameter_list|()
block|{
return|return
name|dictionaries
return|;
block|}
specifier|public
name|void
name|setDictionaries
parameter_list|(
name|Dictionaries
name|dictionaries
parameter_list|)
block|{
name|this
operator|.
name|dictionaries
operator|=
operator|(
name|FileDictionaries
operator|)
name|dictionaries
expr_stmt|;
block|}
specifier|public
name|KnifeBox
name|getKnifeBox
parameter_list|()
block|{
return|return
name|knifeBox
return|;
block|}
specifier|public
name|void
name|setKnifeBox
parameter_list|(
name|KnifeBox
name|knifeBox
parameter_list|)
block|{
name|this
operator|.
name|knifeBox
operator|=
name|knifeBox
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|on
parameter_list|(
name|Difference
name|diff
parameter_list|)
block|{
name|List
comment|/*<Node> */
name|all
init|=
operator|new
name|LinkedList
comment|/*<Node> */
argument_list|()
decl_stmt|;
name|all
operator|.
name|addAll
argument_list|(
operator|(
name|List
comment|/*<Node> */
operator|)
name|diff
operator|.
name|getDeleted
argument_list|()
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
operator|(
name|List
comment|/*<Node> */
operator|)
name|diff
operator|.
name|getModified
argument_list|()
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
operator|(
name|List
comment|/*<Node> */
operator|)
name|diff
operator|.
name|getNewcome
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|all
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|dictionaries
operator|.
name|refreshDicWords
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Knife
index|[]
name|knives
init|=
name|knifeBox
operator|.
name|getKnives
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|knives
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Knife
name|knife
init|=
name|knives
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|knife
operator|instanceof
name|DictionariesWare
condition|)
block|{
operator|(
operator|(
name|DictionariesWare
operator|)
name|knife
operator|)
operator|.
name|setDictionaries
argument_list|(
name|dictionaries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

