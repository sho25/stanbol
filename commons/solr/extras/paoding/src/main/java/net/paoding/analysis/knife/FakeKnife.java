begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * 无实际用处的Knife。用于示例装载Knife并进行属性设置。  *<p>  *   * @see paoding-knives-user.properties  * @author zhiliang.wang [qieqie.wang@gmail.com]  * @since 2.0.2  */
end_comment

begin_class
specifier|public
class|class
name|FakeKnife
implements|implements
name|Knife
implements|,
name|DictionariesWare
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FakeKnife
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|int
name|intParam
decl_stmt|;
specifier|private
name|Inner
name|inner
init|=
operator|new
name|Inner
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"set property: name="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getIntParam
parameter_list|()
block|{
return|return
name|intParam
return|;
block|}
specifier|public
name|void
name|setIntParam
parameter_list|(
name|int
name|intParam
parameter_list|)
block|{
name|this
operator|.
name|intParam
operator|=
name|intParam
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"set property: intParam="
operator|+
name|intParam
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInner
parameter_list|(
name|Inner
name|inner
parameter_list|)
block|{
name|this
operator|.
name|inner
operator|=
name|inner
expr_stmt|;
block|}
specifier|public
name|Inner
name|getInner
parameter_list|()
block|{
return|return
name|inner
return|;
block|}
specifier|public
name|int
name|assignable
parameter_list|(
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|LIMIT
return|;
block|}
specifier|public
name|int
name|dissect
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"this knife doesn't accept any beef"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setDictionaries
parameter_list|(
name|Dictionaries
name|dictionaries
parameter_list|)
block|{ 	}
class|class
name|Inner
block|{
specifier|private
name|boolean
name|bool
decl_stmt|;
specifier|public
name|void
name|setBool
parameter_list|(
name|boolean
name|bool
parameter_list|)
block|{
name|this
operator|.
name|bool
operator|=
name|bool
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"set property: bool="
operator|+
name|bool
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBool
parameter_list|()
block|{
return|return
name|bool
return|;
block|}
block|}
block|}
end_class

end_unit

