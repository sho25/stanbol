begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * KnifeBox负责决策当遇到字符串指定位置时应使用的Knife对象.  *<p>  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @see Paoding  *   * @since 1.0  *   */
end_comment

begin_class
specifier|public
class|class
name|KnifeBox
implements|implements
name|Knife
block|{
specifier|private
name|Knife
index|[]
name|knives
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|public
name|KnifeBox
parameter_list|()
block|{ 	}
specifier|public
name|KnifeBox
parameter_list|(
name|List
comment|/*<Knife> */
name|knives
parameter_list|)
block|{
name|this
operator|.
name|setKnives
argument_list|(
name|knives
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KnifeBox
parameter_list|(
name|Knife
index|[]
name|knives
parameter_list|)
block|{
name|this
operator|.
name|setKnives
argument_list|(
name|knives
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * 返回配置的所有Knife<br> 	 * !!!不要去变更返回数组中的元素 	 *  	 * @return 	 */
specifier|public
name|Knife
index|[]
name|getKnives
parameter_list|()
block|{
return|return
name|knives
return|;
block|}
specifier|public
name|void
name|setKnives
parameter_list|(
name|List
comment|/*<Knife> */
name|knifeList
parameter_list|)
block|{
if|if
condition|(
name|knifeList
operator|==
literal|null
condition|)
block|{
name|knifeList
operator|=
operator|new
name|ArrayList
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|knifeList
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|knives
operator|=
operator|new
name|Knife
index|[
name|size
index|]
expr_stmt|;
name|Iterator
name|iter
init|=
name|knifeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|knives
index|[
name|i
index|]
operator|=
operator|(
name|Knife
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setKnives
parameter_list|(
name|Knife
index|[]
name|knives
parameter_list|)
block|{
if|if
condition|(
name|knives
operator|==
literal|null
condition|)
block|{
name|knives
operator|=
operator|new
name|Knife
index|[
literal|0
index|]
expr_stmt|;
block|}
name|size
operator|=
name|knives
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|knives
operator|=
operator|new
name|Knife
index|[
name|size
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|knives
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|knives
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|assignable
parameter_list|(
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|ASSIGNED
return|;
block|}
specifier|public
name|int
name|dissect
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Knife
name|knife
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|knife
operator|=
name|knives
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|ASSIGNED
operator|==
name|knife
operator|.
name|assignable
argument_list|(
name|beef
argument_list|,
name|offset
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|int
name|lastLimit
init|=
name|knife
operator|.
name|dissect
argument_list|(
name|collector
argument_list|,
name|beef
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// 如果返回的下一个分词点发生了变化(可进可退)，则直接返回之，
comment|// 否则继续让下一个Knife有机会分词
if|if
condition|(
name|lastLimit
operator|!=
name|offset
condition|)
block|{
return|return
name|lastLimit
return|;
block|}
block|}
block|}
return|return
operator|++
name|offset
return|;
block|}
block|}
end_class

end_unit

