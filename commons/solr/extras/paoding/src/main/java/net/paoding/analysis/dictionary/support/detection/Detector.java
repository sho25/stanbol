begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @since 2.0.2  *   */
end_comment

begin_class
specifier|public
class|class
name|Detector
implements|implements
name|Runnable
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Detector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DifferenceListener
name|listener
decl_stmt|;
specifier|private
name|File
name|home
decl_stmt|;
specifier|private
name|FileFilter
name|filter
decl_stmt|;
specifier|private
name|long
name|interval
decl_stmt|;
specifier|private
name|Snapshot
name|lastSnapshot
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
specifier|private
name|boolean
name|alive
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|setListener
parameter_list|(
name|DifferenceListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|Detector
parameter_list|()
block|{ 	}
comment|/** 	 * 检查间隔 	 *  	 * @param interval 	 */
specifier|public
name|void
name|setInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
operator|*
literal|1000
expr_stmt|;
block|}
specifier|public
name|void
name|setHome
parameter_list|(
name|File
name|home
parameter_list|)
block|{
name|this
operator|.
name|home
operator|=
name|home
expr_stmt|;
block|}
specifier|public
name|void
name|setHome
parameter_list|(
name|String
name|home
parameter_list|)
block|{
name|this
operator|.
name|home
operator|=
operator|new
name|File
argument_list|(
name|home
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|FileFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|Snapshot
name|flash
parameter_list|()
block|{
return|return
name|Snapshot
operator|.
name|flash
argument_list|(
name|home
argument_list|,
name|filter
argument_list|)
return|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|boolean
name|daemon
parameter_list|)
block|{
if|if
condition|(
name|lastSnapshot
operator|==
literal|null
condition|)
block|{
name|lastSnapshot
operator|=
name|flash
argument_list|()
expr_stmt|;
block|}
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Snapshot
name|getLastSnapshot
parameter_list|()
block|{
return|return
name|lastSnapshot
return|;
block|}
specifier|public
name|void
name|setLastSnapshot
parameter_list|(
name|Snapshot
name|last
parameter_list|)
block|{
name|this
operator|.
name|lastSnapshot
operator|=
name|last
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|interval
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"should set a interval(>0) for the detection."
argument_list|)
throw|;
while|while
condition|(
name|alive
condition|)
block|{
name|sleep
argument_list|()
expr_stmt|;
name|forceDetecting
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|forceDetecting
parameter_list|()
block|{
name|Snapshot
name|current
init|=
name|flash
argument_list|()
decl_stmt|;
name|Difference
name|diff
init|=
name|current
operator|.
name|diff
argument_list|(
name|lastSnapshot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|listener
operator|.
name|on
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"found differen for "
operator|+
name|home
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|lastSnapshot
operator|=
name|current
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setStop
parameter_list|()
block|{
name|alive
operator|=
literal|false
expr_stmt|;
name|thread
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|sleep
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Detector
name|d
init|=
operator|new
name|Detector
argument_list|()
decl_stmt|;
name|d
operator|.
name|setInterval
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|setHome
argument_list|(
operator|new
name|File
argument_list|(
literal|"dic"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setFilter
argument_list|(
operator|new
name|ExtensionFileFilter
argument_list|(
literal|".dic"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setListener
argument_list|(
operator|new
name|DifferenceListener
argument_list|()
block|{
specifier|public
name|void
name|on
parameter_list|(
name|Difference
name|diff
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|d
operator|.
name|start
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

