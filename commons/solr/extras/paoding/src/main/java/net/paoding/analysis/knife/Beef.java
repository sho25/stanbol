begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_comment
comment|/**  * {@link Beef}是要被庖丁“解”的“牛骨肉”，是对文本字符流的高效封装，可以从中读取指定位置的字符。  *<p>  * {@link Beef}和{@link String}对象的不同之处在于：<br>  * {@link Beef}共享输入的char数组，{@link String}的策略是对共享数组进行克隆，克隆损耗了性能。<br>  * 同时，{@link Beef}在 {@link #charAt(int)}方法还进行对字符的预处理，使返回时符合规则:1)toLowerCase  * 2)全角转半角等  *<p>  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @since 1.0  *   */
end_comment

begin_class
specifier|public
class|class
name|Beef
implements|implements
name|CharSequence
block|{
comment|// -------------------------------------------------
comment|/** 	 * 文本字符数组 	 */
specifier|private
specifier|final
name|char
index|[]
name|value
decl_stmt|;
comment|/** 	 * 字符开始位置，即charAt(i)返回value[offset+i]字符 	 */
specifier|private
name|int
name|offset
decl_stmt|;
comment|/** 	 * 从offset位置开始的字符数 	 */
specifier|private
name|int
name|count
decl_stmt|;
comment|/** Cache the hash code for the beef */
specifier|private
name|int
name|hash
decl_stmt|;
comment|// Default to 0
comment|// -------------------------------------------------
comment|/** 	 * 构造函数 	 *  	 * @param body 	 *            被本对象中直接拥有的文本字符数组 	 * @param offset 	 *            字符开始位置，即get(i)返回body[offset+i]字符 	 * @param count 	 *            从offset位置开始的字符数 	 */
specifier|public
name|Beef
parameter_list|(
name|char
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|set
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// -------------------------------------------------
specifier|public
name|void
name|set
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|StringIndexOutOfBoundsException
argument_list|(
name|offset
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|StringIndexOutOfBoundsException
argument_list|(
name|count
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|>
name|value
operator|.
name|length
operator|-
name|count
condition|)
block|{
throw|throw
operator|new
name|StringIndexOutOfBoundsException
argument_list|(
name|offset
operator|+
name|count
argument_list|)
throw|;
block|}
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
specifier|public
name|char
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|// -------------------------------------------------
comment|/** 	 * 获取指定位置的字符。返回之前将被预处理：1)toLowerCase，2)全角转半角等 	 */
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|count
condition|)
block|{
name|char
name|src
init|=
name|value
index|[
name|offset
operator|+
name|index
index|]
decl_stmt|;
if|if
condition|(
name|src
operator|>
literal|65280
operator|&&
name|src
operator|<
literal|65375
condition|)
block|{
name|src
operator|=
call|(
name|char
call|)
argument_list|(
name|src
operator|-
literal|65248
argument_list|)
expr_stmt|;
name|value
index|[
name|offset
operator|+
name|index
index|]
operator|=
name|src
expr_stmt|;
block|}
if|if
condition|(
name|src
operator|>=
literal|'A'
operator|&&
name|src
operator|<=
literal|'Z'
condition|)
block|{
name|src
operator|+=
literal|32
expr_stmt|;
name|value
index|[
name|offset
operator|+
name|index
index|]
operator|=
name|src
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|src
operator|==
literal|12288
condition|)
block|{
name|src
operator|=
literal|32
expr_stmt|;
name|value
index|[
name|offset
operator|+
name|index
index|]
operator|=
literal|32
expr_stmt|;
block|}
return|return
name|src
return|;
block|}
return|return
operator|(
name|char
operator|)
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|value
argument_list|,
name|offset
operator|+
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
return|;
block|}
comment|// -------------------------------------------------
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|count
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|hash
decl_stmt|;
if|if
condition|(
name|h
operator|==
literal|0
condition|)
block|{
name|int
name|off
init|=
name|offset
decl_stmt|;
name|char
name|val
index|[]
init|=
name|value
decl_stmt|;
name|int
name|len
init|=
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|val
index|[
name|off
operator|++
index|]
expr_stmt|;
block|}
name|hash
operator|=
name|h
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
block|}
end_class

end_unit

