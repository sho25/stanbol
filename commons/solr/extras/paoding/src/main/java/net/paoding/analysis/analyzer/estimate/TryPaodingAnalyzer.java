begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|estimate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|PaodingAnalyzer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
operator|.
name|PaodingMaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_class
specifier|public
class|class
name|TryPaodingAnalyzer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARGS_TIP
init|=
literal|":"
decl_stmt|;
specifier|static
name|String
name|input
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|file
init|=
literal|null
decl_stmt|;
specifier|static
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|charset
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|mode
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|analyzerName
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|print
init|=
literal|null
decl_stmt|;
specifier|static
name|String
name|properties
init|=
name|PaodingMaker
operator|.
name|DEFAULT_PROPERTIES_PATH
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|resetArgs
argument_list|()
expr_stmt|;
name|int
name|inInput
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|==
literal|null
operator|||
operator|(
name|args
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|)
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--file"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-f"
argument_list|)
condition|)
block|{
name|file
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--charset"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-c"
argument_list|)
condition|)
block|{
name|charset
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--mode"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-m"
argument_list|)
condition|)
block|{
name|mode
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--properties"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-p"
argument_list|)
condition|)
block|{
name|properties
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--analyzer"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-a"
argument_list|)
condition|)
block|{
name|analyzerName
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--print"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-P"
argument_list|)
condition|)
block|{
name|print
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--input"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-i"
argument_list|)
condition|)
block|{
name|inInput
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// 非选项的参数数组视为input
if|if
condition|(
operator|!
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|&&
operator|(
name|i
operator|==
literal|0
operator|||
name|args
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"-i"
argument_list|)
operator|||
name|args
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"--input"
argument_list|)
operator|||
operator|!
name|args
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
name|input
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
comment|// !!没有++i
block|}
else|else
block|{
name|input
operator|=
name|input
operator|+
literal|' '
operator|+
name|args
index|[
name|i
index|]
expr_stmt|;
comment|// !!没有++i
block|}
name|inInput
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|input
operator|=
literal|null
expr_stmt|;
name|reader
operator|=
name|getReader
argument_list|(
name|file
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
comment|//
name|analysing
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|resetArgs
argument_list|()
expr_stmt|;
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|resetArgs
parameter_list|()
block|{
name|input
operator|=
literal|null
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|charset
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
literal|null
expr_stmt|;
name|print
operator|=
literal|null
expr_stmt|;
name|analyzerName
operator|=
literal|null
expr_stmt|;
name|properties
operator|=
name|PaodingMaker
operator|.
name|DEFAULT_PROPERTIES_PATH
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|analysing
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
decl_stmt|;
if|if
condition|(
name|analyzerName
operator|==
literal|null
operator|||
name|analyzerName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"paoding"
argument_list|)
condition|)
block|{
comment|//properties==null等同于new new PaodingAnalyzer();
name|analyzer
operator|=
operator|new
name|PaodingAnalyzer
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|PaodingAnalyzer
operator|)
name|analyzer
operator|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Class
name|clz
decl_stmt|;
if|if
condition|(
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"standard"
argument_list|)
condition|)
block|{
name|analyzerName
operator|=
literal|"org.apache.lucene.analysis.standard.StandardAnalyzer"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cjk"
argument_list|)
condition|)
block|{
name|analyzerName
operator|=
literal|"org.apache.lucene.analysis.cjk.CJKAnalyzer"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cn"
argument_list|)
operator|||
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"chinese"
argument_list|)
condition|)
block|{
name|analyzerName
operator|=
literal|"org.apache.lucene.analysis.cn.ChineseAnalyzer"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"st"
argument_list|)
operator|||
name|analyzerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"standard"
argument_list|)
condition|)
block|{
name|analyzerName
operator|=
literal|"org.apache.lucene.analysis.standard.StandardAnalyzer"
expr_stmt|;
block|}
name|clz
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|analyzerName
argument_list|)
expr_stmt|;
name|analyzer
operator|=
operator|(
name|Analyzer
operator|)
name|clz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|boolean
name|readInputFromConsle
init|=
literal|false
decl_stmt|;
name|Estimate
name|estimate
init|=
operator|new
name|Estimate
argument_list|(
name|analyzer
argument_list|)
decl_stmt|;
if|if
condition|(
name|print
operator|!=
literal|null
condition|)
block|{
name|estimate
operator|.
name|setPrint
argument_list|(
name|print
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|readInputFromConsle
condition|)
block|{
name|input
operator|=
name|getInputFromConsole
argument_list|()
expr_stmt|;
name|readInputFromConsle
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warn: none charactors you input!!"
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|input
operator|.
name|startsWith
argument_list|(
name|ARGS_TIP
argument_list|)
condition|)
block|{
name|String
name|argsStr
init|=
name|input
operator|.
name|substring
argument_list|(
name|ARGS_TIP
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|main
argument_list|(
name|argsStr
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|estimate
operator|.
name|test
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|estimate
operator|.
name|test
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|input
operator|=
literal|null
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------------------------"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|readInputFromConsle
condition|)
block|{
return|return;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getInputFromConsole
parameter_list|()
throws|throws
name|IOException
block|{
name|printTitleIfNotPrinted
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|input
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
do|do
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"paoding> "
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
name|ARGS_TIP
operator|+
literal|"clear"
argument_list|)
operator|||
name|line
operator|.
name|equals
argument_list|(
name|ARGS_TIP
operator|+
literal|"c"
argument_list|)
condition|)
block|{
name|input
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"paoding> Cleared"
argument_list|)
expr_stmt|;
return|return
name|getInputFromConsole
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|equals
argument_list|(
name|ARGS_TIP
operator|+
literal|"exit"
argument_list|)
operator|||
name|line
operator|.
name|equals
argument_list|(
name|ARGS_TIP
operator|+
literal|"quit"
argument_list|)
operator|||
name|line
operator|.
name|equals
argument_list|(
name|ARGS_TIP
operator|+
literal|"e"
argument_list|)
operator|||
name|line
operator|.
name|equals
argument_list|(
name|ARGS_TIP
operator|+
literal|"q"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Bye!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|input
operator|==
literal|null
operator|&&
name|line
operator|.
name|startsWith
argument_list|(
name|ARGS_TIP
argument_list|)
condition|)
block|{
name|input
operator|=
name|line
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|";"
operator|.
name|length
argument_list|()
condition|)
block|{
name|input
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|length
argument_list|()
operator|-
literal|";"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
name|input
operator|=
name|line
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
name|input
operator|+
literal|"\n"
operator|+
name|line
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
return|return
name|input
operator|==
literal|null
condition|?
literal|null
else|:
name|input
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
name|String
name|app
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"paoding.try.app"
argument_list|,
literal|"TryPaodingAnalyzer"
argument_list|)
decl_stmt|;
name|String
name|cmd
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"paoding.try.cmd"
argument_list|,
literal|"java "
operator|+
name|TryPaodingAnalyzer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|app
operator|+
literal|"的用法:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" [OPTIONS] [text_content]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nOPTIONS:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--file, -f:\n\t\t文章以文件的形式输入，在前缀加上\"classpath:\"表示从类路径中寻找该文件。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--charset, -c:\n\t\t文章的字符集编码，比如gbk,utf-8等。如果没有设置该选项，则使用Java环境默认的字符集编码。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--properties, -p:\n\t\t不读取默认的类路径下的庖丁分词属性文件，而使用指定的文件，在前缀加上\"classpath:\"表示从类路径中寻找该文件。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--mode, -m:\n\t\t强制使用给定的mode的分词器；可以设定为default,most-words,max-word-length或指定类名的其他mode(指定类名的，需要加前缀\"class:\")。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--input, -i:\n\t\t要被分词的文章内容；当没有通过-f或--file指定文章输入文件时可选择这个选项指定要被分词的内容。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--analyzer, -a:\n\t\t测试其他分词器，通过--analyzer或-a指定其完整类名。特别地，paoding、cjk、chinese、st分别对应PaodingAnalyzer、CJKAnalyzer、ChineseAnalyzer、StandardAnalyzer"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t--print, -P:\n\t\t 是否打印分词结果。默认打印前50行。规则：no表示不打印；50等价于1-50行；1-50表示打印1至50行;可以以逗号组合使用，如20,40-50表示打印1-20以及40-50行"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n示例:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" ?"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" 中华人民共和国"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" -m max 中华人民共和国"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" -f e:/content.txt -c utf8"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" -f e:/content.txt -c utf8 -m max-word-length"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|cmd
operator|+
literal|" -f e:/content.txt -c utf8 -a cjk"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n若是控制台进入\"paoding>\"后:"
argument_list|)
expr_stmt|;
name|titlePrinted
operator|=
literal|false
expr_stmt|;
name|printTitleIfNotPrinted
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|titlePrinted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|welcomePrinted
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|void
name|printTitleIfNotPrinted
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
operator|!
name|titlePrinted
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|welcomePrinted
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Welcome to Paoding Analyser(2.0.4-alpha2)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|welcomePrinted
operator|=
literal|true
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"直接输入或粘贴要被分词的内容，以分号;结束，回车后开始分词。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"另起一行输入:clear或:c，使此次输入无效，用以重新输入。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"要使用命令行参数读入文件内容或其他参数请以冒号:开始，然后输入参数选项。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"退出，请输入:quit或:q、:exit、:e"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"需要帮助，请输入:?"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"注意：指定对文件分词之前要了解该文件的编码，如果系统编码和文件编码不一致，要通过-c指定文件的编码。"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|titlePrinted
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|getContent
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|String
operator|)
name|read
argument_list|(
name|path
argument_list|,
name|encoding
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|static
name|Reader
name|getReader
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Reader
operator|)
name|read
argument_list|(
name|path
argument_list|,
name|encoding
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|Object
name|read
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|encoding
parameter_list|,
name|boolean
name|return_string
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|Estimate
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not found "
operator|+
name|path
operator|+
literal|" in classpath."
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"read content from:"
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not found "
operator|+
name|path
operator|+
literal|" in system."
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"read content from:"
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|Reader
name|re
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|re
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|re
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|return_string
condition|)
block|{
return|return
name|re
return|;
block|}
name|char
index|[]
name|chs
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|count
decl_stmt|;
comment|// 为兼容低版本的JDK，使用StringBuffer而不是StringBuilder
name|StringBuffer
name|content
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|re
operator|.
name|read
argument_list|(
name|chs
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|content
operator|.
name|append
argument_list|(
name|chs
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|re
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|content
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

