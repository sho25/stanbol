begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|filewords
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|Word
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
operator|.
name|CharSet
import|;
end_import

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @since 1.0  *   */
end_comment

begin_class
specifier|public
class|class
name|SimpleReadListener
implements|implements
name|ReadListener
block|{
specifier|private
name|Map
comment|/*<String, Set<Word>> */
name|dics
init|=
operator|new
name|Hashtable
comment|/*<String, Set<Word>> */
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
comment|/*<Word> */
name|words
init|=
operator|new
name|HashSet
comment|/*<Word> */
argument_list|()
decl_stmt|;
specifier|private
name|String
name|ext
init|=
literal|".dic"
decl_stmt|;
specifier|public
name|SimpleReadListener
parameter_list|(
name|String
name|ext
parameter_list|)
block|{
name|this
operator|.
name|ext
operator|=
name|ext
expr_stmt|;
block|}
specifier|public
name|SimpleReadListener
parameter_list|()
block|{ 	}
specifier|public
name|boolean
name|onFileBegin
parameter_list|(
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|endsWith
argument_list|(
name|ext
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|words
operator|=
operator|new
name|HashSet
comment|/*<String> */
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|onFileEnd
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
decl_stmt|;
name|dics
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|words
argument_list|)
expr_stmt|;
name|words
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|onWord
parameter_list|(
name|String
name|wordText
parameter_list|)
block|{
name|wordText
operator|=
name|wordText
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|wordText
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|wordText
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
operator|||
name|wordText
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
return|return;
block|}
comment|// 去除汉字数字词
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wordText
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|wordText
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|CharSet
operator|.
name|toNumber
argument_list|(
name|ch
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|num
operator|>
literal|10
condition|)
block|{
comment|// "十二" vs "千万"
break|break;
block|}
block|}
if|if
condition|(
name|num
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|wordText
operator|.
name|equals
argument_list|(
literal|"两"
argument_list|)
operator|||
name|wordText
operator|.
name|equals
argument_list|(
literal|"两两"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|wordText
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
name|int
name|index
init|=
name|wordText
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|words
operator|.
name|add
argument_list|(
operator|new
name|Word
argument_list|(
name|wordText
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Word
name|w
init|=
operator|new
name|Word
argument_list|(
name|wordText
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|mindex
init|=
name|wordText
operator|.
name|indexOf
argument_list|(
literal|"m="
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|mindex
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|mEndIndex
init|=
name|wordText
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|,
name|mindex
argument_list|)
decl_stmt|;
name|String
name|m
init|=
name|wordText
operator|.
name|substring
argument_list|(
name|mindex
operator|+
literal|"m="
operator|.
name|length
argument_list|()
argument_list|,
name|mEndIndex
argument_list|)
decl_stmt|;
name|w
operator|.
name|setModifiers
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|words
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Map
comment|/*<String, Set<String>> */
name|getResult
parameter_list|()
block|{
return|return
name|dics
return|;
block|}
block|}
end_class

end_unit

