begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   */
end_comment

begin_class
specifier|public
class|class
name|LetterKnife
extends|extends
name|CombinatoricsKnife
block|{
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_NOISE
init|=
block|{
literal|"a"
block|,
literal|"an"
block|,
literal|"and"
block|,
literal|"are"
block|,
literal|"as"
block|,
literal|"at"
block|,
literal|"be"
block|,
literal|"but"
block|,
literal|"by"
block|,
literal|"for"
block|,
literal|"if"
block|,
literal|"in"
block|,
literal|"into"
block|,
literal|"is"
block|,
literal|"it"
block|,
literal|"no"
block|,
literal|"not"
block|,
literal|"of"
block|,
literal|"on"
block|,
literal|"or"
block|,
literal|"such"
block|,
literal|"that"
block|,
literal|"the"
block|,
literal|"their"
block|,
literal|"then"
block|,
literal|"there"
block|,
literal|"these"
block|,
literal|"they"
block|,
literal|"this"
block|,
literal|"to"
block|,
literal|"was"
block|,
literal|"will"
block|,
literal|"with"
block|,
literal|"www"
block|}
decl_stmt|;
specifier|public
name|LetterKnife
parameter_list|()
block|{
name|super
argument_list|(
name|DEFAULT_NOISE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LetterKnife
parameter_list|(
name|String
index|[]
name|noiseWords
parameter_list|)
block|{
name|super
argument_list|(
name|noiseWords
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|assignable
parameter_list|(
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|char
name|ch
init|=
name|beef
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|CharSet
operator|.
name|isLantingLetter
argument_list|(
name|ch
argument_list|)
condition|)
block|{
return|return
name|ASSIGNED
return|;
block|}
if|if
condition|(
name|index
operator|>
name|offset
condition|)
block|{
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|ch
operator|==
literal|'_'
condition|)
block|{
return|return
name|POINT
return|;
block|}
block|}
return|return
name|LIMIT
return|;
block|}
block|}
end_class

end_unit

