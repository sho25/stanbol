begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|impl
operator|.
name|MaxWordLengthTokenCollector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|impl
operator|.
name|MostWordsTokenCollector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
operator|.
name|Knife
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_class
specifier|public
class|class
name|PaodingAnalyzerBean
extends|extends
name|Analyzer
block|{
comment|// -------------------------------------------------
comment|/** 	 * 最多切分 	 */
specifier|public
specifier|static
specifier|final
name|int
name|MOST_WORDS_MODE
init|=
literal|1
decl_stmt|;
comment|/** 	 * 按最大切分 	 */
specifier|public
specifier|static
specifier|final
name|int
name|MAX_WORD_LENGTH_MODE
init|=
literal|2
decl_stmt|;
comment|// -------------------------------------------------
comment|/** 	 * 用于向PaodingTokenizer提供，分解文本字符 	 *  	 * @see PaodingTokenizer#next() 	 *  	 */
specifier|private
name|Knife
name|knife
decl_stmt|;
comment|/** 	 * @see #MOST_WORDS_MODE 	 * @see #MAX_WORD_LENGTH_MODE 	 */
specifier|private
name|int
name|mode
init|=
name|MOST_WORDS_MODE
decl_stmt|;
comment|/** 	 *  	 */
specifier|private
name|Class
name|modeClass
decl_stmt|;
comment|// -------------------------------------------------
specifier|public
name|PaodingAnalyzerBean
parameter_list|()
block|{ 	}
comment|/** 	 * @see #setKnife(Knife) 	 * @param knife 	 */
specifier|public
name|PaodingAnalyzerBean
parameter_list|(
name|Knife
name|knife
parameter_list|)
block|{
name|this
operator|.
name|knife
operator|=
name|knife
expr_stmt|;
block|}
comment|/** 	 * @see #setKnife(Knife) 	 * @see #setMode(int) 	 * @param knife 	 * @param mode 	 */
specifier|public
name|PaodingAnalyzerBean
parameter_list|(
name|Knife
name|knife
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|knife
operator|=
name|knife
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
comment|/** 	 * @see #setKnife(Knife) 	 * @see #setMode(int) 	 * @param knife 	 * @param mode 	 */
specifier|public
name|PaodingAnalyzerBean
parameter_list|(
name|Knife
name|knife
parameter_list|,
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|knife
operator|=
name|knife
expr_stmt|;
name|this
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
comment|// -------------------------------------------------
specifier|public
name|Knife
name|getKnife
parameter_list|()
block|{
return|return
name|knife
return|;
block|}
specifier|public
name|void
name|setKnife
parameter_list|(
name|Knife
name|knife
parameter_list|)
block|{
name|this
operator|.
name|knife
operator|=
name|knife
expr_stmt|;
block|}
specifier|public
name|int
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
comment|/** 	 * 设置分析器模式. 	 *<p> 	 *  	 * @param mode 	 */
specifier|public
name|void
name|setMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|!=
name|MOST_WORDS_MODE
operator|&&
name|mode
operator|!=
name|MAX_WORD_LENGTH_MODE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong mode:"
operator|+
name|mode
argument_list|)
throw|;
block|}
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|modeClass
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * 设置分析器模式类。 	 *  	 * @param modeClass 	 *            TokenCollector的实现类。 	 */
specifier|public
name|void
name|setModeClass
parameter_list|(
name|Class
name|modeClass
parameter_list|)
block|{
name|this
operator|.
name|modeClass
operator|=
name|modeClass
expr_stmt|;
block|}
specifier|public
name|void
name|setModeClass
parameter_list|(
name|String
name|modeClass
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|modeClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|modeClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"not found mode class:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|.
name|startsWith
argument_list|(
literal|"class:"
argument_list|)
condition|)
block|{
name|setModeClass
argument_list|(
name|mode
operator|.
name|substring
argument_list|(
literal|"class:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"most-words"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mode
argument_list|)
operator|||
literal|"default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mode
argument_list|)
operator|||
operator|(
literal|""
operator|+
name|MOST_WORDS_MODE
operator|)
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|setMode
argument_list|(
name|MOST_WORDS_MODE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max-word-length"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mode
argument_list|)
operator|||
operator|(
literal|""
operator|+
name|MAX_WORD_LENGTH_MODE
operator|)
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
name|setMode
argument_list|(
name|MAX_WORD_LENGTH_MODE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"不合法的分析器Mode参数设置:"
operator|+
name|mode
argument_list|)
throw|;
block|}
block|}
block|}
comment|// -------------------------------------------------
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|knife
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"knife should be set before token"
argument_list|)
throw|;
block|}
comment|// PaodingTokenizer是TokenStream实现，使用knife解析reader流入的文本
return|return
operator|new
name|PaodingTokenizer
argument_list|(
name|reader
argument_list|,
name|knife
argument_list|,
name|createTokenCollector
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|TokenCollector
name|createTokenCollector
parameter_list|()
block|{
if|if
condition|(
name|modeClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|(
name|TokenCollector
operator|)
name|modeClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong mode class:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong mode class:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|MOST_WORDS_MODE
case|:
return|return
operator|new
name|MostWordsTokenCollector
argument_list|()
return|;
case|case
name|MAX_WORD_LENGTH_MODE
case|:
return|return
operator|new
name|MaxWordLengthTokenCollector
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"never happened"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

