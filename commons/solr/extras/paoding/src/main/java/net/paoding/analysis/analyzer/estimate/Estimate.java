begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|estimate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|PaodingTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import

begin_class
specifier|public
class|class
name|Estimate
block|{
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
specifier|private
name|String
name|print
decl_stmt|;
specifier|private
name|PrintGate
name|printGate
decl_stmt|;
specifier|public
name|Estimate
parameter_list|()
block|{
name|this
operator|.
name|setPrint
argument_list|(
literal|"50"
argument_list|)
expr_stmt|;
comment|// 默认只打印前50行分词效果
block|}
specifier|public
name|Estimate
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPrint
argument_list|(
literal|"50"
argument_list|)
expr_stmt|;
comment|// 默认只打印前50行分词效果
block|}
specifier|public
name|void
name|setAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
specifier|public
name|void
name|setPrint
parameter_list|(
name|String
name|print
parameter_list|)
block|{
if|if
condition|(
name|print
operator|==
literal|null
operator|||
name|print
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|print
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
operator|||
name|print
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|printGate
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|print
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|printGate
operator|=
operator|new
name|LinePrintGate
argument_list|()
expr_stmt|;
name|printGate
operator|.
name|setPrint
argument_list|(
name|print
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|print
operator|=
name|print
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPrint
parameter_list|()
block|{
return|return
name|print
return|;
block|}
specifier|public
name|void
name|test
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|this
operator|.
name|test
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|input
parameter_list|)
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReaderEx
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|this
operator|.
name|test
argument_list|(
name|out
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
try|try
block|{
name|long
name|begin
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|CToken
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|CToken
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|wordsCount
init|=
literal|0
decl_stmt|;
comment|//collect token
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|""
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TermAttribute
name|termAtt
init|=
operator|(
name|TermAttribute
operator|)
name|ts
operator|.
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|printGate
operator|!=
literal|null
operator|&&
name|printGate
operator|.
name|filter
argument_list|(
name|wordsCount
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|CToken
argument_list|(
name|termAtt
operator|.
name|term
argument_list|()
argument_list|,
name|wordsCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wordsCount
operator|++
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|CToken
name|ctoken
range|:
name|list
control|)
block|{
name|c
operator|=
name|ctoken
operator|.
name|i
expr_stmt|;
if|if
condition|(
name|c
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|c
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
operator|(
name|c
operator|/
literal|10
operator|+
literal|1
operator|)
operator|+
literal|":\t"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|ctoken
operator|.
name|t
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wordsCount
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tAll are noise characters or words"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|%
literal|10
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|String
name|inputLength
init|=
literal|"<未知>"
decl_stmt|;
if|if
condition|(
name|reader
operator|instanceof
name|StringReaderEx
condition|)
block|{
name|inputLength
operator|=
literal|""
operator|+
operator|(
operator|(
name|StringReaderEx
operator|)
name|reader
operator|)
operator|.
name|inputLength
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ts
operator|instanceof
name|PaodingTokenizer
condition|)
block|{
name|inputLength
operator|=
literal|""
operator|+
operator|(
operator|(
name|PaodingTokenizer
operator|)
name|ts
operator|)
operator|.
name|getInputLength
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t分词器"
operator|+
name|analyzer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t内容长度 "
operator|+
name|inputLength
operator|+
literal|"字符， 分 "
operator|+
name|wordsCount
operator|+
literal|"个词"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t分词耗时 "
operator|+
operator|(
name|end
operator|-
name|begin
operator|)
operator|+
literal|"ms "
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ 			}
block|}
block|}
comment|// -------------------------------------------
specifier|static
class|class
name|CToken
block|{
name|String
name|t
decl_stmt|;
name|int
name|i
decl_stmt|;
name|CToken
parameter_list|(
name|String
name|t
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
block|}
block|}
specifier|static
interface|interface
name|PrintGate
block|{
specifier|public
name|void
name|setPrint
parameter_list|(
name|String
name|print
parameter_list|,
name|int
name|unitSize
parameter_list|)
function_decl|;
name|boolean
name|filter
parameter_list|(
name|int
name|count
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|PrintGateToken
implements|implements
name|PrintGate
block|{
specifier|private
name|int
name|begin
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|public
name|void
name|setBegin
parameter_list|(
name|int
name|begin
parameter_list|)
block|{
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
block|}
specifier|public
name|void
name|setEnd
parameter_list|(
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
specifier|public
name|void
name|setPrint
parameter_list|(
name|String
name|print
parameter_list|,
name|int
name|unitSize
parameter_list|)
block|{
name|int
name|i
init|=
name|print
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|int
name|bv
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|print
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|ev
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|print
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|setBegin
argument_list|(
name|unitSize
operator|*
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|bv
argument_list|)
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// 第5行，是从第40开始的
name|setEnd
argument_list|(
name|unitSize
operator|*
name|Math
operator|.
name|abs
argument_list|(
name|ev
argument_list|)
argument_list|)
expr_stmt|;
comment|// 到第10行，是截止于100(不包含该边界)
block|}
else|else
block|{
name|setBegin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|v
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|print
argument_list|)
decl_stmt|;
name|setEnd
argument_list|(
name|unitSize
operator|*
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|v
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|filter
parameter_list|(
name|int
name|count
parameter_list|)
block|{
return|return
name|count
operator|>=
name|begin
operator|&&
name|count
operator|<
name|end
return|;
block|}
block|}
specifier|static
class|class
name|LinePrintGate
implements|implements
name|PrintGate
block|{
specifier|private
name|PrintGate
index|[]
name|list
decl_stmt|;
specifier|public
name|void
name|setPrint
parameter_list|(
name|String
name|print
parameter_list|,
name|int
name|unitSize
parameter_list|)
block|{
name|String
index|[]
name|prints
init|=
name|print
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|list
operator|=
operator|new
name|PrintGate
index|[
name|prints
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PrintGateToken
name|pg
init|=
operator|new
name|PrintGateToken
argument_list|()
decl_stmt|;
name|pg
operator|.
name|setPrint
argument_list|(
name|prints
index|[
name|i
index|]
argument_list|,
name|unitSize
argument_list|)
expr_stmt|;
name|list
index|[
name|i
index|]
operator|=
name|pg
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|filter
parameter_list|(
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|list
index|[
name|i
index|]
operator|.
name|filter
argument_list|(
name|count
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|static
class|class
name|StringReaderEx
extends|extends
name|StringReader
block|{
specifier|private
name|int
name|inputLength
decl_stmt|;
specifier|public
name|StringReaderEx
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|inputLength
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

