begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   */
end_comment

begin_class
specifier|public
class|class
name|CollectorStdoutImpl
implements|implements
name|Collector
block|{
specifier|private
specifier|static
name|ThreadLocal
comment|/*<Integer> */
name|tl
init|=
operator|new
name|ThreadLocal
comment|/*<Integer> */
argument_list|()
block|{
specifier|protected
name|Object
comment|/* Integer */
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|collect
parameter_list|(
name|String
name|word
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|last
init|=
operator|(
operator|(
name|Integer
operator|)
name|tl
operator|.
name|get
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Integer
name|c
init|=
operator|new
name|Integer
argument_list|(
name|last
operator|+
literal|1
argument_list|)
decl_stmt|;
name|tl
operator|.
name|set
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
operator|+
literal|":\t["
operator|+
name|begin
operator|+
literal|", "
operator|+
name|end
operator|+
literal|")="
operator|+
name|word
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

