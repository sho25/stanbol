begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|BinaryDictionary
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|HashBinaryDictionary
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|Hit
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|Word
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|DifferenceListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|ExtensionFileFilter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|filewords
operator|.
name|FileWordsReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|exception
operator|.
name|PaodingAnalysisException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * 中文字典缓存根据地,为{@link CJKKnife}所用。<br>  * 从本对象可以获取中文需要的相关字典。包括词汇表、姓氏表、计量单位表、忽略的词或单字等。  *<p>  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @see CJKKnife  *   * @since 1.0  */
end_comment

begin_class
specifier|public
class|class
name|FileDictionaries
implements|implements
name|Dictionaries
block|{
comment|// -------------------------------------------------
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileDictionaries
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// -------------------------------------------------
comment|/** 	 * 词汇表字典 	 */
specifier|protected
name|Dictionary
name|vocabularyDictionary
decl_stmt|;
comment|/** 	 * lantin+cjk的词典 	 */
specifier|protected
name|Dictionary
name|combinatoricsDictionary
decl_stmt|;
comment|/** 	 * 姓氏字典 	 *  	 */
specifier|protected
name|Dictionary
name|confucianFamilyNamesDictionary
decl_stmt|;
comment|/** 	 * 忽略的单字 	 */
specifier|protected
name|Dictionary
name|noiseCharactorsDictionary
decl_stmt|;
comment|/** 	 * 忽略的词语 	 *  	 */
specifier|protected
name|Dictionary
name|noiseWordsDictionary
decl_stmt|;
comment|/** 	 * 计量单位 	 */
specifier|protected
name|Dictionary
name|unitsDictionary
decl_stmt|;
comment|// -------------------------------------------------
specifier|protected
name|Map
comment|/*<String, Set<String>> */
name|allWords
decl_stmt|;
specifier|protected
name|String
name|dicHome
decl_stmt|;
specifier|protected
name|String
name|skipPrefix
decl_stmt|;
specifier|protected
name|String
name|noiseCharactor
decl_stmt|;
specifier|protected
name|String
name|noiseWord
decl_stmt|;
specifier|protected
name|String
name|unit
decl_stmt|;
specifier|protected
name|String
name|confucianFamilyName
decl_stmt|;
specifier|protected
name|String
name|combinatorics
decl_stmt|;
specifier|protected
name|String
name|charsetName
decl_stmt|;
specifier|protected
name|int
name|maxWordLen
decl_stmt|;
comment|// ----------------------
specifier|public
name|FileDictionaries
parameter_list|()
block|{ 	}
specifier|public
name|FileDictionaries
parameter_list|(
name|String
name|dicHome
parameter_list|,
name|String
name|skipPrefix
parameter_list|,
name|String
name|noiseCharactor
parameter_list|,
name|String
name|noiseWord
parameter_list|,
name|String
name|unit
parameter_list|,
name|String
name|confucianFamilyName
parameter_list|,
name|String
name|combinatorics
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|int
name|maxWordLen
parameter_list|)
block|{
name|this
operator|.
name|dicHome
operator|=
name|dicHome
expr_stmt|;
name|this
operator|.
name|skipPrefix
operator|=
name|skipPrefix
expr_stmt|;
name|this
operator|.
name|noiseCharactor
operator|=
name|noiseCharactor
expr_stmt|;
name|this
operator|.
name|noiseWord
operator|=
name|noiseWord
expr_stmt|;
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
name|this
operator|.
name|confucianFamilyName
operator|=
name|confucianFamilyName
expr_stmt|;
name|this
operator|.
name|combinatorics
operator|=
name|combinatorics
expr_stmt|;
name|this
operator|.
name|charsetName
operator|=
name|charsetName
expr_stmt|;
name|this
operator|.
name|maxWordLen
operator|=
name|maxWordLen
expr_stmt|;
block|}
specifier|public
name|String
name|getDicHome
parameter_list|()
block|{
return|return
name|dicHome
return|;
block|}
specifier|public
name|void
name|setDicHome
parameter_list|(
name|String
name|dicHome
parameter_list|)
block|{
name|this
operator|.
name|dicHome
operator|=
name|dicHome
expr_stmt|;
block|}
specifier|public
name|String
name|getSkipPrefix
parameter_list|()
block|{
return|return
name|skipPrefix
return|;
block|}
specifier|public
name|void
name|setSkipPrefix
parameter_list|(
name|String
name|skipPrefix
parameter_list|)
block|{
name|this
operator|.
name|skipPrefix
operator|=
name|skipPrefix
expr_stmt|;
block|}
specifier|public
name|String
name|getNoiseCharactor
parameter_list|()
block|{
return|return
name|noiseCharactor
return|;
block|}
specifier|public
name|void
name|setNoiseCharactor
parameter_list|(
name|String
name|noiseCharactor
parameter_list|)
block|{
name|this
operator|.
name|noiseCharactor
operator|=
name|noiseCharactor
expr_stmt|;
block|}
specifier|public
name|String
name|getNoiseWord
parameter_list|()
block|{
return|return
name|noiseWord
return|;
block|}
specifier|public
name|void
name|setNoiseWord
parameter_list|(
name|String
name|noiseWord
parameter_list|)
block|{
name|this
operator|.
name|noiseWord
operator|=
name|noiseWord
expr_stmt|;
block|}
specifier|public
name|String
name|getUnit
parameter_list|()
block|{
return|return
name|unit
return|;
block|}
specifier|public
name|void
name|setUnit
parameter_list|(
name|String
name|unit
parameter_list|)
block|{
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
block|}
specifier|public
name|String
name|getConfucianFamilyName
parameter_list|()
block|{
return|return
name|confucianFamilyName
return|;
block|}
specifier|public
name|void
name|setConfucianFamilyName
parameter_list|(
name|String
name|confucianFamilyName
parameter_list|)
block|{
name|this
operator|.
name|confucianFamilyName
operator|=
name|confucianFamilyName
expr_stmt|;
block|}
specifier|public
name|String
name|getCharsetName
parameter_list|()
block|{
return|return
name|charsetName
return|;
block|}
specifier|public
name|void
name|setCharsetName
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|this
operator|.
name|charsetName
operator|=
name|charsetName
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxWordLen
parameter_list|()
block|{
return|return
name|maxWordLen
return|;
block|}
specifier|public
name|void
name|setMaxWordLen
parameter_list|(
name|int
name|maxWordLen
parameter_list|)
block|{
name|this
operator|.
name|maxWordLen
operator|=
name|maxWordLen
expr_stmt|;
block|}
specifier|public
name|void
name|setLantinFllowedByCjk
parameter_list|(
name|String
name|lantinFllowedByCjk
parameter_list|)
block|{
name|this
operator|.
name|combinatorics
operator|=
name|lantinFllowedByCjk
expr_stmt|;
block|}
specifier|public
name|String
name|getLantinFllowedByCjk
parameter_list|()
block|{
return|return
name|combinatorics
return|;
block|}
comment|// -------------------------------------------------
comment|/** 	 * 词汇表字典 	 *  	 * @return 	 */
specifier|public
specifier|synchronized
name|Dictionary
name|getVocabularyDictionary
parameter_list|()
block|{
if|if
condition|(
name|vocabularyDictionary
operator|==
literal|null
condition|)
block|{
comment|// 大概有5639个字有词语，故取0x2fff=x^13>8000>8000*0.75=6000>5639
name|vocabularyDictionary
operator|=
operator|new
name|HashBinaryDictionary
argument_list|(
name|getVocabularyWords
argument_list|()
argument_list|,
literal|0x2fff
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
name|Dictionary
name|noiseWordsDic
init|=
name|getNoiseWordsDictionary
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noiseWordsDic
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Hit
name|hit
init|=
name|vocabularyDictionary
operator|.
name|search
argument_list|(
name|noiseWordsDic
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
name|noiseWordsDic
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hit
operator|.
name|isHit
argument_list|()
condition|)
block|{
name|hit
operator|.
name|getWord
argument_list|()
operator|.
name|setNoiseWord
argument_list|()
expr_stmt|;
block|}
block|}
name|Dictionary
name|noiseCharactorsDic
init|=
name|getNoiseCharactorsDictionary
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noiseCharactorsDic
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Hit
name|hit
init|=
name|vocabularyDictionary
operator|.
name|search
argument_list|(
name|noiseCharactorsDic
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
name|noiseCharactorsDic
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hit
operator|.
name|isHit
argument_list|()
condition|)
block|{
name|hit
operator|.
name|getWord
argument_list|()
operator|.
name|setNoiseCharactor
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|vocabularyDictionary
return|;
block|}
comment|/** 	 * 姓氏字典 	 *  	 * @return 	 */
specifier|public
specifier|synchronized
name|Dictionary
name|getConfucianFamilyNamesDictionary
parameter_list|()
block|{
if|if
condition|(
name|confucianFamilyNamesDictionary
operator|==
literal|null
condition|)
block|{
name|confucianFamilyNamesDictionary
operator|=
operator|new
name|BinaryDictionary
argument_list|(
name|getConfucianFamilyNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|confucianFamilyNamesDictionary
return|;
block|}
comment|/** 	 * 忽略的词语 	 *  	 * @return 	 */
specifier|public
specifier|synchronized
name|Dictionary
name|getNoiseCharactorsDictionary
parameter_list|()
block|{
if|if
condition|(
name|noiseCharactorsDictionary
operator|==
literal|null
condition|)
block|{
name|noiseCharactorsDictionary
operator|=
operator|new
name|HashBinaryDictionary
argument_list|(
name|getNoiseCharactors
argument_list|()
argument_list|,
literal|256
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
block|}
return|return
name|noiseCharactorsDictionary
return|;
block|}
comment|/** 	 * 忽略的单字 	 *  	 * @return 	 */
specifier|public
specifier|synchronized
name|Dictionary
name|getNoiseWordsDictionary
parameter_list|()
block|{
if|if
condition|(
name|noiseWordsDictionary
operator|==
literal|null
condition|)
block|{
name|noiseWordsDictionary
operator|=
operator|new
name|BinaryDictionary
argument_list|(
name|getNoiseWords
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|noiseWordsDictionary
return|;
block|}
comment|/** 	 * 计量单位 	 *  	 * @return 	 */
specifier|public
specifier|synchronized
name|Dictionary
name|getUnitsDictionary
parameter_list|()
block|{
if|if
condition|(
name|unitsDictionary
operator|==
literal|null
condition|)
block|{
name|unitsDictionary
operator|=
operator|new
name|HashBinaryDictionary
argument_list|(
name|getUnits
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
block|}
return|return
name|unitsDictionary
return|;
block|}
specifier|public
specifier|synchronized
name|Dictionary
name|getCombinatoricsDictionary
parameter_list|()
block|{
if|if
condition|(
name|combinatoricsDictionary
operator|==
literal|null
condition|)
block|{
name|combinatoricsDictionary
operator|=
operator|new
name|BinaryDictionary
argument_list|(
name|getCombinatoricsWords
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|combinatoricsDictionary
return|;
block|}
specifier|private
name|Detector
name|detector
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|startDetecting
parameter_list|(
name|int
name|interval
parameter_list|,
name|DifferenceListener
name|l
parameter_list|)
block|{
if|if
condition|(
name|detector
operator|!=
literal|null
operator|||
name|interval
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|Detector
name|detector
init|=
operator|new
name|Detector
argument_list|()
decl_stmt|;
name|detector
operator|.
name|setHome
argument_list|(
name|dicHome
argument_list|)
expr_stmt|;
name|detector
operator|.
name|setFilter
argument_list|(
operator|new
name|ExtensionFileFilter
argument_list|(
literal|".dic"
argument_list|)
argument_list|)
expr_stmt|;
name|detector
operator|.
name|setLastSnapshot
argument_list|(
name|detector
operator|.
name|flash
argument_list|()
argument_list|)
expr_stmt|;
name|detector
operator|.
name|setListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|detector
operator|.
name|setInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|detector
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detector
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stopDetecting
parameter_list|()
block|{
if|if
condition|(
name|detector
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|detector
operator|.
name|setStop
argument_list|()
expr_stmt|;
name|detector
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 *  	 * @param dicName 	 */
specifier|protected
specifier|synchronized
name|void
name|refreshDicWords
parameter_list|(
name|String
name|dicPath
parameter_list|)
block|{
name|int
name|index
init|=
name|dicPath
operator|.
name|lastIndexOf
argument_list|(
literal|".dic"
argument_list|)
decl_stmt|;
name|String
name|dicName
init|=
name|dicPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|allWords
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Map
comment|/*<String, Set<String>> */
name|temp
init|=
name|FileWordsReader
operator|.
name|readWords
argument_list|(
name|dicHome
operator|+
name|dicPath
argument_list|,
name|charsetName
argument_list|,
name|maxWordLen
argument_list|)
decl_stmt|;
name|allWords
operator|.
name|put
argument_list|(
name|dicName
argument_list|,
name|temp
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// 如果源文件已经被删除了，则表示该字典不要了
name|allWords
operator|.
name|remove
argument_list|(
name|dicName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|toRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSkipForVacabulary
argument_list|(
name|dicName
argument_list|)
condition|)
block|{
name|this
operator|.
name|vocabularyDictionary
operator|=
literal|null
expr_stmt|;
block|}
comment|// 如果来的是noiseWord
if|if
condition|(
name|isNoiseWordDicFile
argument_list|(
name|dicName
argument_list|)
condition|)
block|{
name|this
operator|.
name|noiseWordsDictionary
operator|=
literal|null
expr_stmt|;
comment|// noiseWord和vocabulary有关，所以需要更新vocabulary
name|this
operator|.
name|vocabularyDictionary
operator|=
literal|null
expr_stmt|;
block|}
comment|// 如果来的是noiseCharactors
elseif|else
if|if
condition|(
name|isNoiseCharactorDicFile
argument_list|(
name|dicName
argument_list|)
condition|)
block|{
name|this
operator|.
name|noiseCharactorsDictionary
operator|=
literal|null
expr_stmt|;
comment|// noiseCharactorsDictionary和vocabulary有关，所以需要更新vocabulary
name|this
operator|.
name|vocabularyDictionary
operator|=
literal|null
expr_stmt|;
block|}
comment|// 如果来的是单元
elseif|else
if|if
condition|(
name|isUnitDicFile
argument_list|(
name|dicName
argument_list|)
condition|)
block|{
name|this
operator|.
name|unitsDictionary
operator|=
literal|null
expr_stmt|;
block|}
comment|// 如果来的是亚洲人人姓氏
elseif|else
if|if
condition|(
name|isConfucianFamilyNameDicFile
argument_list|(
name|dicName
argument_list|)
condition|)
block|{
name|this
operator|.
name|confucianFamilyNamesDictionary
operator|=
literal|null
expr_stmt|;
block|}
comment|// 如果来的是以字母,数字等组合类语言为开头的词汇
elseif|else
if|if
condition|(
name|isLantinFollowedByCjkDicFile
argument_list|(
name|dicName
argument_list|)
condition|)
block|{
name|this
operator|.
name|combinatoricsDictionary
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|// ---------------------------------------------------------------
comment|// 以下为辅助性的方式-类私有或package私有
specifier|protected
name|Word
index|[]
name|getVocabularyWords
parameter_list|()
block|{
name|Map
comment|/*<String, Set<Word>> */
name|dics
init|=
name|loadAllWordsIfNecessary
argument_list|()
decl_stmt|;
name|Set
comment|/*<Word> */
name|set
init|=
literal|null
decl_stmt|;
name|Iterator
comment|/*<Word> */
name|iter
init|=
name|dics
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSkipForVacabulary
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Set
comment|/*<Word> */
name|dic
init|=
operator|(
name|Set
comment|/*<Word> */
operator|)
name|dics
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
comment|/*<Word> */
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|addAll
argument_list|(
name|dic
argument_list|)
expr_stmt|;
block|}
block|}
name|Word
index|[]
name|words
init|=
operator|(
name|Word
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|Word
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|words
argument_list|)
expr_stmt|;
return|return
name|words
return|;
block|}
specifier|protected
name|Word
index|[]
name|getConfucianFamilyNames
parameter_list|()
block|{
return|return
name|getDictionaryWords
argument_list|(
name|confucianFamilyName
argument_list|)
return|;
block|}
specifier|protected
name|Word
index|[]
name|getNoiseWords
parameter_list|()
block|{
return|return
name|getDictionaryWords
argument_list|(
name|noiseWord
argument_list|)
return|;
block|}
specifier|protected
name|Word
index|[]
name|getNoiseCharactors
parameter_list|()
block|{
return|return
name|getDictionaryWords
argument_list|(
name|noiseCharactor
argument_list|)
return|;
block|}
specifier|protected
name|Word
index|[]
name|getUnits
parameter_list|()
block|{
return|return
name|getDictionaryWords
argument_list|(
name|unit
argument_list|)
return|;
block|}
specifier|protected
name|Word
index|[]
name|getCombinatoricsWords
parameter_list|()
block|{
return|return
name|getDictionaryWords
argument_list|(
name|combinatorics
argument_list|)
return|;
block|}
specifier|protected
name|Word
index|[]
name|getDictionaryWords
parameter_list|(
name|String
name|dicNameRelativeDicHome
parameter_list|)
block|{
name|Map
name|dics
decl_stmt|;
try|try
block|{
name|dics
operator|=
name|FileWordsReader
operator|.
name|readWords
argument_list|(
name|dicHome
operator|+
literal|"/"
operator|+
name|dicNameRelativeDicHome
operator|+
literal|".dic"
argument_list|,
name|charsetName
argument_list|,
name|maxWordLen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|toRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Set
comment|/*<Word> */
name|set
init|=
operator|(
name|Set
comment|/*<Word> */
operator|)
name|dics
operator|.
name|get
argument_list|(
name|dicNameRelativeDicHome
argument_list|)
decl_stmt|;
name|Word
index|[]
name|words
init|=
operator|(
name|Word
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|Word
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|words
argument_list|)
expr_stmt|;
return|return
name|words
return|;
block|}
comment|// -------------------------------------
comment|/** 	 * 读取字典安装目录及子孙目录下的字典文件；并以该字典相对安装目录的路径(包括该字典的文件名，但不包括扩展名)作为key。 	 * 比如，如果字典安装在dic目录下，该目录下有division/china.dic，则该字典文件对应的key是"division/china" 	 */
specifier|protected
specifier|synchronized
name|Map
comment|/*<String, Set<String>> */
name|loadAllWordsIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|allWords
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"loading dictionaries from "
operator|+
name|dicHome
argument_list|)
expr_stmt|;
name|allWords
operator|=
name|FileWordsReader
operator|.
name|readWords
argument_list|(
name|dicHome
argument_list|,
name|charsetName
argument_list|,
name|maxWordLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|allWords
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"Not found any dictionary files, have you set the 'paoding.dic.home' right? ("
operator|+
name|this
operator|.
name|dicHome
operator|+
literal|")"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PaodingAnalysisException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"loaded success!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|toRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|allWords
return|;
block|}
comment|// ---------------------------------------
specifier|protected
specifier|final
name|boolean
name|isSkipForVacabulary
parameter_list|(
name|String
name|dicNameRelativeDicHome
parameter_list|)
block|{
return|return
name|dicNameRelativeDicHome
operator|.
name|startsWith
argument_list|(
name|skipPrefix
argument_list|)
operator|||
name|dicNameRelativeDicHome
operator|.
name|indexOf
argument_list|(
literal|"/"
operator|+
name|skipPrefix
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
specifier|protected
name|boolean
name|isUnitDicFile
parameter_list|(
name|String
name|dicName
parameter_list|)
block|{
return|return
name|dicName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|unit
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isNoiseCharactorDicFile
parameter_list|(
name|String
name|dicName
parameter_list|)
block|{
return|return
name|dicName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|noiseCharactor
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isNoiseWordDicFile
parameter_list|(
name|String
name|dicName
parameter_list|)
block|{
return|return
name|dicName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|noiseWord
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isConfucianFamilyNameDicFile
parameter_list|(
name|String
name|dicName
parameter_list|)
block|{
return|return
name|dicName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|confucianFamilyName
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isLantinFollowedByCjkDicFile
parameter_list|(
name|String
name|dicName
parameter_list|)
block|{
return|return
name|dicName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|combinatorics
argument_list|)
return|;
block|}
comment|// --------------------------------------
specifier|protected
name|RuntimeException
name|toRuntimeException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|new
name|PaodingAnalysisException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

