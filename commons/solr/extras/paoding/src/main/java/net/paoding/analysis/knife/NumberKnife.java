begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|Hit
import|;
end_import

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   */
end_comment

begin_class
specifier|public
class|class
name|NumberKnife
extends|extends
name|CombinatoricsKnife
implements|implements
name|DictionariesWare
block|{
specifier|private
name|Dictionary
name|units
decl_stmt|;
specifier|public
name|NumberKnife
parameter_list|()
block|{ 	}
specifier|public
name|NumberKnife
parameter_list|(
name|Dictionaries
name|dictionaries
parameter_list|)
block|{
name|setDictionaries
argument_list|(
name|dictionaries
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDictionaries
parameter_list|(
name|Dictionaries
name|dictionaries
parameter_list|)
block|{
name|super
operator|.
name|setDictionaries
argument_list|(
name|dictionaries
argument_list|)
expr_stmt|;
name|units
operator|=
name|dictionaries
operator|.
name|getUnitsDictionary
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|assignable
parameter_list|(
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|char
name|ch
init|=
name|beef
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|CharSet
operator|.
name|isArabianNumber
argument_list|(
name|ch
argument_list|)
condition|)
return|return
name|ASSIGNED
return|;
if|if
condition|(
name|index
operator|>
name|offset
condition|)
block|{
if|if
condition|(
name|CharSet
operator|.
name|isLantingLetter
argument_list|(
name|ch
argument_list|)
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|ch
operator|==
literal|'_'
condition|)
block|{
if|if
condition|(
name|ch
operator|==
literal|'-'
operator|||
name|ch
operator|==
literal|'_'
operator|||
name|CharSet
operator|.
name|isLantingLetter
argument_list|(
name|ch
argument_list|)
operator|||
operator|!
name|CharSet
operator|.
name|isArabianNumber
argument_list|(
name|beef
operator|.
name|charAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|//分词效果
comment|//123.456		->123.456/
comment|//123.abc.34	->123/123.abc.34/abc/34/	["abc"、"abc/34"系由LetterKnife分出，非NumberKnife]
comment|//没有或判断!CharSet.isArabianNumber(beef.charAt(index + 1))，则分出"123."，而非"123"
comment|//123.abc.34	->123./123.abc.34/abc/34/
return|return
name|POINT
return|;
block|}
return|return
name|ASSIGNED
return|;
block|}
block|}
return|return
name|LIMIT
return|;
block|}
specifier|protected
name|int
name|collectLimit
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|Beef
name|beef
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|point
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
name|dicWordVote
parameter_list|)
block|{
comment|// "123abc"的直接调用super的
if|if
condition|(
name|point
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|super
operator|.
name|collectLimit
argument_list|(
name|collector
argument_list|,
name|beef
argument_list|,
name|offset
argument_list|,
name|point
argument_list|,
name|limit
argument_list|,
name|dicWordVote
argument_list|)
return|;
block|}
comment|//
comment|// 2.2两
comment|//    ^=_point
comment|//
specifier|final
name|int
name|_point
init|=
name|limit
decl_stmt|;
comment|// 当前尝试判断的字符的位置
name|int
name|curTail
init|=
name|offset
decl_stmt|;
comment|/* 		 * Fix issue 56: 中文数字解析问题后续 		 */
name|BigInteger
name|number1
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|BigInteger
name|number2
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|bitValue
init|=
literal|0
decl_stmt|;
name|int
name|maxUnit
init|=
literal|0
decl_stmt|;
comment|//TODO:这里又重复从curTail(其值为offset)判断，重新遍历判断是否为数字，算是一个重复计算
comment|//但考虑这个计算对中文分词性能影响微乎其微暂时先不优化
for|for
control|(
init|;
operator|(
name|bitValue
operator|=
name|CharSet
operator|.
name|toNumber
argument_list|(
name|beef
operator|.
name|charAt
argument_list|(
name|curTail
argument_list|)
argument_list|)
operator|)
operator|>=
literal|0
condition|;
name|curTail
operator|++
control|)
block|{
comment|//
if|if
condition|(
name|bitValue
operator|==
literal|2
operator|&&
operator|(
name|beef
operator|.
name|charAt
argument_list|(
name|curTail
argument_list|)
operator|==
literal|'两'
operator|||
name|beef
operator|.
name|charAt
argument_list|(
name|curTail
argument_list|)
operator|==
literal|'俩'
operator|||
name|beef
operator|.
name|charAt
argument_list|(
name|curTail
argument_list|)
operator|==
literal|'倆'
operator|)
condition|)
block|{
if|if
condition|(
name|curTail
operator|!=
name|offset
condition|)
block|{
break|break;
block|}
block|}
comment|// 处理连续汉字个位值的数字："三四五六"	->"3456"
if|if
condition|(
name|bitValue
operator|>=
literal|0
operator|&&
name|bitValue
operator|<
literal|10
condition|)
block|{
if|if
condition|(
name|number2
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
name|number2
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|bitValue
argument_list|)
expr_stmt|;
else|else
block|{
name|number2
operator|=
name|number2
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|number2
operator|=
name|number2
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|bitValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|number2
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|number1
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
block|{
name|number1
operator|=
name|BigInteger
operator|.
name|ONE
expr_stmt|;
block|}
name|number1
operator|=
name|number1
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|bitValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|number1
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
block|{
name|number1
operator|=
name|BigInteger
operator|.
name|ZERO
expr_stmt|;
block|}
if|if
condition|(
name|bitValue
operator|>=
name|maxUnit
condition|)
block|{
name|number1
operator|=
name|number1
operator|.
name|add
argument_list|(
name|number2
argument_list|)
expr_stmt|;
name|number1
operator|=
name|number1
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|bitValue
argument_list|)
argument_list|)
expr_stmt|;
name|maxUnit
operator|=
name|bitValue
expr_stmt|;
block|}
else|else
block|{
name|number1
operator|=
name|number1
operator|.
name|add
argument_list|(
name|number2
operator|.
name|multiply
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|bitValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|number2
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|number2
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|number1
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|<
literal|0
condition|)
block|{
name|number1
operator|=
name|number2
expr_stmt|;
block|}
else|else
block|{
name|number1
operator|=
name|number1
operator|.
name|add
argument_list|(
name|number2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|number1
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|>=
literal|0
operator|&&
name|curTail
operator|>
name|_point
condition|)
block|{
name|doCollect
argument_list|(
name|collector
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|number1
argument_list|)
argument_list|,
name|beef
argument_list|,
name|offset
argument_list|,
name|curTail
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|collectLimit
argument_list|(
name|collector
argument_list|,
name|beef
argument_list|,
name|offset
argument_list|,
name|point
argument_list|,
name|limit
argument_list|,
name|dicWordVote
argument_list|)
expr_stmt|;
block|}
name|curTail
operator|=
name|curTail
operator|>
name|limit
condition|?
name|curTail
else|:
name|limit
expr_stmt|;
comment|//
comment|// 后面可能跟了计量单位
if|if
condition|(
name|units
operator|!=
literal|null
operator|&&
name|CharSet
operator|.
name|isCjkUnifiedIdeographs
argument_list|(
name|beef
operator|.
name|charAt
argument_list|(
name|curTail
argument_list|)
argument_list|)
condition|)
block|{
name|Hit
name|wd
init|=
literal|null
decl_stmt|;
name|Hit
name|wd2
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
name|curTail
operator|+
literal|1
decl_stmt|;
comment|/* 			 * Fix issue 48: 查找计量单位引起的高亮越界错误 			 */
while|while
condition|(
name|i
operator|<=
name|limit
operator|&&
operator|(
name|wd
operator|=
name|units
operator|.
name|search
argument_list|(
name|beef
argument_list|,
name|curTail
argument_list|,
name|i
operator|-
name|curTail
argument_list|)
operator|)
operator|.
name|isHit
argument_list|()
condition|)
block|{
name|wd2
operator|=
name|wd
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|wd
operator|.
name|isUnclosed
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|i
operator|--
expr_stmt|;
if|if
condition|(
name|wd2
operator|!=
literal|null
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|wd2
operator|.
name|getWord
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
name|curTail
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
comment|//
return|return
name|curTail
operator|>
name|limit
condition|?
name|curTail
else|:
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

