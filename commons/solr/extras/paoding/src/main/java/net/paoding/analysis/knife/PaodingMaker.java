begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|impl
operator|.
name|MostWordsModeDictionariesCompiler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|impl
operator|.
name|SortingDictionariesCompiler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|Difference
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
operator|.
name|support
operator|.
name|detection
operator|.
name|DifferenceListener
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|exception
operator|.
name|PaodingAnalysisException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NativeFSLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @since 2.0.0  */
end_comment

begin_class
specifier|public
class|class
name|PaodingMaker
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PROPERTIES_PATH
init|=
literal|"classpath:paoding-analysis.properties"
decl_stmt|;
specifier|private
name|PaodingMaker
parameter_list|()
block|{ 	}
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PaodingMaker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ObjectHolder
comment|/*<Properties> */
name|propertiesHolder
init|=
operator|new
name|ObjectHolder
comment|/*<Properties> */
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ObjectHolder
comment|/*<Paoding> */
name|paodingHolder
init|=
operator|new
name|ObjectHolder
comment|/*<Paoding> */
argument_list|()
decl_stmt|;
comment|// ----------------获取Paoding对象的方法-----------------------
comment|/** 	 *  	 * 读取类路径下的paoding-analysis.properties文件，据之获取一个Paoding对象． 	 *<p> 	 * 第一次调用本方法时，从该属性文件中读取配置，并创建一个新的Paoding对象，之后，如果 	 * 属性文件没有变更过，则每次调用本方法都将返回先前创建的Paoding对象。而不重新构建 Paoding对象。 	 *<p> 	 *  	 * 如果配置文件没有变更，但词典文件有变更。仍然是返回同样的Paoding对象。而且是，只要 	 * 词典文件发生了变更，Paoding对象在一定时间内会收到更新的。所以返回的Paoding对象 一定是最新配置的。 	 *  	 *  	 *  	 * @return 	 */
specifier|public
specifier|static
name|Paoding
name|make
parameter_list|()
block|{
return|return
name|make
argument_list|(
name|DEFAULT_PROPERTIES_PATH
argument_list|)
return|;
block|}
comment|/** 	 * 读取类指定路径的配置文件(如果配置文件放置在类路径下，则应该加"classpath:"为前缀)，据之获取一个新的Paoding对象． 	 *<p> 	 *  	 * 第一次调用本方法时，从该属性文件中读取配置，并创建一个新的Paoding对象，之后，如果 	 * 属性文件没有变更过，则每次调用本方法都将返回先前创建的Paoding对象。而不重新构建 Paoding对象。 	 *<p> 	 *  	 * 如果配置文件没有变更，但词典文件有变更。仍然是返回同样的Paoding对象。而且是，只要 	 * 词典文件发生了变更，Paoding对象在一定时间内会收到更新的。所以返回的Paoding对象 一定是最新配置的。 	 *  	 * @param propertiesPath 	 * @return 	 */
specifier|public
specifier|static
name|Paoding
name|make
parameter_list|(
name|String
name|propertiesPath
parameter_list|)
block|{
return|return
name|make
argument_list|(
name|getProperties
argument_list|(
name|propertiesPath
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * 根据给定的属性对象获取一个Paoding对象． 	 *<p> 	 *  	 * @param properties 	 * @return 	 */
specifier|public
specifier|static
name|Paoding
name|make
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|postPropertiesLoaded
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|implMake
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|// --------------------------------------------------
specifier|public
specifier|static
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|getProperties
argument_list|(
name|DEFAULT_PROPERTIES_PATH
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Properties
name|getProperties
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"path should not be null!"
argument_list|)
throw|;
block|}
try|try
block|{
comment|//
name|Properties
name|p
init|=
operator|(
name|Properties
operator|)
name|propertiesHolder
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|modified
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|p
operator|=
name|loadProperties
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|propertiesHolder
operator|.
name|set
argument_list|(
name|path
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|paodingHolder
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|postPropertiesLoaded
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|absolutePaths
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.properties.files.absolutepaths"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"config paoding analysis from: "
operator|+
name|absolutePaths
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PaodingAnalysisException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// -------------------私有 或 辅助方法----------------------------------
specifier|private
specifier|static
name|boolean
name|modified
parameter_list|(
name|Properties
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|lastModifieds
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.properties.lastModifieds"
argument_list|)
decl_stmt|;
name|String
index|[]
name|lastModifedsArray
init|=
name|lastModifieds
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|String
name|files
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.properties.files"
argument_list|)
decl_stmt|;
name|String
index|[]
name|filesArray
init|=
name|files
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filesArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|filesArray
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|String
operator|.
name|valueOf
argument_list|(
name|getFileLastModified
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|lastModifedsArray
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|Properties
name|loadProperties
parameter_list|(
name|Properties
name|p
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
decl_stmt|;
name|File
name|file
decl_stmt|;
name|String
name|absolutePath
decl_stmt|;
name|InputStream
name|in
decl_stmt|;
comment|// 若ifexists为真表示如果该文件存在则读取他的内容，不存在则忽略它
name|boolean
name|skipWhenNotExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"ifexists:"
argument_list|)
condition|)
block|{
name|skipWhenNotExists
operator|=
literal|true
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"ifexists:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
name|getClassLoaderResource
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|skipWhenNotExists
condition|)
block|{
return|return
name|p
return|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Not found "
operator|+
name|path
operator|+
literal|" in classpath."
argument_list|)
throw|;
block|}
comment|/* 			 * Fix issue 42 : 读取配置文件的一个Bug 			 */
name|file
operator|=
operator|new
name|File
argument_list|(
name|getUrlPath
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"dic-home:"
argument_list|)
condition|)
block|{
name|File
name|dicHome
init|=
operator|new
name|File
argument_list|(
name|getDicHome
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"dic-home:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|dicHome
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skipWhenNotExists
operator|&&
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|p
return|;
block|}
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|absolutePath
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|p
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|lastModifieds
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.properties.lastModifieds"
argument_list|)
decl_stmt|;
name|String
name|files
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.properties.files"
argument_list|)
decl_stmt|;
name|String
name|absolutePaths
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.properties.files.absolutepaths"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastModifieds
operator|==
literal|null
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.dic.properties.path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|lastModifieds
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|getFileLastModified
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|=
name|path
expr_stmt|;
name|absolutePaths
operator|=
name|absolutePath
expr_stmt|;
block|}
else|else
block|{
name|lastModifieds
operator|=
name|lastModifieds
operator|+
literal|";"
operator|+
name|getFileLastModified
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|files
operator|=
name|files
operator|+
literal|";"
operator|+
name|path
expr_stmt|;
name|absolutePaths
operator|=
name|absolutePaths
operator|+
literal|";"
operator|+
name|absolutePath
expr_stmt|;
block|}
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.analysis.properties.lastModifieds"
argument_list|,
name|lastModifieds
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.analysis.properties.files"
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.analysis.properties.files.absolutepaths"
argument_list|,
name|absolutePaths
argument_list|)
expr_stmt|;
name|String
name|importsValue
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.imports"
argument_list|)
decl_stmt|;
if|if
condition|(
name|importsValue
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|remove
argument_list|(
literal|"paoding.imports"
argument_list|)
expr_stmt|;
name|String
index|[]
name|imports
init|=
name|importsValue
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|loadProperties
argument_list|(
name|p
argument_list|,
name|imports
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
specifier|private
specifier|static
name|long
name|getFileLastModified
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|file
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|jarIndex
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|".jar!"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jarIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|file
operator|.
name|lastModified
argument_list|()
return|;
block|}
else|else
block|{
name|path
operator|=
name|path
operator|.
name|replaceAll
argument_list|(
literal|"%20"
argument_list|,
literal|" "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|jarIndex
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|".jar!"
argument_list|)
expr_stmt|;
name|int
name|protocalIndex
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|jarPath
init|=
name|path
operator|.
name|substring
argument_list|(
name|protocalIndex
operator|+
literal|":"
operator|.
name|length
argument_list|()
argument_list|,
name|jarIndex
operator|+
literal|".jar"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|jarPathFile
init|=
operator|new
name|File
argument_list|(
name|jarPath
argument_list|)
decl_stmt|;
name|JarFile
name|jarFile
decl_stmt|;
try|try
block|{
name|jarFile
operator|=
operator|new
name|JarFile
argument_list|(
name|jarPathFile
argument_list|)
expr_stmt|;
name|String
name|entryPath
init|=
name|path
operator|.
name|substring
argument_list|(
name|jarIndex
operator|+
literal|".jar!/"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|JarEntry
name|entry
init|=
name|jarFile
operator|.
name|getJarEntry
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
return|return
name|entry
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error in handler path="
operator|+
name|path
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error in handler jarPath="
operator|+
name|jarPath
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getDicHome
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|setDicHomeProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.dic.home.absolute.path"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|postPropertiesLoaded
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
if|if
condition|(
literal|"done"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.analysis.postPropertiesLoaded"
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|setDicHomeProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.analysis.postPropertiesLoaded"
argument_list|,
literal|"done"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setDicHomeProperties
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|String
name|dicHomeAbsultePath
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.dic.home.absolute.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dicHomeAbsultePath
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// 获取词典安装目录配置：
comment|// 如配置了PAODING_DIC_HOME环境变量，则将其作为字典的安装主目录
comment|// 否则使用属性文件的paoding.dic.home配置
comment|// 但是如果属性文件中强制配置paoding.dic.home.config-first=this，
comment|// 则优先考虑属性文件的paoding.dic.home配置，
comment|// 此时只有当属性文件没有配置paoding.dic.home时才会采用环境变量的配置
name|String
name|dicHomeBySystemEnv
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dicHomeBySystemEnv
operator|=
name|getSystemEnv
argument_list|(
name|Constants
operator|.
name|ENV_PAODING_DIC_HOME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"System.getenv() is not supported in JDK1.4. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dicHomeBySystemEnv
operator|==
literal|null
condition|)
block|{
name|dicHomeBySystemEnv
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|ENV_PAODING_DIC_HOME
argument_list|)
expr_stmt|;
block|}
name|String
name|dicHome
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|dicHomeBySystemEnv
operator|!=
literal|null
condition|)
block|{
name|String
name|first
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_HOME_CONFIG_FIRST
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
operator|&&
name|first
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"this"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dicHome
operator|==
literal|null
condition|)
block|{
name|dicHome
operator|=
name|dicHomeBySystemEnv
expr_stmt|;
block|}
block|}
else|else
block|{
name|dicHome
operator|=
name|dicHomeBySystemEnv
expr_stmt|;
block|}
block|}
comment|// 如果环境变量和属性文件都没有配置词典安转目录
comment|// 则尝试在当前目录和类路径下寻找是否有dic目录，
comment|// 若有，则采纳他为paoding.dic.home
comment|// 如果尝试后均失败，则抛出PaodingAnalysisException异常
if|if
condition|(
name|dicHome
operator|==
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"dic"
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dicHome
operator|=
literal|"dic/"
expr_stmt|;
block|}
else|else
block|{
name|URL
name|url
init|=
name|PaodingMaker
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"dic"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|dicHome
operator|=
literal|"classpath:dic/"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dicHome
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PaodingAnalysisException
argument_list|(
literal|"please set a system env PAODING_DIC_HOME or Config paoding.dic.home in paoding-dic-home.properties point to the dictionaries!"
argument_list|)
throw|;
block|}
comment|// 规范化dicHome，并设置到属性文件对象中
name|dicHome
operator|=
name|dicHome
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dicHome
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dicHome
operator|=
name|dicHome
operator|+
literal|"/"
expr_stmt|;
block|}
name|p
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|DIC_HOME
argument_list|,
name|dicHome
argument_list|)
expr_stmt|;
comment|// writer to the properites
comment|// object
comment|// 将dicHome转化为一个系统唯一的绝对路径，记录在属性对象中
name|File
name|dicHomeFile
init|=
name|getFile
argument_list|(
name|dicHome
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dicHomeFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PaodingAnalysisException
argument_list|(
literal|"not found the dic home dirctory! "
operator|+
name|dicHomeFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dicHomeFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PaodingAnalysisException
argument_list|(
literal|"dic home should not be a file, but a directory!"
argument_list|)
throw|;
block|}
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.dic.home.absolute.path"
argument_list|,
name|dicHomeFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Paoding
name|implMake
parameter_list|(
specifier|final
name|Properties
name|p
parameter_list|)
block|{
comment|// 将要返回的Paoding对象，它可能是新创建的，也可能使用paodingHolder中已有的Paoding对象
name|Paoding
name|paoding
decl_stmt|;
comment|// 作为本次返回的Paoding对象在paodingHolder中的key，使之后同样的key不会重复创建Paoding对象
specifier|final
name|Object
name|paodingKey
decl_stmt|;
comment|// 如果该属性对象是通过PaodingMaker由文件读入的，则必然存在paoding.dic.properties.path属性
comment|// 详细请参考loadProperties方法)
name|String
name|path
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.dic.properties.path"
argument_list|)
decl_stmt|;
comment|// 如果该属性由文件读入，则文件地址作为Paoding对象在paodingHolder中的key
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|paodingKey
operator|=
name|path
expr_stmt|;
comment|// 否则以属性文件作为其key，之后只要进来的是同一个属性对象，都返回同一个Paoding对象
block|}
else|else
block|{
name|paodingKey
operator|=
name|p
expr_stmt|;
block|}
name|paoding
operator|=
operator|(
name|Paoding
operator|)
name|paodingHolder
operator|.
name|get
argument_list|(
name|paodingKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|paoding
operator|!=
literal|null
condition|)
block|{
return|return
name|paoding
return|;
block|}
try|try
block|{
name|paoding
operator|=
name|createPaodingWithKnives
argument_list|(
name|p
argument_list|)
expr_stmt|;
specifier|final
name|Paoding
name|finalPaoding
init|=
name|paoding
decl_stmt|;
comment|//
name|String
name|compilerClassName
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|ANALYZER_DICTIONARIES_COMPILER
argument_list|)
decl_stmt|;
name|Class
name|compilerClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|compilerClassName
operator|!=
literal|null
condition|)
block|{
name|compilerClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|compilerClassName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compilerClass
operator|==
literal|null
condition|)
block|{
name|String
name|analyzerMode
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|ANALYZER_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"most-words"
operator|.
name|equalsIgnoreCase
argument_list|(
name|analyzerMode
argument_list|)
operator|||
literal|"default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|analyzerMode
argument_list|)
condition|)
block|{
name|compilerClass
operator|=
name|MostWordsModeDictionariesCompiler
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|compilerClass
operator|=
name|SortingDictionariesCompiler
operator|.
name|class
expr_stmt|;
block|}
block|}
specifier|final
name|DictionariesCompiler
name|compiler
init|=
operator|(
name|DictionariesCompiler
operator|)
name|compilerClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
operator|new
name|Function
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|LOCK_FILE
init|=
literal|"write.lock"
decl_stmt|;
name|String
name|dicHome
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"paoding.dic.home.absolute.path"
argument_list|)
decl_stmt|;
name|FSLockFactory
name|FileLockFactory
init|=
operator|new
name|NativeFSLockFactory
argument_list|(
name|dicHome
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|FileLockFactory
operator|.
name|makeLock
argument_list|(
name|LOCK_FILE
argument_list|)
decl_stmt|;
name|boolean
name|obtained
init|=
literal|false
decl_stmt|;
try|try
block|{
name|obtained
operator|=
name|lock
operator|.
name|obtain
argument_list|(
literal|90000
argument_list|)
expr_stmt|;
if|if
condition|(
name|obtained
condition|)
block|{
comment|// 编译词典-对词典进行可能的处理，以符合分词器的要求
if|if
condition|(
name|compiler
operator|.
name|shouldCompile
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|Dictionaries
name|dictionaries
init|=
name|readUnCompiledDictionaries
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Paoding
name|tempPaoding
init|=
name|createPaodingWithKnives
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|setDictionaries
argument_list|(
name|tempPaoding
argument_list|,
name|dictionaries
argument_list|)
expr_stmt|;
name|compiler
operator|.
name|compile
argument_list|(
name|dictionaries
argument_list|,
name|tempPaoding
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
comment|// 使用编译后的词典
specifier|final
name|Dictionaries
name|dictionaries
init|=
name|compiler
operator|.
name|readCompliedDictionaries
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|setDictionaries
argument_list|(
name|finalPaoding
argument_list|,
name|dictionaries
argument_list|)
expr_stmt|;
comment|// 启动字典动态转载/卸载检测器
comment|// 侦测时间间隔(秒)。默认为60秒。如果设置为０或负数则表示不需要进行检测
name|String
name|intervalStr
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_DETECTOR_INTERVAL
argument_list|)
decl_stmt|;
name|int
name|interval
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|intervalStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
name|dictionaries
operator|.
name|startDetecting
argument_list|(
name|interval
argument_list|,
operator|new
name|DifferenceListener
argument_list|()
block|{
specifier|public
name|void
name|on
parameter_list|(
name|Difference
name|diff
parameter_list|)
throws|throws
name|Exception
block|{
name|dictionaries
operator|.
name|stopDetecting
argument_list|()
expr_stmt|;
comment|// 此处调用run方法，以当检测到**编译后**的词典变更/删除/增加时，
comment|// 重新编译源词典、重新创建并启动dictionaries自检测
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Obtain "
operator|+
name|LOCK_FILE
operator|+
literal|" in "
operator|+
name|dicHome
operator|+
literal|" failed:"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Obtain "
operator|+
name|LOCK_FILE
operator|+
literal|" in "
operator|+
name|dicHome
operator|+
literal|" failed:"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|obtained
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{  							}
block|}
block|}
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Paoding对象创建成功！此时可以将它寄放到paodingHolder中，给下次重复利用
name|paodingHolder
operator|.
name|set
argument_list|(
name|paodingKey
argument_list|,
name|paoding
argument_list|)
expr_stmt|;
return|return
name|paoding
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PaodingAnalysisException
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Paoding
name|createPaodingWithKnives
parameter_list|(
name|Properties
name|p
parameter_list|)
throws|throws
name|Exception
block|{
comment|// 如果PaodingHolder中并没有缓存该属性文件或对象对应的Paoding对象，
comment|// 则根据给定的属性创建一个新的Paoding对象，并在返回之前存入paodingHolder
name|Paoding
name|paoding
init|=
operator|new
name|Paoding
argument_list|()
decl_stmt|;
comment|// 寻找传说中的Knife。。。。
specifier|final
name|Map
comment|/*<String, Knife> */
name|knifeMap
init|=
operator|new
name|HashMap
comment|/* 																 *<String, 																 * Knife> 																 */
argument_list|()
decl_stmt|;
specifier|final
name|List
comment|/*<Knife> */
name|knifeList
init|=
operator|new
name|LinkedList
comment|/*<Knife> */
argument_list|()
decl_stmt|;
specifier|final
name|List
comment|/*<Function> */
name|functions
init|=
operator|new
name|LinkedList
comment|/*<Function> */
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
name|p
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|value
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|key
operator|.
name|indexOf
argument_list|(
name|Constants
operator|.
name|KNIFE_CLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
operator|&&
name|key
operator|.
name|length
argument_list|()
operator|>
name|Constants
operator|.
name|KNIFE_CLASS
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|int
name|end
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|Constants
operator|.
name|KNIFE_CLASS
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Knife
name|knife
init|=
operator|(
name|Knife
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|knifeList
operator|.
name|add
argument_list|(
name|knife
argument_list|)
expr_stmt|;
name|knifeMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|knife
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"add knike: "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 由于属性对象属于hash表，key的读取顺序不和文件的顺序一致，不能保证属性设置时，knife对象已经创建
comment|// 所以这里只定义函数放到functions中，待到所有的knife都创建之后，在执行该程序
name|functions
operator|.
name|add
argument_list|(
operator|new
name|Function
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|knifeName
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|knifeMap
operator|.
name|get
argument_list|(
name|knifeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.springframework.beans.BeanWrapperImpl"
argument_list|)
condition|)
block|{
name|Class
name|beanWrapperImplClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.springframework.beans.BeanWrapperImpl"
argument_list|)
decl_stmt|;
name|Method
name|setWrappedInstance
init|=
name|beanWrapperImplClass
operator|.
name|getMethod
argument_list|(
literal|"setWrappedInstance"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Object
name|beanWrapperImpl
init|=
name|beanWrapperImplClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|setWrappedInstance
operator|.
name|invoke
argument_list|(
name|beanWrapperImpl
argument_list|,
operator|new
name|Object
index|[]
block|{
name|obj
block|}
argument_list|)
expr_stmt|;
name|knifeMap
operator|.
name|put
argument_list|(
name|knifeName
argument_list|,
name|beanWrapperImpl
argument_list|)
expr_stmt|;
name|obj
operator|=
name|beanWrapperImpl
expr_stmt|;
block|}
name|String
name|propertyName
init|=
name|key
operator|.
name|substring
argument_list|(
name|end
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Method
name|setPropertyValue
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setPropertyValue"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|setPropertyValue
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propertyName
block|,
name|value
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// 完成所有留后执行的程序
for|for
control|(
name|Iterator
name|iterator
init|=
name|functions
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Function
name|function
init|=
operator|(
name|Function
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|function
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|// 把刀交给庖丁
name|paoding
operator|.
name|setKnives
argument_list|(
name|knifeList
argument_list|)
expr_stmt|;
return|return
name|paoding
return|;
block|}
specifier|private
specifier|static
name|Dictionaries
name|readUnCompiledDictionaries
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|String
name|skipPrefix
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_SKIP_PREFIX
argument_list|)
decl_stmt|;
name|String
name|noiseCharactor
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_NOISE_CHARACTOR
argument_list|)
decl_stmt|;
name|String
name|noiseWord
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_NOISE_WORD
argument_list|)
decl_stmt|;
name|String
name|unit
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_UNIT
argument_list|)
decl_stmt|;
name|String
name|confucianFamilyName
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_CONFUCIAN_FAMILY_NAME
argument_list|)
decl_stmt|;
name|String
name|combinatorics
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_FOR_COMBINATORICS
argument_list|)
decl_stmt|;
name|String
name|charsetName
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_CHARSET
argument_list|)
decl_stmt|;
name|int
name|maxWordLen
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|getProperty
argument_list|(
name|p
argument_list|,
name|Constants
operator|.
name|DIC_MAXWORDLEN
argument_list|)
argument_list|)
decl_stmt|;
name|Dictionaries
name|dictionaries
init|=
operator|new
name|FileDictionaries
argument_list|(
name|getDicHome
argument_list|(
name|p
argument_list|)
argument_list|,
name|skipPrefix
argument_list|,
name|noiseCharactor
argument_list|,
name|noiseWord
argument_list|,
name|unit
argument_list|,
name|confucianFamilyName
argument_list|,
name|combinatorics
argument_list|,
name|charsetName
argument_list|,
name|maxWordLen
argument_list|)
decl_stmt|;
return|return
name|dictionaries
return|;
block|}
specifier|private
specifier|static
name|void
name|setDictionaries
parameter_list|(
name|Paoding
name|paoding
parameter_list|,
name|Dictionaries
name|dictionaries
parameter_list|)
block|{
name|Knife
index|[]
name|knives
init|=
name|paoding
operator|.
name|getKnives
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|knives
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Knife
name|knife
init|=
operator|(
name|Knife
operator|)
name|knives
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|knife
operator|instanceof
name|DictionariesWare
condition|)
block|{
operator|(
operator|(
name|DictionariesWare
operator|)
name|knife
operator|)
operator|.
name|setDictionaries
argument_list|(
name|dictionaries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getUrlPath
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|urlPath
init|=
literal|null
decl_stmt|;
try|try
block|{
name|urlPath
operator|=
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{			 		}
if|if
condition|(
name|urlPath
operator|==
literal|null
condition|)
block|{
name|urlPath
operator|=
name|url
operator|.
name|getFile
argument_list|()
expr_stmt|;
block|}
return|return
name|urlPath
return|;
block|}
specifier|private
specifier|static
name|File
name|getFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|file
decl_stmt|;
name|URL
name|url
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|=
name|getClassLoaderResource
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|/* 			 * Fix issue 42 : 读取配置文件的一个Bug 			 */
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|getUrlPath
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|fileExist
init|=
name|url
operator|!=
literal|null
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4009013298629147887L
decl_stmt|;
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|fileExist
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
specifier|private
specifier|static
name|URL
name|getClassLoaderResource
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|resource
init|=
name|loader
operator|!=
literal|null
condition|?
name|loader
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|PaodingMaker
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
specifier|private
specifier|static
name|String
name|getProperty
parameter_list|(
name|Properties
name|p
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|Constants
operator|.
name|getProperty
argument_list|(
name|p
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|// --------------------------------------------------------------------
specifier|private
specifier|static
class|class
name|ObjectHolder
comment|/*<T> */
block|{
specifier|private
name|ObjectHolder
parameter_list|()
block|{ 		}
specifier|private
name|Map
comment|/*<Object, T> */
name|objects
init|=
operator|new
name|HashMap
comment|/*<Object, T> */
argument_list|()
decl_stmt|;
specifier|public
name|Object
comment|/* T */
name|get
parameter_list|(
name|Object
name|name
parameter_list|)
block|{
return|return
name|objects
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Object
name|name
parameter_list|,
name|Object
comment|/* T */
name|object
parameter_list|)
block|{
name|objects
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|name
parameter_list|)
block|{
name|objects
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
interface|interface
name|Function
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
specifier|static
name|String
name|getSystemEnv
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|System
operator|.
name|getenv
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Error
name|error
parameter_list|)
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|cmd
decl_stmt|;
if|if
condition|(
name|osName
operator|.
name|indexOf
argument_list|(
literal|"win"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cmd
operator|=
literal|"cmd /c SET"
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
literal|"/usr/bin/printenv"
expr_stmt|;
block|}
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|line
operator|.
name|startsWith
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|name
operator|+
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|line
operator|.
name|substring
argument_list|(
name|index
operator|+
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unable to read env from os．"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

