begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|analyzer
operator|.
name|TokenCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|MaxWordLengthTokenCollector
implements|implements
name|TokenCollector
block|{
comment|/** 	 * 存储当前被knife分解而成的Token对象 	 *  	 */
specifier|private
name|LinkedList
comment|/*<Token> */
name|tokens
init|=
operator|new
name|LinkedList
comment|/*<Token> */
argument_list|()
decl_stmt|;
specifier|private
name|Token
name|candidate
decl_stmt|;
specifier|private
name|Token
name|last
decl_stmt|;
specifier|public
name|Iterator
comment|/*<Token> */
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|tokens
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
name|candidate
operator|=
literal|null
expr_stmt|;
block|}
name|Iterator
comment|/*<Token> */
name|iter
init|=
name|this
operator|.
name|tokens
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|this
operator|.
name|tokens
operator|=
operator|new
name|LinkedList
comment|/*<Token> */
argument_list|()
expr_stmt|;
return|return
name|iter
return|;
block|}
specifier|public
name|void
name|collect
parameter_list|(
name|String
name|word
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Token
name|c
init|=
name|candidate
operator|!=
literal|null
condition|?
name|candidate
else|:
name|last
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|candidate
operator|=
operator|new
name|Token
argument_list|(
name|word
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|==
name|c
operator|.
name|startOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|end
operator|>
name|c
operator|.
name|endOffset
argument_list|()
condition|)
block|{
name|candidate
operator|=
operator|new
name|Token
argument_list|(
name|word
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|offset
operator|>
name|c
operator|.
name|startOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|select
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|>
name|c
operator|.
name|endOffset
argument_list|()
condition|)
block|{
name|candidate
operator|=
operator|new
name|Token
argument_list|(
name|word
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|candidate
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|end
operator|>=
name|c
operator|.
name|endOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|startOffset
argument_list|()
operator|>=
name|offset
operator|&&
name|last
operator|.
name|endOffset
argument_list|()
operator|<=
name|end
condition|)
block|{
for|for
control|(
name|Iterator
comment|/*<Token> */
name|iter
init|=
name|tokens
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|last
operator|=
operator|(
name|Token
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|last
operator|.
name|startOffset
argument_list|()
operator|>=
name|offset
operator|&&
name|last
operator|.
name|endOffset
argument_list|()
operator|<=
name|end
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|last
operator|=
literal|null
expr_stmt|;
name|candidate
operator|=
operator|new
name|Token
argument_list|(
name|word
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|select
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
name|this
operator|.
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|last
operator|=
name|t
expr_stmt|;
block|}
block|}
end_class

end_unit

