begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|dictionary
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Dictionary的散列+二叉查找实现。  *<p>  * 用于对大数量的，且头字符相同的字符串较多的情况，e.g汉字词语字典。在这种情况下，检索速度将比二叉字典更快。  *<p>  *   * HashBinaryDictionary以一组已经排序的词语为输入，所有<b>头字符</b>相同的词语划为一个集合作为分字典(使用BinaryDictionary实现)。  * 查找词语时，先根据第一个字符找得分词典(BinaryDictionary实现)，再从该分词典中定位该词语。  *<p>  *   * @author Zhiliang Wang [qieqie.wang@gmail.com]  *   * @see BinaryDictionary  *   * @since 1.0  *   */
end_comment

begin_class
specifier|public
class|class
name|HashBinaryDictionary
implements|implements
name|Dictionary
block|{
comment|// -------------------------------------------------
comment|/** 	 * 字典中所有词语，用于方便{@link #get(int)}方法 	 */
specifier|private
name|Word
index|[]
name|ascWords
decl_stmt|;
comment|/** 	 * 首字符到分词典的映射 	 */
specifier|private
name|Map
comment|/*<Object, SubDictionaryWrap> */
name|subs
decl_stmt|;
comment|/** 	 *  	 */
specifier|private
specifier|final
name|int
name|hashIndex
decl_stmt|;
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
comment|// -------------------------------------------------
comment|/** 	 *  	 * @param ascWords 	 *            升序排列词语 	 * @param initialCapacity 	 * @param loadFactor 	 */
specifier|public
name|HashBinaryDictionary
parameter_list|(
name|Word
index|[]
name|ascWords
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|this
argument_list|(
name|ascWords
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|ascWords
operator|.
name|length
argument_list|,
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashBinaryDictionary
parameter_list|(
name|Word
index|[]
name|ascWords
parameter_list|,
name|int
name|hashIndex
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|float
name|loadFactor
parameter_list|)
block|{
name|this
operator|.
name|ascWords
operator|=
name|ascWords
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|end
operator|-
name|start
expr_stmt|;
name|this
operator|.
name|hashIndex
operator|=
name|hashIndex
expr_stmt|;
name|subs
operator|=
operator|new
name|HashMap
comment|/*<Object, SubDictionaryWrap> */
argument_list|(
name|initialCapacity
argument_list|,
name|loadFactor
argument_list|)
expr_stmt|;
name|createSubDictionaries
argument_list|()
expr_stmt|;
block|}
comment|// -------------------------------------------------
comment|/** 	 * 创建分词典映射，为构造函数调用 	 */
specifier|protected
name|void
name|createSubDictionaries
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|start
operator|>=
name|ascWords
operator|.
name|length
condition|)
block|{
return|return;
block|}
comment|// 定位相同头字符词语的开头和结束位置以确认分字典
name|int
name|beginIndex
init|=
name|this
operator|.
name|start
decl_stmt|;
name|int
name|endIndex
init|=
name|this
operator|.
name|start
operator|+
literal|1
decl_stmt|;
name|char
name|beginHashChar
init|=
name|getChar
argument_list|(
name|ascWords
index|[
name|start
index|]
argument_list|,
name|hashIndex
argument_list|)
decl_stmt|;
name|char
name|endHashChar
decl_stmt|;
for|for
control|(
init|;
name|endIndex
operator|<
name|this
operator|.
name|end
condition|;
name|endIndex
operator|++
control|)
block|{
name|endHashChar
operator|=
name|getChar
argument_list|(
name|ascWords
index|[
name|endIndex
index|]
argument_list|,
name|hashIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|endHashChar
operator|!=
name|beginHashChar
condition|)
block|{
name|addSubDictionary
argument_list|(
name|beginHashChar
argument_list|,
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
name|beginIndex
operator|=
name|endIndex
expr_stmt|;
name|beginHashChar
operator|=
name|endHashChar
expr_stmt|;
block|}
block|}
name|addSubDictionary
argument_list|(
name|beginHashChar
argument_list|,
name|beginIndex
argument_list|,
name|this
operator|.
name|end
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|char
name|getChar
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
operator|(
name|char
operator|)
literal|0
return|;
block|}
return|return
name|s
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/** 	 * 将位置在beginIndex和endIndex之间(不包括endIndex)的词语作为一个分词典 	 *  	 * @param hashChar 	 * @param beginIndex 	 * @param endIndex 	 */
specifier|protected
name|void
name|addSubDictionary
parameter_list|(
name|char
name|hashChar
parameter_list|,
name|int
name|beginIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
name|Dictionary
name|subDic
init|=
name|createSubDictionary
argument_list|(
name|ascWords
argument_list|,
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|SubDictionaryWrap
name|subDicWrap
init|=
operator|new
name|SubDictionaryWrap
argument_list|(
name|hashChar
argument_list|,
name|subDic
argument_list|,
name|beginIndex
argument_list|)
decl_stmt|;
name|subs
operator|.
name|put
argument_list|(
name|keyOf
argument_list|(
name|hashChar
argument_list|)
argument_list|,
name|subDicWrap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Dictionary
name|createSubDictionary
parameter_list|(
name|Word
index|[]
name|ascWords
parameter_list|,
name|int
name|beginIndex
parameter_list|,
name|int
name|endIndex
parameter_list|)
block|{
name|int
name|count
init|=
name|endIndex
operator|-
name|beginIndex
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|16
condition|)
block|{
return|return
operator|new
name|BinaryDictionary
argument_list|(
name|ascWords
argument_list|,
name|beginIndex
argument_list|,
name|endIndex
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|HashBinaryDictionary
argument_list|(
name|ascWords
argument_list|,
name|hashIndex
operator|+
literal|1
argument_list|,
name|beginIndex
argument_list|,
name|endIndex
argument_list|,
name|getCapacity
argument_list|(
name|count
argument_list|)
argument_list|,
literal|0.75f
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|int
index|[]
name|capacityCandiate
init|=
block|{
literal|16
block|,
literal|32
block|,
literal|64
block|,
literal|128
block|,
literal|256
block|,
literal|512
block|,
literal|1024
block|,
literal|2048
block|,
literal|4096
block|,
literal|10192
block|}
decl_stmt|;
specifier|protected
name|int
name|getCapacity
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|int
name|capacity
init|=
operator|-
literal|1
decl_stmt|;
name|count
operator|<<=
literal|2
expr_stmt|;
name|count
operator|/=
literal|3
expr_stmt|;
name|count
operator|+=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacityCandiate
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|<=
name|capacityCandiate
index|[
name|i
index|]
condition|)
block|{
name|capacity
operator|=
name|capacityCandiate
index|[
name|i
index|]
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|capacity
operator|<
literal|0
condition|)
block|{
name|capacity
operator|=
name|capacityCandiate
index|[
name|capacityCandiate
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
return|return
name|capacity
return|;
block|}
comment|// -------------------------------------------------
specifier|public
name|Word
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|ascWords
index|[
name|start
operator|+
name|index
index|]
return|;
block|}
specifier|public
name|Hit
name|search
parameter_list|(
name|CharSequence
name|input
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|SubDictionaryWrap
name|subDic
init|=
operator|(
name|SubDictionaryWrap
operator|)
name|subs
operator|.
name|get
argument_list|(
name|keyOf
argument_list|(
name|input
operator|.
name|charAt
argument_list|(
name|hashIndex
operator|+
name|begin
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subDic
operator|==
literal|null
condition|)
block|{
return|return
name|Hit
operator|.
name|UNDEFINED
return|;
block|}
name|Dictionary
name|dic
init|=
name|subDic
operator|.
name|dic
decl_stmt|;
comment|// 对count==hashIndex + 1的处理
if|if
condition|(
name|count
operator|==
name|hashIndex
operator|+
literal|1
condition|)
block|{
name|Word
name|header
init|=
name|dic
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|length
argument_list|()
operator|==
name|hashIndex
operator|+
literal|1
condition|)
block|{
if|if
condition|(
name|subDic
operator|.
name|wordIndexOffset
operator|+
literal|1
operator|<
name|this
operator|.
name|ascWords
operator|.
name|length
condition|)
block|{
return|return
operator|new
name|Hit
argument_list|(
name|subDic
operator|.
name|wordIndexOffset
argument_list|,
name|header
argument_list|,
name|this
operator|.
name|ascWords
index|[
name|subDic
operator|.
name|wordIndexOffset
operator|+
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Hit
argument_list|(
name|subDic
operator|.
name|wordIndexOffset
argument_list|,
name|header
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|Hit
argument_list|(
name|Hit
operator|.
name|UNCLOSED_INDEX
argument_list|,
literal|null
argument_list|,
name|header
argument_list|)
return|;
block|}
block|}
comment|// count> hashIndex + 1
name|Hit
name|word
init|=
name|dic
operator|.
name|search
argument_list|(
name|input
argument_list|,
name|begin
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|isHit
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|subDic
operator|.
name|wordIndexOffset
operator|+
name|word
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|word
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|word
operator|.
name|getNext
argument_list|()
operator|==
literal|null
operator|&&
name|index
operator|<
name|size
argument_list|()
condition|)
block|{
name|word
operator|.
name|setNext
argument_list|(
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|word
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|// -------------------------------------------------
comment|/** 	 * 字符的在{@link #subs}的key值。 	 *  	 * @param theChar 	 * @return 	 *  	 * @see #subs 	 */
specifier|protected
name|Object
name|keyOf
parameter_list|(
name|char
name|theChar
parameter_list|)
block|{
comment|// return theChar - 0x4E00;// '一'==0x4E00
return|return
operator|new
name|Integer
argument_list|(
name|theChar
argument_list|)
return|;
block|}
comment|/** 	 * 分词典封箱 	 */
specifier|static
class|class
name|SubDictionaryWrap
block|{
comment|/** 		 * 分词典词组的头字符 		 */
name|char
name|hashChar
decl_stmt|;
comment|/** 		 * 分词典 		 */
name|Dictionary
name|dic
decl_stmt|;
comment|/** 		 * 分词典第一个词语在所有词语中的偏移位置 		 */
name|int
name|wordIndexOffset
decl_stmt|;
specifier|public
name|SubDictionaryWrap
parameter_list|(
name|char
name|hashChar
parameter_list|,
name|Dictionary
name|dic
parameter_list|,
name|int
name|wordIndexOffset
parameter_list|)
block|{
name|this
operator|.
name|hashChar
operator|=
name|hashChar
expr_stmt|;
name|this
operator|.
name|dic
operator|=
name|dic
expr_stmt|;
name|this
operator|.
name|wordIndexOffset
operator|=
name|wordIndexOffset
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

