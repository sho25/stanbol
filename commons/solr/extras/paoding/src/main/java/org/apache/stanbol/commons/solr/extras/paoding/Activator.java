begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|extras
operator|.
name|paoding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|paoding
operator|.
name|analysis
operator|.
name|knife
operator|.
name|PaodingMaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This BundleActivator copies the paoding dictionary to the persistent storage  * of the bundle ( {@link BundleContext#getDataFile(String)} with argument "dict").  * This is necessary because this library can not read the dictionary from within   * a jar file.<p>  *   * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DICT_ARCHIVE
init|=
literal|"paoding-dict.zip"
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|paodingDict
init|=
name|ctx
operator|.
name|getDataFile
argument_list|(
literal|"dict"
argument_list|)
decl_stmt|;
if|if
condition|(
name|paodingDict
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Paoding dictionary root exists but is a File"
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"   ... try to delete"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paodingDict
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to initialise paoding dictionary because "
operator|+
name|paodingDict
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists, is a file and can not be deleted!"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|paodingDict
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"initialise paoding dictionary in {}"
argument_list|,
name|paodingDict
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|Activator
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|DICT_ARCHIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to load paoding dictionary data from bundle "
operator|+
literal|"using name "
operator|+
name|DICT_ARCHIVE
argument_list|)
throw|;
block|}
name|initPaodingDictionary
argument_list|(
name|paodingDict
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|initPaodingDictHomeProperty
argument_list|(
name|paodingDict
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies the dictionary from the parsed {@link InputStream} to the      * parsed directory      * @param paodingDict      * @throws IOException      */
specifier|public
specifier|static
name|void
name|initPaodingDictionary
parameter_list|(
name|File
name|paodingDict
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed InputStream MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|paodingDict
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed poading dictionary MUST NOT be NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|paodingDict
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed paoding dictionary MUST NOT be a File"
argument_list|)
throw|;
block|}
name|ZipArchiveInputStream
name|zin
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ZipArchiveEntry
name|entry
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|entry
operator|=
name|zin
operator|.
name|getNextZipEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|paodingDict
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|//copy the entry
name|log
operator|.
name|debug
argument_list|(
literal|"> copy {}"
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|zin
argument_list|,
name|FileUtils
operator|.
name|openOutputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"< {} already present"
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"  ... paoding dictionaly initialised"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to initialise paoding dictionary in "
operator|+
name|paodingDict
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|paodingDict
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|paodingDict
operator|.
name|delete
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to delete incomplete paoding dictionary "
operator|+
name|paodingDict
operator|+
literal|"! Please delete this directory manually before "
operator|+
literal|" the next start of this Bundle!"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * @param paodingDict      */
specifier|public
specifier|static
name|void
name|initPaodingDictHomeProperty
parameter_list|(
name|File
name|paodingDict
parameter_list|)
block|{
comment|//set the Dictionary home to the PaodingMaker. This is somewhat a workaround as
comment|//setting the home directory is only supported via
comment|// a) an properties file loaded via the classpath (can not be used)
comment|// b) an System environment variable (Systen#getenv(..) NOT System#getProperty(..)!)
name|ClassLoader
name|ccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|Activator
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|p
init|=
name|PaodingMaker
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|DIC_HOME
argument_list|,
name|paodingDict
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//actually in the already initialised properties file the dictionary home is read
comment|//from the following key
name|p
operator|.
name|setProperty
argument_list|(
literal|"paoding.dic.home.absolute.path"
argument_list|,
name|paodingDict
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|ccl
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

