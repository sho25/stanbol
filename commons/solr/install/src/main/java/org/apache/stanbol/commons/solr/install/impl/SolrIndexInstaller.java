begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|install
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|PROPERTY_ARCHIVE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|install
operator|.
name|IndexInstallerConstants
operator|.
name|SOLR_INDEX_ARCHIVE_RESOURCE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedIndexConstants
operator|.
name|INDEX_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|ConfigUtils
operator|.
name|SOLR_INDEX_ARCHIVE_EXTENSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|utils
operator|.
name|ConfigUtils
operator|.
name|SUPPORTED_SOLR_ARCHIVE_FORMAT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|InstallableResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|InstallTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|InstallTaskFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|RegisteredResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|ResourceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|ResourceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TaskResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TaskResourceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|installer
operator|.
name|api
operator|.
name|tasks
operator|.
name|TransformationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|install
operator|.
name|IndexInstallerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|managed
operator|.
name|ManagedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The main class implementing the two core interfaces of the Apache Sling Installer framework.  *<p>  * The {@link ResourceTransformer} is needed to check if installed files actually SolrIndexes. Currently this  * check is done by checking if<code>'.'+{@link IndexInstallerConstants#SOLR_INDEX_ARCHIVE_EXTENSION}</code>  * is contained in the filename. In addition it is checked of the archive type is hinted by the Filename. If  * not than ".zip" (works also for ".jar") is assumed. Note also that for ".gz" and ".bz2" it is assumed that  * ".tar" is used. File names such as "&lt;indexName&gt;.  * {@value IndexInstallerConstants#SOLR_INDEX_ARCHIVE_EXTENSION} [.&lt;archiveType&gt;]" are used by this  * implementation  *<p>  * The {@link InstallTaskFactory} interface is needed to create the actual install and remove task for  * transformed resources. Based on the requested activity instances of {@link IndexInstallTask} or  * {@link IndexRemoveTask} are created.  *<p>  * This implementation uses a {@link Constants#SERVICE_RANKING} of 100. This ensures that the this  * implementation is called before any {@link ResourceTransformer} directly part of the Apache Sling Installer  * framework. If {@link #transform(RegisteredResource)} returns<code>null</code> the Sling Installer  * framework will call the next registered {@link ResourceTransformer} instance. By returning a  * {@link TransformationResult} no further {@link ResourceTransformer} will be called.  *<p>  *<b>NOTE</b>(related to STANBOL-10  * @author Rupert Westenthaler  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|100
argument_list|)
comment|// we need to be in front of the Sling Components
specifier|public
class|class
name|SolrIndexInstaller
implements|implements
name|InstallTaskFactory
implements|,
name|ResourceTransformer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrIndexInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|private
name|ServiceTracker
name|serverTracker
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedSolrServer
argument_list|>
name|activeServers
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
name|BundleContext
name|bc
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|bc
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|serverTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|bc
argument_list|,
name|ManagedSolrServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
comment|/**                  * The servers managed by this instance                  */
specifier|private
name|SortedMap
argument_list|<
name|ServiceReference
argument_list|,
name|ManagedSolrServer
argument_list|>
name|servers
init|=
operator|new
name|TreeMap
argument_list|<
name|ServiceReference
argument_list|,
name|ManagedSolrServer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|servers
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|updateRegistration
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|servers
operator|.
name|put
argument_list|(
name|reference
argument_list|,
operator|(
name|ManagedSolrServer
operator|)
name|service
argument_list|)
expr_stmt|;
name|updateRegistration
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|ManagedSolrServer
name|server
init|=
operator|(
name|ManagedSolrServer
operator|)
name|bc
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|servers
operator|.
name|put
argument_list|(
name|reference
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|updateRegistration
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|server
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|serverTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|serverTracker
operator|!=
literal|null
condition|)
block|{
name|serverTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|bc
operator|=
literal|null
expr_stmt|;
name|serverTracker
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Basically adds/removes the {@link ServiceRegistration} when the first/last      * {@link ManagedSolrServer} becomes available / is deactivated.<p>      * Registers this as {@link InstallTaskFactory} and {@link ResourceTransformer}      */
specifier|private
name|void
name|updateRegistration
parameter_list|(
name|SortedMap
argument_list|<
name|ServiceReference
argument_list|,
name|ManagedSolrServer
argument_list|>
name|servers
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ... updateRegistration for SolrIndexInstaller (bc: {}, server: {}, registration {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|bc
block|,
name|servers
block|,
name|registration
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|bc
operator|==
literal|null
operator|||
name|servers
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|registration
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... unregistered InstallTaskFactory and ResourceTransformer for SolrCores on ManagedSolrServers"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bc
operator|!=
literal|null
operator|&&
name|registration
operator|==
literal|null
operator|&&
operator|!
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|registration
operator|=
name|bc
operator|.
name|registerService
argument_list|(
operator|new
name|String
index|[]
block|{
name|InstallTaskFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ResourceTransformer
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... registered InstallTaskFactory and ResourceTransformer for SolrCores on ManagedSolrServers"
argument_list|)
expr_stmt|;
block|}
name|activeServers
operator|=
name|createActiveServersMap
argument_list|(
name|servers
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... set activeServers to {}"
argument_list|,
name|activeServers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assumed to be called while a writeLock is active on {@link #lock}      * @return      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedSolrServer
argument_list|>
name|createActiveServersMap
parameter_list|(
name|SortedMap
argument_list|<
name|ServiceReference
argument_list|,
name|ManagedSolrServer
argument_list|>
name|servers
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ManagedSolrServer
argument_list|>
name|map
decl_stmt|;
if|if
condition|(
name|servers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ManagedSolrServer
argument_list|>
argument_list|()
expr_stmt|;
comment|//this is a sorted iteration over the ManagedSolrServers
name|boolean
name|first
init|=
literal|true
decl_stmt|;
comment|//so the first will be the default server
for|for
control|(
name|ManagedSolrServer
name|server
range|:
name|servers
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|server
operator|.
name|getServerName
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
comment|//put the default server under null
name|map
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|public
name|InstallTask
name|createTask
parameter_list|(
name|TaskResourceGroup
name|taskResourceGroup
parameter_list|)
block|{
name|TaskResource
name|toActivate
init|=
name|taskResourceGroup
operator|.
name|getActiveResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|SOLR_INDEX_ARCHIVE_RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|toActivate
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|toActivate
operator|.
name|getState
argument_list|()
operator|==
name|ResourceState
operator|.
name|UNINSTALL
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ... create IndexRemoveTask with servers {}"
argument_list|,
name|activeServers
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexRemoveTask
argument_list|(
name|taskResourceGroup
argument_list|,
name|activeServers
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" ... create IndexInstallTask with servers {}"
argument_list|,
name|activeServers
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexInstallTask
argument_list|(
name|taskResourceGroup
argument_list|,
name|activeServers
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TransformationResult
index|[]
name|transform
parameter_list|(
name|RegisteredResource
name|registeredResource
parameter_list|)
block|{
if|if
condition|(
name|InstallableResource
operator|.
name|TYPE_FILE
operator|.
name|equals
argument_list|(
name|registeredResource
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|checkIndex
argument_list|(
name|registeredResource
argument_list|)
return|;
block|}
else|else
block|{
comment|// this processes only files
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Checks if the installed resource is an Solr Index Archive      *       * @param registeredResource      *            the registered resource parsed by the Apache Sling installer framework      * @return the transformed resource or<code>null</code> if the parsed resource is not an Solr Index      *         Archive.      */
specifier|private
name|TransformationResult
index|[]
name|checkIndex
parameter_list|(
name|RegisteredResource
name|registeredResource
parameter_list|)
block|{
comment|// the URL is<schema>:<filePath>
comment|// where the schema is the provider that registered the resource
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|filePath
init|=
name|registeredResource
operator|.
name|getURL
argument_list|()
operator|.
name|substring
argument_list|(
name|registeredResource
operator|.
name|getURL
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// get the name of the index
name|String
name|indexName
init|=
name|FilenameUtils
operator|.
name|getBaseName
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
comment|// only the String until the first '.' -> multiple endings (e.g. slrindex.zip) expected
name|indexName
operator|=
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>
literal|0
condition|?
name|indexName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
else|:
name|indexName
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|INDEX_NAME
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
comment|// now convert to lover case to ease the tests for file endings
name|filePath
operator|=
name|filePath
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|filePath
operator|.
name|contains
argument_list|(
literal|'.'
operator|+
name|SOLR_INDEX_ARCHIVE_EXTENSION
argument_list|)
condition|)
block|{
comment|// not an solr index archive
return|return
literal|null
return|;
comment|// -> can not transform
block|}
name|String
name|extension
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|String
name|archiveFormat
init|=
name|SUPPORTED_SOLR_ARCHIVE_FORMAT
operator|.
name|get
argument_list|(
name|extension
argument_list|)
decl_stmt|;
if|if
condition|(
name|archiveFormat
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to process Solr Index Archive from RDFTerm "
operator|+
name|registeredResource
operator|.
name|getURL
argument_list|()
operator|+
literal|"because of unsupported archive format \""
operator|+
name|extension
operator|+
literal|"\" (supported are "
operator|+
name|SUPPORTED_SOLR_ARCHIVE_FORMAT
operator|.
name|keySet
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|PROPERTY_ARCHIVE_FORMAT
argument_list|,
name|archiveFormat
argument_list|)
expr_stmt|;
block|}
name|TransformationResult
name|tr
init|=
operator|new
name|TransformationResult
argument_list|()
decl_stmt|;
comment|// try {
comment|// tr.setInputStream(registeredResource.getInputStream());
comment|// } catch (IOException e) {
comment|// log.error(String.format("Unable to transform RegisteredResource %s with type %s and scheme %s",
comment|// registeredResource.getURL(), registeredResource.getType(), registeredResource.getScheme()),e);
comment|// return null;
comment|// }
name|tr
operator|.
name|setId
argument_list|(
name|indexName
operator|+
literal|'.'
operator|+
name|SOLR_INDEX_ARCHIVE_EXTENSION
operator|+
literal|'.'
operator|+
name|archiveFormat
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setAttributes
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|tr
operator|.
name|setResourceType
argument_list|(
name|SOLR_INDEX_ARCHIVE_RESOURCE_TYPE
argument_list|)
expr_stmt|;
return|return
operator|new
name|TransformationResult
index|[]
block|{
name|tr
block|}
return|;
block|}
block|}
end_class

end_unit

