begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|httpqueryheaders
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|httpqueryheaders
operator|.
name|Constants
operator|.
name|HEARDER_PREFIX
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|httpqueryheaders
operator|.
name|OverwriteableHeaderHttpServletRequest
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"pattern"
argument_list|,
name|value
operator|=
literal|".*"
argument_list|)
specifier|public
class|class
name|QueryHeadersFilter
implements|implements
name|Filter
block|{
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|httpRequest
decl_stmt|;
try|try
block|{
name|httpRequest
operator|=
operator|(
name|HttpServletRequest
operator|)
name|request
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// no Http request -> ignore
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
name|OverwriteableHeaderHttpServletRequest
name|wrapped
init|=
literal|null
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|paramNames
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|paramNames
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|paramNames
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
operator|&&
name|param
operator|.
name|startsWith
argument_list|(
name|HEARDER_PREFIX
argument_list|)
operator|&&
name|param
operator|.
name|length
argument_list|()
operator|>
name|HEARDER_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|1
condition|)
block|{
name|String
name|header
init|=
name|param
operator|.
name|substring
argument_list|(
name|HEARDER_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|wrapped
operator|==
literal|null
condition|)
block|{
comment|//lazzy initialisation
name|wrapped
operator|=
operator|new
name|OverwriteableHeaderHttpServletRequest
argument_list|(
name|httpRequest
argument_list|)
expr_stmt|;
block|}
name|wrapped
operator|.
name|setHeader
argument_list|(
name|header
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|wrapped
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|wrapped
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// Get properties parsed to the Filter
comment|//filterConfig
block|}
block|}
end_class

end_unit

