begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|httpqueryheaders
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Wrapps an {@link HttpServletRequest} and allows to override headers  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
class|class
name|OverwriteableHeaderHttpServletRequest
extends|extends
name|HttpServletRequestWrapper
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OverwriteableHeaderHttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|overriddenHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|OverwriteableHeaderHttpServletRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|setHeader
parameter_list|(
name|String
name|header
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|getHeaders
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|oldValues
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|oldValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|oldValues
operator|.
name|add
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|oldValues
operator|=
literal|null
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|headerValues
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|headerValues
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|headerValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|headerValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|values
index|[
literal|0
index|]
operator|!=
literal|null
operator|&&
operator|!
name|values
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|headerValues
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//no value found
name|headerValues
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|headerValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldValues
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Remove Header {} (was '{}')"
argument_list|,
name|header
argument_list|,
name|oldValues
argument_list|)
expr_stmt|;
name|overriddenHeaders
operator|.
name|put
argument_list|(
name|header
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//else header not there -> nothing todo
block|}
else|else
block|{
if|if
condition|(
name|oldValues
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Add Header {}={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|header
block|,
name|headerValues
block|,
name|oldValues
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} Header {}={} (was '{}')"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|header
block|,
name|headerValues
block|,
name|oldValues
block|}
argument_list|)
expr_stmt|;
block|}
name|overriddenHeaders
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|headerValues
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValues
return|;
block|}
specifier|public
name|boolean
name|isHeaderOverridden
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|overriddenHeaders
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isHeaderOverridden
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|overriddenHeaders
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
comment|//not overridden
return|return
name|super
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
name|getHeaders
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isHeaderOverridden
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|overriddenHeaders
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|values
operator|==
literal|null
condition|?
literal|null
else|:
name|Collections
operator|.
name|enumeration
argument_list|(
name|values
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getHeaders
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
name|getHeaderNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|super
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|overriddenHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|names
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|names
argument_list|)
return|;
block|}
block|}
end_class

end_unit

