begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|usermanagement
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|CacheControl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|platform
operator|.
name|config
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|LockableMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|DC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|FOAF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PERMISSION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PLATFORM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|SIOC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|GraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|MGraphUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|MGraphUtils
operator|.
name|NoSuchSubGraphException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|PasswordUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|usermanagement
operator|.
name|Ontology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|RdfViewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handles HTTP requests related to a user  *  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
block|{
name|Object
operator|.
name|class
block|,
name|UserResource
operator|.
name|class
block|}
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"user-management"
argument_list|)
specifier|public
class|class
name|UserResource
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserResource
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|target
operator|=
name|SystemConfig
operator|.
name|SYSTEM_GRAPH_FILTER
argument_list|)
specifier|private
name|LockableMGraph
name|systemGraph
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Parser
name|parser
decl_stmt|;
specifier|private
specifier|static
name|GraphNode
name|dummyNode
decl_stmt|;
static|static
block|{
name|dummyNode
operator|=
operator|new
name|GraphNode
argument_list|(
operator|new
name|BNode
argument_list|()
argument_list|,
operator|new
name|SimpleMGraph
argument_list|()
argument_list|)
expr_stmt|;
name|dummyNode
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|FOAF
operator|.
name|Agent
argument_list|)
expr_stmt|;
block|}
comment|// **********************************
comment|// ****** SHOW USER DETAILS *********
comment|// **********************************
comment|//
comment|// ****** RESTful/RDF *******************
comment|//
comment|/**      * RESTful access to individual user data      *      * [has integration test] currently has a kludge to return an empty graph if      * user not found should return a 404      *      * @param userName      * @return context graph for user      * @throws UnsupportedEncodingException      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"users/{username}"
argument_list|)
specifier|public
name|TripleCollection
name|getUserContext
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|GraphNode
name|userNode
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNode
operator|==
literal|null
condition|)
block|{
comment|// a kludge
return|return
operator|new
name|SimpleMGraph
argument_list|()
return|;
block|}
return|return
name|userNode
operator|.
name|getNodeContext
argument_list|()
return|;
block|}
comment|//
comment|// ****** HTML *******************
comment|//
comment|/**      * lookup a user by name.      *      * @param userName      * @return      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"view-user"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|viewUser
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"userName"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"edit"
argument_list|,
name|getUser
argument_list|(
name|userName
argument_list|)
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * lookup a user by name presenting it with "editUser" as rendering      * instruction.      *      * @param userName      * @return      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"users/edit/{username}"
argument_list|)
specifier|public
name|RdfViewable
name|editUser
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"editUser"
argument_list|,
name|getUser
argument_list|(
name|userName
argument_list|)
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * RESTful access to user roles (and nested permissions right now - may      * change) [has integration test]      *      * @param userName      * @return role graph for user      * @throws UnsupportedEncodingException      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"roles/{username}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
specifier|public
name|TripleCollection
name|getUserRoles
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|MGraph
name|rolesGraph
init|=
name|getUserRolesGraph
argument_list|(
name|userName
argument_list|)
decl_stmt|;
comment|// case of no roles not handled - what best to return : empty graph or
comment|// 404?
return|return
name|rolesGraph
return|;
block|}
comment|/**      * Update user details adds triples as appropriate to system graph      *      * @param uriInfo      * @param currentLogin      * @param newLogin      * @param fullName      * @param email      * @param password      * @param roles      * @param permissions      * @return      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"store-user"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
name|Response
name|storeUser
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"currentLogin"
argument_list|)
name|String
name|currentLogin
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"newLogin"
argument_list|)
name|String
name|newLogin
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"fullName"
argument_list|)
name|String
name|fullName
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"email"
argument_list|)
name|String
name|email
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"password"
argument_list|)
name|String
name|password
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"roles"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"permissions"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|permissions
parameter_list|)
block|{
name|GraphNode
name|userNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentLogin
operator|!=
literal|null
condition|)
block|{
comment|//
name|currentLogin
operator|=
name|currentLogin
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentLogin
operator|!=
literal|null
operator|&&
operator|!
name|currentLogin
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|userNode
operator|=
name|getUser
argument_list|(
name|currentLogin
argument_list|)
expr_stmt|;
if|if
condition|(
name|userNode
operator|!=
literal|null
condition|)
block|{
return|return
name|store
argument_list|(
name|userNode
argument_list|,
name|uriInfo
argument_list|,
name|currentLogin
argument_list|,
name|newLogin
argument_list|,
name|fullName
argument_list|,
name|email
argument_list|,
name|password
argument_list|,
name|roles
argument_list|,
name|permissions
argument_list|)
return|;
block|}
block|}
name|userNode
operator|=
name|createUser
argument_list|(
name|newLogin
argument_list|)
expr_stmt|;
return|return
name|store
argument_list|(
name|userNode
argument_list|,
name|uriInfo
argument_list|,
name|newLogin
argument_list|,
name|newLogin
argument_list|,
name|fullName
argument_list|,
name|email
argument_list|,
name|password
argument_list|,
name|roles
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**      * Modify user given a graph describing the change.      *      * @param inputGraph change graph      * @return HTTP response      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"change-user"
argument_list|)
specifier|public
name|Response
name|changeUser
parameter_list|(
name|Graph
name|inputGraph
parameter_list|)
block|{
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|changes
init|=
name|inputGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Ontology
operator|.
name|Change
argument_list|)
decl_stmt|;
name|Triple
name|oldTriple
init|=
literal|null
decl_stmt|;
name|Triple
name|newTriple
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|changes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|changeTriple
init|=
name|changes
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|changeNode
init|=
name|changeTriple
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Literal
name|userName
init|=
operator|(
name|Literal
operator|)
name|inputGraph
operator|.
name|filter
argument_list|(
name|changeNode
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
literal|null
argument_list|)
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|userTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
name|userName
argument_list|)
decl_stmt|;
comment|//     if (userTriples.hasNext()) {
name|NonLiteral
name|userNode
init|=
operator|(
name|NonLiteral
operator|)
name|userTriples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|UriRef
name|predicateUriRef
init|=
operator|(
name|UriRef
operator|)
name|inputGraph
operator|.
name|filter
argument_list|(
name|changeNode
argument_list|,
name|Ontology
operator|.
name|predicate
argument_list|,
literal|null
argument_list|)
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// handle old value (if it exists)
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iterator
init|=
name|inputGraph
operator|.
name|filter
argument_list|(
name|changeNode
argument_list|,
name|Ontology
operator|.
name|oldValue
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Resource
name|oldValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldValue
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
comment|// Triple oldTriple = systemGraph.filter(null, predicateUriRef,
comment|// oldValue).next();
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|oldTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|userNode
argument_list|,
name|predicateUriRef
argument_list|,
name|oldValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldTriple
operator|=
name|oldTriples
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|Resource
name|newValue
init|=
name|inputGraph
operator|.
name|filter
argument_list|(
name|changeNode
argument_list|,
name|Ontology
operator|.
name|newValue
argument_list|,
literal|null
argument_list|)
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|newTriple
operator|=
operator|new
name|TripleImpl
argument_list|(
name|userNode
argument_list|,
name|predicateUriRef
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
comment|// }
block|}
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldTriple
operator|!=
literal|null
condition|)
block|{
name|systemGraph
operator|.
name|remove
argument_list|(
name|oldTriple
argument_list|)
expr_stmt|;
block|}
name|systemGraph
operator|.
name|add
argument_list|(
name|newTriple
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// it's not actually creating a resource so this
comment|// seems the most appropriate response
return|return
name|Response
operator|.
name|noContent
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Provides HTML corresponding to a user's roles      *      * all roles are listed with checkboxes, the roles this user has are checked      *      * (isn't very pretty but is just a one-off)      *      * @param userName the user in question      * @return HTML checkboxes as HTTP response      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"users/{username}/rolesCheckboxes"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|rolesCheckboxes
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
comment|// return new RdfViewable("rolesCheckboxes", getRoleType(), this.getClass());
name|StringBuffer
name|html
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|allRoleTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Role
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|allRoleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// pulls out all role names
while|while
condition|(
name|allRoleTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|allRoleTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|GraphNode
name|roleNode
init|=
operator|new
name|GraphNode
argument_list|(
name|triple
operator|.
name|getSubject
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|titlesIterator
init|=
name|roleNode
operator|.
name|getLiterals
argument_list|(
name|DC
operator|.
name|title
argument_list|)
decl_stmt|;
while|while
condition|(
name|titlesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|allRoleNames
operator|.
name|add
argument_list|(
name|titlesIterator
operator|.
name|next
argument_list|()
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|MGraph
name|rolesGraph
init|=
name|getUserRolesGraph
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|userRoleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|userRoleTriples
init|=
name|rolesGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Role
argument_list|)
decl_stmt|;
while|while
condition|(
name|userRoleTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|userRoleTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|GraphNode
name|roleNode
init|=
operator|new
name|GraphNode
argument_list|(
name|triple
operator|.
name|getSubject
argument_list|()
argument_list|,
name|rolesGraph
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|titlesIterator
init|=
name|roleNode
operator|.
name|getLiterals
argument_list|(
name|DC
operator|.
name|title
argument_list|)
decl_stmt|;
while|while
condition|(
name|titlesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|userRoleNames
operator|.
name|add
argument_list|(
name|titlesIterator
operator|.
name|next
argument_list|()
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allRoleNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|role
init|=
name|allRoleNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|.
name|equals
argument_list|(
literal|"BasePermissionsRole"
argument_list|)
condition|)
block|{
comment|// filter out
continue|continue;
block|}
if|if
condition|(
name|userRoleNames
operator|.
name|contains
argument_list|(
name|role
argument_list|)
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<input class=\"role\" type=\"checkbox\" id=\""
operator|+
name|role
operator|+
literal|"\" name=\""
operator|+
name|role
operator|+
literal|"\" value=\""
operator|+
name|role
operator|+
literal|"\" checked=\"checked\" />"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<input class=\"role\" type=\"checkbox\" id=\""
operator|+
name|role
operator|+
literal|"\" name=\""
operator|+
name|role
operator|+
literal|"\" value=\""
operator|+
name|role
operator|+
literal|"\" />"
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"<label for=\""
operator|+
name|role
operator|+
literal|"\">"
operator|+
name|role
operator|+
literal|"</label>"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<br />"
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|html
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * List the users. renders the user type with the "listUser" rendering      * template      *      * @return rendering specification      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"users"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|listUsers
parameter_list|()
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"listUser"
argument_list|,
name|getUserType
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|GraphNode
name|getUserType
parameter_list|()
block|{
return|return
operator|new
name|GraphNode
argument_list|(
name|FOAF
operator|.
name|Agent
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
comment|/*      * RESTful creation of user      * @TODO validity check input      */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"users/{username}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
specifier|public
name|Response
name|createUser
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|,
name|Graph
name|inputGraph
parameter_list|)
block|{
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|systemGraph
operator|.
name|addAll
argument_list|(
name|inputGraph
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|UriBuilder
name|uriBuilder
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
decl_stmt|;
name|URI
name|createdResource
init|=
name|uriBuilder
operator|.
name|replacePath
argument_list|(
literal|"/user-management/users/"
operator|+
name|userName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|createdResource
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Create a user. returns a dummy use with "editUser" as rendering      * specification (this will be a HTML form)      *      * @param uriInfo request details      * @return rendering specification      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"create-form"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|getCreateUserForm
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"editUser"
argument_list|,
name|dummyNode
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Endpoint-style user creation takes a little bunch of Turtle e.g. [] a      * foaf:Agent ; cz:userName "Hugo Ball" .      *      * [has test]      *      * @TODO check for password      *      * @param userData      * @return HTTP/1.1 204 No Content      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"add-user"
argument_list|)
specifier|public
name|Response
name|addUser
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
name|Graph
name|inputGraph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|agents
init|=
name|inputGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|FOAF
operator|.
name|Agent
argument_list|)
decl_stmt|;
name|NonLiteral
name|userNode
init|=
name|agents
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|userTriples
init|=
name|inputGraph
operator|.
name|filter
argument_list|(
name|userNode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|""
decl_stmt|;
name|Triple
name|userTriple
init|=
literal|null
decl_stmt|;
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|GraphNode
name|systemUserNode
init|=
operator|new
name|GraphNode
argument_list|(
name|userNode
argument_list|,
name|systemGraph
argument_list|)
decl_stmt|;
name|addRole
argument_list|(
name|systemUserNode
argument_list|,
literal|"BasePermissionsRole"
argument_list|)
expr_stmt|;
while|while
condition|(
name|userTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|userTriple
operator|=
name|userTriples
operator|.
name|next
argument_list|()
expr_stmt|;
name|systemGraph
operator|.
name|add
argument_list|(
name|userTriple
argument_list|)
expr_stmt|;
block|}
name|userName
operator|=
operator|(
operator|(
name|Literal
operator|)
name|userTriple
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|UriBuilder
name|uriBuilder
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
decl_stmt|;
name|URI
name|createdResource
init|=
name|uriBuilder
operator|.
name|replacePath
argument_list|(
literal|"/user-management/users/"
operator|+
name|userName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|createdResource
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// **********************************
comment|// ****** REMOVE USER ***************
comment|// **********************************
comment|/**      * Deletes a named user      *      * (called from HTML form)      *      * @param userName      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"delete"
argument_list|)
specifier|public
name|void
name|removeUser
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"user"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
name|remove
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes a named user      *      * @param userName      */
specifier|private
name|void
name|remove
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|Resource
name|userResource
init|=
name|getNamedUser
argument_list|(
name|userName
argument_list|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|userTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|NonLiteral
operator|)
name|userResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|buffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|userTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|userTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Graph context = getNamedUser(userName).getNodeContext();
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * RESTful user deletion      *      * called direct from the URI, e.g.      * http://localhost:8080/user-management/users/fred      *      * @param userName name of the user to delete      * @return HTTP/1.1 204 No Content      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"users/{username}"
argument_list|)
specifier|public
name|Response
name|delete
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
name|remove
argument_list|(
name|userName
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|noContent
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Endpoint-style user deletion takes a little bunch of Turtle describing      * the user to delete e.g. [] a foaf:Agent ; cz:userName "Hugo Ball" .      *      * @param userData      * @return HTTP/1.1 204 No Content      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"delete-user"
argument_list|)
specifier|public
name|Response
name|deleteUser
parameter_list|(
name|Graph
name|inputGraph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|userNameTriples
init|=
name|inputGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Literal
name|userNameNode
init|=
operator|(
name|Literal
operator|)
name|userNameTriples
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// gives concurrent mod exception otherwise
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|tripleBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|userTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|userNameNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|userTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|userTriple
init|=
name|userTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|systemUserTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|userTriple
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|systemUserTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tripleBuffer
operator|.
name|add
argument_list|(
name|systemUserTriples
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|tripleBuffer
argument_list|)
expr_stmt|;
comment|// it's not actually creating a resource at this URI so this
comment|// seems the most appropriate response
return|return
name|Response
operator|.
name|noContent
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|// **********************************
comment|// ****** SHOW ROLE DETAILS *********
comment|// **********************************
comment|// **********************************
comment|// ****** LIST ROLES ****************
comment|// **********************************
comment|/**      * Lists all roles using a rendering as specified in template listRole      *      * @return      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"roles"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|listRoles
parameter_list|()
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"listRole"
argument_list|,
name|getRoleType
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Provides the node in the system graph corresponding to rdf:type Role      *      * @return Role class node      */
specifier|public
name|GraphNode
name|getRoleType
parameter_list|()
block|{
return|return
operator|new
name|GraphNode
argument_list|(
name|PERMISSION
operator|.
name|Role
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
comment|// **********************************
comment|// ****** ADD ROLE ******************
comment|// **********************************
comment|/**      * Create a role. returns "editRole" as rendering specification (this will      * be a HTML form)      *      * @param uriInfo request details      * @return rendering specification      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"create-role"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|getCreateRoleForm
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"editRole"
argument_list|,
name|dummyNode
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|// /user-management/roles/edit/'+roleName,
comment|/**      * lookup a role by name presenting it with "editRole" as rendering      * instruction.      *      * @param userName      * @return      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"roles/edit/{rolename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|editRole
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"rolename"
argument_list|)
name|String
name|roleName
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"editRole"
argument_list|,
name|getRole
argument_list|(
name|roleName
argument_list|)
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|GraphNode
name|getRole
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"roleName"
argument_list|)
name|String
name|roleName
parameter_list|)
block|{
return|return
name|getNamedRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
comment|/*      * returns an existing user node from the graph.      */
specifier|private
name|GraphNode
name|getNamedRole
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|GraphNode
name|roleNode
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|roleIterator
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Role
argument_list|)
decl_stmt|;
comment|//new PlainLiteralImpl(userName));
if|if
condition|(
operator|!
name|roleIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|tripleBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|roleIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|role
init|=
name|roleIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|roleNameTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|role
argument_list|,
name|DC
operator|.
name|title
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|roleNameTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Literal
name|roleLiteral
init|=
operator|(
name|Literal
operator|)
name|roleNameTriples
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|roleName
operator|.
name|equals
argument_list|(
name|roleLiteral
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
condition|)
block|{
name|roleNode
operator|=
operator|new
name|GraphNode
argument_list|(
name|role
argument_list|,
name|systemGraph
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|roleNode
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|roleNode
return|;
block|}
comment|// **********************************
comment|// ****** REMOVE ROLE ***************
comment|// **********************************
comment|/**      * Deletes a named role      *      * (called from HTML form)      *      * @param roleName      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"delete-role"
argument_list|)
specifier|public
name|void
name|removeRole
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"role"
argument_list|)
name|String
name|roleName
parameter_list|)
block|{
name|deleteRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes a named user      *      * @param userName      */
specifier|private
name|void
name|deleteRole
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|Resource
name|roleResource
init|=
name|getNamedRole
argument_list|(
name|roleName
argument_list|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|roleTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|NonLiteral
operator|)
name|roleResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|buffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|roleTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|roleTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// is lock needed?
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Update role details - adds triples as appropriate to system graph      *      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"store-role"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
name|Response
name|storeRoleFormHandler
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"roleName"
argument_list|)
name|String
name|roleName
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"comment"
argument_list|)
name|String
name|comment
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"permissions"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|permissions
parameter_list|)
block|{
name|GraphNode
name|roleNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roleName
operator|!=
literal|null
condition|)
block|{
comment|//
name|roleName
operator|=
name|roleName
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roleName
operator|!=
literal|null
operator|&&
operator|!
name|roleName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|roleNode
operator|=
name|getRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
if|if
condition|(
name|roleNode
operator|!=
literal|null
condition|)
block|{
return|return
name|storeRole
argument_list|(
name|roleNode
argument_list|,
name|uriInfo
argument_list|,
name|roleName
argument_list|,
name|comment
argument_list|,
name|permissions
argument_list|)
return|;
block|}
block|}
name|roleNode
operator|=
name|createRole
argument_list|(
name|roleName
argument_list|,
name|comment
argument_list|)
expr_stmt|;
return|return
name|storeRole
argument_list|(
name|roleNode
argument_list|,
name|uriInfo
argument_list|,
name|roleName
argument_list|,
name|comment
argument_list|,
name|permissions
argument_list|)
return|;
block|}
comment|/**      * Creates a new role wit the the specified role name      *      * @param newUserName      * @return user node in system graph      */
specifier|private
name|GraphNode
name|createRole
parameter_list|(
name|String
name|newRoleName
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
name|BNode
name|subject
init|=
operator|new
name|BNode
argument_list|()
decl_stmt|;
name|GraphNode
name|roleNode
init|=
operator|new
name|GraphNode
argument_list|(
name|subject
argument_list|,
name|systemGraph
argument_list|)
decl_stmt|;
name|roleNode
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Role
argument_list|)
expr_stmt|;
name|roleNode
operator|.
name|addProperty
argument_list|(
name|DC
operator|.
name|title
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|newRoleName
argument_list|)
argument_list|)
expr_stmt|;
name|roleNode
operator|.
name|addProperty
argument_list|(
name|RDFS
operator|.
name|comment
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|comment
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|roleNode
return|;
block|}
specifier|private
name|Response
name|storeRole
parameter_list|(
name|GraphNode
name|roleNode
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|String
name|roleName
parameter_list|,
name|String
name|comment
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|permissions
parameter_list|)
block|{
name|NonLiteral
name|roleResource
init|=
operator|(
name|NonLiteral
operator|)
name|roleNode
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|permissions
operator|!=
literal|null
condition|)
block|{
name|clearPermissions
argument_list|(
name|roleResource
argument_list|)
expr_stmt|;
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permissions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|permissions
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|addPermission
argument_list|(
name|roleNode
argument_list|,
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// showSystem();
name|URI
name|pageUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"system/console/usermanagement"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// header Cache-control: no-cache, just in case intermediaries are
comment|// holding onto old stuff
name|CacheControl
name|cc
init|=
operator|new
name|CacheControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setNoCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//showSystem();
comment|// see other my not be the best response, but does seem the best given
comment|// the jax-rs things available
return|return
name|Response
operator|.
name|seeOther
argument_list|(
name|pageUri
argument_list|)
operator|.
name|cacheControl
argument_list|(
name|cc
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// **********************************
comment|// ****** ASSIGN ROLE TO USER *******
comment|// **********************************
comment|// **********************************
comment|// ****** REMOVE ROLE FROM USER *****
comment|// **********************************
comment|// **********************************
comment|// ****** LIST PERMISSIONS **********
comment|// **********************************
comment|/*      * Provides listing of all permissions present in system graph      * rendered according to specification in listPermission template      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"permissions"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
argument_list|)
specifier|public
name|RdfViewable
name|listPermissions
parameter_list|()
block|{
name|addClassToPermissions
argument_list|()
expr_stmt|;
comment|// workaround
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"listPermission"
argument_list|,
name|getPermissionType
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Provides the node in the system graph corresponding to rdf:type      * Permission      *      * @return Permission class node      */
specifier|public
name|GraphNode
name|getPermissionType
parameter_list|()
block|{
return|return
operator|new
name|GraphNode
argument_list|(
name|PERMISSION
operator|.
name|Permission
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
comment|// **********************************
comment|// ****** ADD PERMISSION TO USER ****
comment|// **********************************
comment|// **************************************
comment|// ****** REMOVE PERMISSION FROM USER ***
comment|// **************************************
comment|// ************************************
comment|// ****** ADD PERMISSION TO ROLE ******
comment|// ************************************
comment|// **************************************
comment|// ****** REMOVE PERMISSION FROM ROLE ***
comment|// **************************************
comment|////////////////////////////////////////////////////////////////
comment|/**      * Pushes user data into system graph      *      * @param userNode      * @param uriInfo      * @param currentUserName      * @param newUserName      * @param fullName      * @param email      * @param password      * @param roles      * @param permissions      * @return      */
specifier|private
name|Response
name|store
parameter_list|(
name|GraphNode
name|userNode
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|String
name|currentUserName
parameter_list|,
name|String
name|newUserName
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|email
parameter_list|,
name|String
name|password
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|permissions
parameter_list|)
block|{
comment|//   GraphNode userNode = getUser(currentUserName);
if|if
condition|(
name|newUserName
operator|!=
literal|null
operator|&&
operator|!
name|newUserName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|changeLiteral
argument_list|(
name|userNode
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
name|newUserName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fullName
operator|!=
literal|null
operator|&&
operator|!
name|fullName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|changeLiteral
argument_list|(
name|userNode
argument_list|,
name|FOAF
operator|.
name|name
argument_list|,
name|fullName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|!=
literal|null
operator|&&
operator|!
name|password
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
name|passwordSha1
init|=
name|PasswordUtil
operator|.
name|convertPassword
argument_list|(
name|password
argument_list|)
decl_stmt|;
name|changeLiteral
argument_list|(
name|userNode
argument_list|,
name|PERMISSION
operator|.
name|passwordSha1
argument_list|,
name|passwordSha1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|changeResource
argument_list|(
name|userNode
argument_list|,
name|FOAF
operator|.
name|mbox
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"mailto:"
operator|+
name|email
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NonLiteral
name|userResource
init|=
operator|(
name|NonLiteral
operator|)
name|userNode
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
name|clearRoles
argument_list|(
name|userResource
argument_list|)
expr_stmt|;
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|roles
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|addRole
argument_list|(
name|userNode
argument_list|,
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|permissions
operator|!=
literal|null
condition|)
block|{
name|clearPermissions
argument_list|(
name|userResource
argument_list|)
expr_stmt|;
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|permissions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|permissions
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|addPermission
argument_list|(
name|userNode
argument_list|,
name|permissions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|URI
name|pageUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"system/console/usermanagement"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// header Cache-control: no-cache, just in case intermediaries are
comment|// holding onto old stuff
name|CacheControl
name|cc
init|=
operator|new
name|CacheControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setNoCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//showSystem();
comment|// see other my not be the best response, but does seem the best given
comment|// the jax-rs things available
return|return
name|Response
operator|.
name|seeOther
argument_list|(
name|pageUri
argument_list|)
operator|.
name|cacheControl
argument_list|(
name|cc
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * a kludge - initially the permissions aren't expressed as instances of      * Permission class, this adds the relevant triples      */
specifier|private
name|void
name|addClassToPermissions
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|permissionTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PERMISSION
operator|.
name|hasPermission
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|GraphNode
argument_list|>
name|buffer
init|=
operator|new
name|ArrayList
argument_list|<
name|GraphNode
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|permissionTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|permissionTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|permissionResource
init|=
name|triple
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
operator|new
name|GraphNode
argument_list|(
name|permissionResource
argument_list|,
name|systemGraph
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|Lock
name|writeLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Permission
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Provides a graph containing Role triples associated with a given user      *      * @param userName      * @return roles graph      */
specifier|private
name|MGraph
name|getUserRolesGraph
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|GraphNode
name|userNode
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|functionIterator
init|=
name|userNode
operator|.
name|getObjects
argument_list|(
name|SIOC
operator|.
name|has_function
argument_list|)
decl_stmt|;
name|SimpleMGraph
name|rolesGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
while|while
condition|(
name|functionIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|GraphNode
name|functionNode
init|=
operator|new
name|GraphNode
argument_list|(
name|functionIterator
operator|.
name|next
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|roleIterator
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|NonLiteral
operator|)
name|functionNode
operator|.
name|getNode
argument_list|()
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Role
argument_list|)
decl_stmt|;
comment|// needs lock?
while|while
condition|(
name|roleIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|roleTriple
init|=
name|roleIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// rolesGraph.add(roleTriple);
name|NonLiteral
name|roleNode
init|=
name|roleTriple
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|SimpleGraph
name|detailsGraph
init|=
operator|new
name|SimpleGraph
argument_list|(
name|systemGraph
operator|.
name|filter
argument_list|(
name|roleNode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|rolesGraph
operator|.
name|addAll
argument_list|(
name|detailsGraph
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rolesGraph
return|;
block|}
comment|/**      * Creates a new user withe the specified user name      *      * @param newUserName      * @return user node in system graph      */
specifier|private
name|GraphNode
name|createUser
parameter_list|(
name|String
name|newUserName
parameter_list|)
block|{
name|BNode
name|subject
init|=
operator|new
name|BNode
argument_list|()
decl_stmt|;
name|GraphNode
name|userNode
init|=
operator|new
name|GraphNode
argument_list|(
name|subject
argument_list|,
name|systemGraph
argument_list|)
decl_stmt|;
name|userNode
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|FOAF
operator|.
name|Agent
argument_list|)
expr_stmt|;
name|userNode
operator|.
name|addProperty
argument_list|(
name|PLATFORM
operator|.
name|userName
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|newUserName
argument_list|)
argument_list|)
expr_stmt|;
name|addRole
argument_list|(
name|userNode
argument_list|,
literal|"BasePermissionsRole"
argument_list|)
expr_stmt|;
return|return
name|userNode
return|;
block|}
comment|// move later?
specifier|public
specifier|final
specifier|static
name|String
name|rolesBase
init|=
literal|"urn:x-localhost/role/"
decl_stmt|;
specifier|private
name|void
name|clearRoles
parameter_list|(
name|NonLiteral
name|userResource
parameter_list|)
block|{
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|filterToArray
argument_list|(
name|userResource
argument_list|,
name|SIOC
operator|.
name|has_function
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * convenience - used for buffering      *      * @param subject      * @param predicate      * @param object      * @return      */
specifier|private
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|filterToArray
parameter_list|(
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|predicate
parameter_list|,
name|Resource
name|object
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|buffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|add
argument_list|(
name|triples
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
comment|/**      * Add a role to a given user in system graph      *      * @param userNode node corresponding to user      * @param roleName name of the role      * @return user node      */
specifier|private
name|GraphNode
name|addRole
parameter_list|(
name|GraphNode
name|userNode
parameter_list|,
name|String
name|roleName
parameter_list|)
block|{
comment|// is this thing already around? (will be a bnode)
name|GraphNode
name|roleNode
init|=
name|getTitleNode
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
comment|// otherwise make a new one as a named node
if|if
condition|(
name|roleNode
operator|==
literal|null
condition|)
block|{
name|UriRef
name|roleUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|rolesBase
operator|+
name|roleName
argument_list|)
decl_stmt|;
name|roleNode
operator|=
operator|new
name|GraphNode
argument_list|(
name|roleUriRef
argument_list|,
name|systemGraph
argument_list|)
expr_stmt|;
name|roleNode
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Role
argument_list|)
expr_stmt|;
name|roleNode
operator|.
name|addProperty
argument_list|(
name|DC
operator|.
name|title
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|roleName
argument_list|)
argument_list|)
expr_stmt|;
name|userNode
operator|.
name|addProperty
argument_list|(
name|SIOC
operator|.
name|has_function
argument_list|,
name|roleUriRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userNode
operator|.
name|addProperty
argument_list|(
name|SIOC
operator|.
name|has_function
argument_list|,
name|roleNode
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|userNode
return|;
block|}
comment|// public final static String permissionsBase = "urn:x-localhost/role/";
specifier|private
name|GraphNode
name|addPermission
parameter_list|(
name|GraphNode
name|subjectNode
parameter_list|,
name|String
name|permissionString
parameter_list|)
block|{
if|if
condition|(
name|hasPermission
argument_list|(
name|subjectNode
argument_list|,
name|permissionString
argument_list|)
condition|)
block|{
return|return
name|subjectNode
return|;
block|}
name|GraphNode
name|permissionNode
init|=
operator|new
name|GraphNode
argument_list|(
operator|new
name|BNode
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
decl_stmt|;
name|permissionNode
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|PERMISSION
operator|.
name|Permission
argument_list|)
expr_stmt|;
comment|// permissionNode.addProperty(DC.title, new PlainLiteralImpl(permissionName));
name|subjectNode
operator|.
name|addProperty
argument_list|(
name|PERMISSION
operator|.
name|hasPermission
argument_list|,
name|permissionNode
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|permissionNode
operator|.
name|addProperty
argument_list|(
name|PERMISSION
operator|.
name|javaPermissionEntry
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|permissionString
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|subjectNode
return|;
block|}
specifier|private
name|boolean
name|hasPermission
parameter_list|(
name|GraphNode
name|userNode
parameter_list|,
name|String
name|permissionString
parameter_list|)
block|{
name|boolean
name|has
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|existingPermissions
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|NonLiteral
operator|)
name|userNode
operator|.
name|getNode
argument_list|()
argument_list|,
name|PERMISSION
operator|.
name|hasPermission
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// check to see if the user already has this permission
while|while
condition|(
name|existingPermissions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|permissionNode
init|=
operator|(
name|NonLiteral
operator|)
name|existingPermissions
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|permissionTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|permissionNode
argument_list|,
name|PERMISSION
operator|.
name|javaPermissionEntry
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|permissionTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Literal
name|permission
init|=
operator|(
name|Literal
operator|)
name|permissionTriples
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|permissionString
operator|.
name|equals
argument_list|(
name|permission
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
condition|)
block|{
name|has
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|has
return|;
block|}
comment|//    []    a<http://xmlns.com/foaf/0.1/Agent> ;
comment|//<http://clerezza.org/2008/10/permission#hasPermission>
comment|//              [ a<http://clerezza.org/2008/10/permission#Permission> ;
comment|//<http://clerezza.org/2008/10/permission#javaPermissionEntry>
comment|//                        "(java.security.AllPermission \"\" \"\")"
comment|//              ] ;
specifier|private
name|void
name|clearPermissions
parameter_list|(
name|NonLiteral
name|subject
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|buffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|permissions
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|PERMISSION
operator|.
name|hasPermission
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|permissions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|permissionTriple
init|=
name|permissions
operator|.
name|next
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|add
argument_list|(
name|permissionTriple
argument_list|)
expr_stmt|;
name|NonLiteral
name|permissionNode
init|=
operator|(
name|NonLiteral
operator|)
name|permissionTriple
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|permissionTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|permissionNode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|permissionTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|add
argument_list|(
name|permissionTriples
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/*       * must be a neater way of doing this...      */
specifier|private
name|GraphNode
name|getTitleNode
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|DC
operator|.
name|title
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|title
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|resource
init|=
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
return|return
operator|new
name|GraphNode
argument_list|(
name|resource
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Replaces/inserts literal value for predicate assumes there is only one      * triple for the given predicate new value is added before deleting old one      * in case user is modifying their own data in which case they need triples      * in place for rights etc.      *      * @param userNode node in systemGraph corresponding to the user to change      * @param predicate property of the triple to change      * @param newValue new value for given predicate      */
specifier|private
name|void
name|changeLiteral
parameter_list|(
name|GraphNode
name|userNode
parameter_list|,
name|UriRef
name|predicate
parameter_list|,
name|String
name|newValue
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|oldTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|NonLiteral
operator|)
name|userNode
operator|.
name|getNode
argument_list|()
argument_list|,
name|predicate
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|oldBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Resource
name|oldObject
init|=
literal|null
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|oldTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|oldTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|oldObject
operator|=
name|triple
operator|.
name|getObject
argument_list|()
expr_stmt|;
name|oldBuffer
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// filter appears to see plain literals and xsd:strings as differerent
comment|// so not
comment|// userNode.addPropertyValue(predicate, newValue);
name|PlainLiteral
name|newObject
init|=
operator|new
name|PlainLiteralImpl
argument_list|(
name|newValue
argument_list|)
decl_stmt|;
name|userNode
operator|.
name|addProperty
argument_list|(
name|predicate
argument_list|,
name|newObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|newObject
operator|.
name|equals
argument_list|(
name|oldObject
argument_list|)
condition|)
block|{
return|return;
block|}
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|oldBuffer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Replaces/inserts resource value for predicate assumes there is only one      * triple for the given predicate      *      * @param userNode node in systemGraph corresponding to the user to change      * @param predicate property of the triple to change      * @param newValue new value for given predicate      */
specifier|private
name|void
name|changeResource
parameter_list|(
name|GraphNode
name|userNode
parameter_list|,
name|UriRef
name|predicate
parameter_list|,
name|UriRef
name|newValue
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|oldTriples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
operator|(
name|NonLiteral
operator|)
name|userNode
operator|.
name|getNode
argument_list|()
argument_list|,
name|predicate
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Triple
argument_list|>
name|oldBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|Triple
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|oldTriples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|triple
init|=
name|oldTriples
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|oldValue
init|=
name|triple
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|newValue
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
return|return;
block|}
name|oldBuffer
operator|.
name|add
argument_list|(
name|triple
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// filter appears to see plain literals and xsd:strings as differerent
comment|// so not
comment|// userNode.addPropertyValue(predicate, newValue);
name|userNode
operator|.
name|addProperty
argument_list|(
name|predicate
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|systemGraph
operator|.
name|removeAll
argument_list|(
name|oldBuffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|GraphNode
name|getUser
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"userName"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
return|return
name|getNamedUser
argument_list|(
name|userName
argument_list|)
return|;
block|}
comment|/*      * returns an existing user node from the graph.      */
comment|// needs lock?
specifier|private
name|GraphNode
name|getNamedUser
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iter
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|userName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|GraphNode
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|GraphNode
argument_list|>
name|getUsers
parameter_list|()
block|{
return|return
name|getResourcesOfType
argument_list|(
name|FOAF
operator|.
name|Agent
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|GraphNode
argument_list|>
name|getResourcesOfType
parameter_list|(
name|UriRef
name|type
parameter_list|)
block|{
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GraphNode
argument_list|>
name|resources
init|=
operator|new
name|HashSet
argument_list|<
name|GraphNode
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
operator|new
name|GraphNode
argument_list|(
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * Dumps a Turtle serialization of the system graph to System.out      * handy for debugging      */
specifier|private
name|void
name|showSystem
parameter_list|()
block|{
try|try
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|baos
argument_list|,
name|systemGraph
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

