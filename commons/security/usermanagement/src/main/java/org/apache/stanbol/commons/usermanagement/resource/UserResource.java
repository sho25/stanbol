begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|usermanagement
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|CacheControl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|platform
operator|.
name|config
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|LockableMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|FOAF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PLATFORM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|GraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|MGraphUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|MGraphUtils
operator|.
name|NoSuchSubGraphException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PERMISSION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|PasswordUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|viewable
operator|.
name|RdfViewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|UserResource
operator|.
name|class
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"user-management"
argument_list|)
specifier|public
class|class
name|UserResource
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserResource
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|target
operator|=
name|SystemConfig
operator|.
name|SYSTEM_GRAPH_FILTER
argument_list|)
specifier|private
name|LockableMGraph
name|systemGraph
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|GET
specifier|public
name|String
name|index
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|baos
argument_list|,
name|systemGraph
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
name|String
name|serialized
init|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
return|return
name|serialized
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"users"
argument_list|)
specifier|public
name|RdfViewable
name|listUsers
parameter_list|()
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"listUser.ftl"
argument_list|,
name|getUserType
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"user/{username}"
argument_list|)
specifier|public
name|RdfViewable
name|editUser
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"editUser.ftl"
argument_list|,
name|getUser
argument_list|(
name|userName
argument_list|)
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"view-user"
argument_list|)
specifier|public
name|RdfViewable
name|viewUser
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"userName"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"edit.ftl"
argument_list|,
name|getUser
argument_list|(
name|userName
argument_list|)
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * takes edit form data and pushes into store 	 * so far only password change implemented 	 * (others should be straightforward delete/inserts) 	 */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"store-user"
argument_list|)
specifier|public
name|Response
name|storeUser
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"userName"
argument_list|)
name|String
name|userName
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"email"
argument_list|)
name|String
name|email
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"password"
argument_list|)
name|String
name|password
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"permission[]"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|permission
parameter_list|)
block|{
name|GraphNode
name|userNode
init|=
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|String
name|passwordSha1
init|=
name|PasswordUtil
operator|.
name|convertPassword
argument_list|(
name|password
argument_list|)
decl_stmt|;
comment|// System.out.println("new password = "+password);
comment|// System.out.println("new passwordSha1 = "+passwordSha1);
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BEFORE ========================================================"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|userNode
operator|.
name|getGraph
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Literal
argument_list|>
name|oldPasswordsSha1
init|=
name|userNode
operator|.
name|getLiterals
argument_list|(
name|PERMISSION
operator|.
name|passwordSha1
argument_list|)
decl_stmt|;
name|Literal
name|oldPasswordSha1
init|=
name|oldPasswordsSha1
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// no exception, if there is no value, let it break totally, if more than one - it is broken elsewhere
name|userNode
operator|.
name|addPropertyValue
argument_list|(
name|PERMISSION
operator|.
name|passwordSha1
argument_list|,
name|passwordSha1
argument_list|)
expr_stmt|;
comment|// workaround for possible issue in verification re. PlainLiteral vs. xsd:string
comment|// userNode.addProperty(PERMISSION.passwordSha1, new PlainLiteralImpl(passwordSha1));
comment|// most likely not a problem, and the above will work
name|userNode
operator|.
name|deleteProperty
argument_list|(
name|PERMISSION
operator|.
name|passwordSha1
argument_list|,
name|oldPasswordSha1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"AFTER ========================================================"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|userNode
operator|.
name|getGraph
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
name|URI
name|pageUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"/system/console"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// header Cache-control: no-cache, just in case intermediaries are holding onto old stuff
name|CacheControl
name|cc
init|=
operator|new
name|CacheControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setNoCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// see other my not be the best response, but does seem the best given the jax-rs things available
return|return
name|Response
operator|.
name|seeOther
argument_list|(
name|pageUri
argument_list|)
operator|.
name|cacheControl
argument_list|(
name|cc
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** 	 * replaces the subgraph serialized with RDF/XML in<code>revokedString 	 *</code> with the one from<code>assertedString</code>. 	 * 	 * @param graphUri the graph within which the replacement has to take place or null 	 * for the content graph 	 * @param assertedString the asserted Graph 	 * @param revokedString the revoked Graph 	 * @param format the media-type of the rdf format in which the asserted and revoked graph are serialized, default: text/turtle 	 */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"replace-subgraph"
argument_list|)
specifier|public
name|void
name|replaceSubGraph
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"graph"
argument_list|)
name|UriRef
name|graphUri
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"assert"
argument_list|)
name|String
name|assertedString
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"revoke"
argument_list|)
name|String
name|revokedString
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"format"
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"text/turtle"
argument_list|)
name|String
name|format
parameter_list|)
block|{
specifier|final
name|Graph
name|assertedGraph
decl_stmt|;
specifier|final
name|Graph
name|revokedGraph
decl_stmt|;
try|try
block|{
name|assertedGraph
operator|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|assertedString
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|revokedGraph
operator|=
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|assertedString
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"reading graph {}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|,
literal|500
argument_list|)
throw|;
block|}
try|try
block|{
name|MGraphUtils
operator|.
name|removeSubGraph
argument_list|(
name|systemGraph
argument_list|,
name|revokedGraph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchSubGraphException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|systemGraph
operator|.
name|addAll
argument_list|(
name|assertedGraph
argument_list|)
expr_stmt|;
block|}
specifier|private
name|GraphNode
name|getUser
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"userName"
argument_list|)
name|String
name|userName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|iter
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|userName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|GraphNode
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
specifier|public
name|GraphNode
name|getUserType
parameter_list|()
block|{
return|return
operator|new
name|GraphNode
argument_list|(
name|FOAF
operator|.
name|Agent
argument_list|,
name|systemGraph
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|GraphNode
argument_list|>
name|getUsers
parameter_list|()
block|{
return|return
name|getResourcesOfType
argument_list|(
name|FOAF
operator|.
name|Agent
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|GraphNode
argument_list|>
name|getResourcesOfType
parameter_list|(
name|UriRef
name|type
parameter_list|)
block|{
name|Lock
name|readLock
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|GraphNode
argument_list|>
name|userRoles
init|=
operator|new
name|HashSet
argument_list|<
name|GraphNode
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|userRoles
operator|.
name|add
argument_list|(
operator|new
name|GraphNode
argument_list|(
name|triples
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|systemGraph
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|userRoles
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

