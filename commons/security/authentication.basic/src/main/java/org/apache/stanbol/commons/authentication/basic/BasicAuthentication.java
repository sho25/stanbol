begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|authentication
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|UserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
operator|.
name|AuthenticationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
operator|.
name|NoSuchAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
operator|.
name|WeightedAuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|wymiwyg
operator|.
name|commons
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|WeightedAuthenticationMethod
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"weight"
argument_list|,
name|intValue
operator|=
literal|10
argument_list|)
specifier|public
class|class
name|BasicAuthentication
implements|implements
name|WeightedAuthenticationMethod
block|{
comment|/** 	 *	weight of the authentication method 	 */
specifier|private
name|int
name|weight
init|=
literal|10
decl_stmt|;
annotation|@
name|Reference
name|AuthenticationService
name|authenticationService
decl_stmt|;
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|componentContext
parameter_list|)
block|{
name|weight
operator|=
operator|(
name|Integer
operator|)
name|componentContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"weight"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Subject
name|subject
parameter_list|)
throws|throws
name|LoginException
throws|,
name|ServletException
block|{
name|String
name|authorization
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorization
operator|!=
literal|null
condition|)
block|{
name|String
name|authBase64
init|=
name|authorization
operator|.
name|substring
argument_list|(
name|authorization
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|credentials
init|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|decode
argument_list|(
name|authBase64
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentials
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|userName
init|=
name|credentials
index|[
literal|0
index|]
decl_stmt|;
name|String
name|password
decl_stmt|;
if|if
condition|(
name|credentials
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|password
operator|=
name|credentials
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|authenticationService
operator|.
name|authenticateUser
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
condition|)
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|remove
argument_list|(
name|UserUtil
operator|.
name|ANONYMOUS
argument_list|)
expr_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|LoginException
operator|.
name|PASSWORD_NOT_MATCHING
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchAgent
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|LoginException
operator|.
name|USER_NOT_EXISTING
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|writeLoginResponse
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
name|cause
operator|==
literal|null
operator|||
name|cause
operator|instanceof
name|AccessControlException
condition|)
block|{
name|setUnauthorizedResponse
argument_list|(
name|response
argument_list|,
literal|"<html><body>unauthorized</body></html>"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|LoginException
condition|)
block|{
name|LoginException
name|loginException
init|=
operator|(
name|LoginException
operator|)
name|cause
decl_stmt|;
name|String
name|type
init|=
name|loginException
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|LoginException
operator|.
name|PASSWORD_NOT_MATCHING
argument_list|)
condition|)
block|{
name|setUnauthorizedResponse
argument_list|(
name|response
argument_list|,
literal|"<html><body>Username and password do not match</body></html>"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|LoginException
operator|.
name|USER_NOT_EXISTING
argument_list|)
condition|)
block|{
name|setUnauthorizedResponse
argument_list|(
name|response
argument_list|,
literal|"<html><body>User does not exist</body></html>"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|setUnauthorizedResponse
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|response
operator|.
name|setStatus
argument_list|(
literal|401
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"Basic realm=\"Apache Stanbol authentication needed\""
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|io
operator|.
name|InputStream
name|pipedIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
literal|""
operator|+
name|message
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|message
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
block|}
end_class

end_unit

