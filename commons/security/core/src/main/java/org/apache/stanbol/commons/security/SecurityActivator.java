begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright 2010 reto.  *   *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *   *       http://www.apache.org/licenses/LICENSE-2.0  *   *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_comment
comment|/**  * A component with no required dependency ensuring that the UserAwarePolicy is   * activated if available or otherwise a restrictive default policy is set  *   * @author reto  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|name
operator|=
literal|"userAwarePolicy"
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|referenceInterface
operator|=
name|UserAwarePolicy
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SecurityActivator
block|{
specifier|private
name|Policy
name|originalPolicy
decl_stmt|;
specifier|private
name|Policy
name|fallBackPolicy
init|=
operator|new
name|Policy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PermissionCollection
name|getPermissions
parameter_list|(
specifier|final
name|ProtectionDomain
name|domain
parameter_list|)
block|{
name|PermissionCollection
name|result
decl_stmt|;
name|Principal
index|[]
name|principals
init|=
name|domain
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
if|if
condition|(
name|principals
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|Permissions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|originalPolicy
operator|.
name|getPermissions
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|originalPolicy
operator|=
name|Policy
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|deactivate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Policy
operator|.
name|setPolicy
argument_list|(
name|originalPolicy
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindUserAwarePolicy
parameter_list|(
name|UserAwarePolicy
name|userAwarePolicy
parameter_list|)
block|{
name|Policy
operator|.
name|setPolicy
argument_list|(
name|userAwarePolicy
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindUserAwarePolicy
parameter_list|(
name|UserAwarePolicy
name|userAwarePolicy
parameter_list|)
block|{
name|Policy
operator|.
name|setPolicy
argument_list|(
name|fallBackPolicy
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

