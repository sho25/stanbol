begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|security
operator|.
name|PasswordUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|BlankNodeOrIRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|impl
operator|.
name|utils
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PERMISSION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|platform
operator|.
name|config
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|PLATFORM
import|;
end_import

begin_comment
comment|/**  * A service that checks if a provided username and password matches a  * username and password stored in the system graph  *  * @author mir  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|AuthenticationChecker
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AuthenticationCheckerImpl
implements|implements
name|AuthenticationChecker
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthenticationCheckerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|target
operator|=
name|SystemConfig
operator|.
name|SYSTEM_GRAPH_FILTER
argument_list|)
specifier|private
name|Graph
name|systemGraph
decl_stmt|;
comment|/** 	 * Checks if the provided username and password matches a username and 	 * password stored in the system graph 	 * 	 * @param userName 	 * @param password 	 * @return true if the password matched, false otherwise 	 * @throws org.apache.stanbol.commons.security.auth.NoSuchAgent 	 */
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|NoSuchAgent
block|{
name|SecurityManager
name|security
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|security
operator|!=
literal|null
condition|)
block|{
name|AccessController
operator|.
name|checkPermission
argument_list|(
operator|new
name|CheckAuthenticationPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BlankNodeOrIRI
name|agent
init|=
name|getAgentFromGraph
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|String
name|storedPassword
init|=
name|getPasswordOfAgent
argument_list|(
name|agent
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedPassword
operator|.
name|equals
argument_list|(
name|PasswordUtil
operator|.
name|convertPassword
argument_list|(
name|password
argument_list|)
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"user {} successfully authenticated"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"unsuccessful authentication attempt as user {}"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|BlankNodeOrIRI
name|getAgentFromGraph
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|NoSuchAgent
block|{
name|BlankNodeOrIRI
name|agent
decl_stmt|;
name|Lock
name|l
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|l
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|agents
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|PLATFORM
operator|.
name|userName
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|userName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|agents
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|agent
operator|=
name|agents
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"unsuccessful authentication attempt as non-existent user {}"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchAgent
argument_list|()
throw|;
block|}
block|}
finally|finally
block|{
name|l
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|agent
return|;
block|}
specifier|private
name|String
name|getPasswordOfAgent
parameter_list|(
name|BlankNodeOrIRI
name|agent
parameter_list|)
block|{
name|String
name|storedPassword
init|=
literal|""
decl_stmt|;
name|Lock
name|l
init|=
name|systemGraph
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|l
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|agentPassword
init|=
name|systemGraph
operator|.
name|filter
argument_list|(
name|agent
argument_list|,
name|PERMISSION
operator|.
name|passwordSha1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|agentPassword
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|storedPassword
operator|=
operator|(
operator|(
name|Literal
operator|)
name|agentPassword
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|l
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|storedPassword
return|;
block|}
block|}
end_class

end_unit

