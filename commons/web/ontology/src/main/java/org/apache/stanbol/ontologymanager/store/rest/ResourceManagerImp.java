begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class that relates URL(Path)s used by the RESTful interface with the URIs used by the underlying triple  * store  *   * @author gunes  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|enabled
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ResourceManagerImp
implements|implements
name|ResourceManager
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DB_URL
init|=
literal|"jdbc:derby:ps_db;create=true"
decl_stmt|;
specifier|private
specifier|static
name|String
name|ontologyPathPrefix
init|=
literal|"/ontology/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|classPathPrefix
init|=
literal|"classes/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|dataPropertyPathPrefix
init|=
literal|"datatypeProperties/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|objectPropertyPathPrefix
init|=
literal|"objectProperties/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|individualPathPrefix
init|=
literal|"individuals/"
decl_stmt|;
specifier|private
specifier|static
name|String
name|ontologiesTable
init|=
literal|"resource_manager_ontologies"
decl_stmt|;
specifier|private
specifier|static
name|String
name|resourcesTable
init|=
literal|"resource_manager_resources"
decl_stmt|;
specifier|public
specifier|static
name|String
name|CLASS_RESOURCE
init|=
literal|"CLASS"
decl_stmt|;
specifier|public
specifier|static
name|String
name|DATA_PROPERTY_RESOURCE
init|=
literal|"DATA_PROPERTY"
decl_stmt|;
specifier|public
specifier|static
name|String
name|OBJECT_PROPERTY_RESOURCE
init|=
literal|"OBJECT_PROPERTY"
decl_stmt|;
specifier|public
specifier|static
name|String
name|INDIVIDUAL_RESOURCE
init|=
literal|"INDIVIDUAL"
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
literal|null
decl_stmt|;
comment|/** Logger instance **/
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceManagerImp
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* private variables to store ontology-path (URI-URL) relations */
comment|/* ontologyURI --> ontologyPath */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ontologies
init|=
literal|null
decl_stmt|;
comment|/* ontologyPath --> ontologyURI */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ontologiesInverted
init|=
literal|null
decl_stmt|;
comment|/*      * private varibles to store resource(class/property/individual)-path (resource URI - resource URL)      * relations      */
comment|/* resourceURI --> resourcePath */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resources
init|=
literal|null
decl_stmt|;
comment|/* resourcePath --> resourceURI */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resourcesInverted
init|=
literal|null
decl_stmt|;
comment|/*      * the type of the resource could be values attributed by the static variables: CLASS_RESOURCE,      * DATA_PROPERTY_RESOURCE, OBJECT_PROPERTY_RESOURCE and INDIVIDUAL_RESOURCE      */
comment|/* resourceURI --> resourceType */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resourcesTypes
init|=
literal|null
decl_stmt|;
comment|/*      * private variable to store the mapping between resource URI - ontology URI, where the resource belongs      * to that ontology      */
comment|/* resourceURI --> ontologyURI */
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resourceToOntologyURIs
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|ResourceManagerImp
name|INSTANCE
init|=
literal|null
decl_stmt|;
specifier|private
name|void
name|restore
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|boolean
name|ontologiesTableExist
init|=
name|checkTableExists
argument_list|(
name|con
argument_list|,
name|ontologiesTable
argument_list|)
decl_stmt|;
name|boolean
name|resourceTableExist
init|=
name|checkTableExists
argument_list|(
name|con
argument_list|,
name|resourcesTable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ontologiesTableExist
condition|)
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE resource_manager_ontologies ("
operator|+
literal|"id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),"
operator|+
literal|"ontologyURI varchar(255) DEFAULT NULL,"
operator|+
literal|"ontologyPath varchar(255) DEFAULT NULL,"
operator|+
literal|"PRIMARY KEY (id)"
operator|+
literal|")"
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resourceTableExist
condition|)
block|{
comment|// the table does not exist
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"CREATE TABLE resource_manager_resources ("
operator|+
literal|"id INTEGER DEFAULT NULL,"
operator|+
literal|"resourceURI varchar(255) DEFAULT NULL,"
operator|+
literal|"resourcePath varchar(255) DEFAULT NULL,"
operator|+
literal|"resourceType varchar(255) DEFAULT NULL"
operator|+
literal|") "
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|ontologiesTable
argument_list|)
decl_stmt|;
while|while
condition|(
name|rSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ontologyURI
init|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"ontologyURI"
argument_list|)
decl_stmt|;
name|String
name|ontologyPath
init|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"ontologyPath"
argument_list|)
decl_stmt|;
name|ontologies
operator|.
name|put
argument_list|(
name|ontologyURI
argument_list|,
name|ontologyPath
argument_list|)
expr_stmt|;
name|ontologiesInverted
operator|.
name|put
argument_list|(
name|ontologyPath
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
name|Statement
name|statement2
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rSet2
init|=
name|statement2
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * from "
operator|+
name|resourcesTable
argument_list|)
decl_stmt|;
while|while
condition|(
name|rSet2
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|resourceURI
init|=
name|rSet2
operator|.
name|getString
argument_list|(
literal|"resourceURI"
argument_list|)
decl_stmt|;
name|String
name|resourcePath
init|=
name|rSet2
operator|.
name|getString
argument_list|(
literal|"resourcePath"
argument_list|)
decl_stmt|;
name|String
name|resourceType
init|=
name|rSet2
operator|.
name|getString
argument_list|(
literal|"resourceType"
argument_list|)
decl_stmt|;
name|String
name|ontologyTableRowRef
init|=
name|rSet2
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|Statement
name|statement3
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rSet3
init|=
name|statement3
operator|.
name|executeQuery
argument_list|(
literal|"SELECT * from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE id="
operator|+
name|ontologyTableRowRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|rSet3
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ontologyURIForResource
init|=
name|rSet3
operator|.
name|getString
argument_list|(
literal|"ontologyURI"
argument_list|)
decl_stmt|;
name|String
name|ontologyPathForResource
init|=
name|rSet3
operator|.
name|getString
argument_list|(
literal|"ontologyPath"
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|ontologyURIForResource
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|,
name|resourcePath
argument_list|)
expr_stmt|;
name|resourcesInverted
operator|.
name|put
argument_list|(
name|ontologyPathForResource
operator|+
literal|"#"
operator|+
name|resourcePath
argument_list|,
name|resourceURI
argument_list|)
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|put
argument_list|(
name|resourceURI
argument_list|,
name|ontologyURIForResource
argument_list|)
expr_stmt|;
name|resourcesTypes
operator|.
name|put
argument_list|(
name|ontologyURIForResource
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|,
name|resourceType
argument_list|)
expr_stmt|;
block|}
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Resource manager can not restore "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|checkTableExists
parameter_list|(
name|Connection
name|con
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// FIXME This should be done by jdbc's table functionality but it does
comment|// not seem to work with Apache Derby
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|stmtString
init|=
literal|"SELECT COUNT(*) FROM "
operator|+
name|tableName
decl_stmt|;
name|boolean
name|exists
init|=
literal|true
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|stmtString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|String
name|state
init|=
operator|(
name|e
operator|)
operator|.
name|getSQLState
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"42X05"
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
name|exists
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|exists
return|;
block|}
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not restore stored information"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Resource Manager properties are set"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceManagerImp
parameter_list|()
block|{
name|INSTANCE
operator|=
name|this
expr_stmt|;
name|ontologies
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|ontologiesInverted
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|resources
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|resourcesInverted
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|resourceToOntologyURIs
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|resourcesTypes
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|ResourceManagerImp
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|ResourceManagerImp
argument_list|()
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * registerOntology(java.lang.String)      */
specifier|public
name|void
name|registerOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|ontologies
operator|.
name|containsKey
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|String
name|ontologyPath
init|=
name|normalizeURI
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|ontologies
operator|.
name|put
argument_list|(
name|ontologyURI
argument_list|,
name|ontologyPath
argument_list|)
expr_stmt|;
name|ontologiesInverted
operator|.
name|put
argument_list|(
name|ontologyPath
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|ontologiesTable
operator|+
literal|" (ontologyURI, ontologyPath) VALUES ('"
operator|+
name|ontologyURI
operator|+
literal|"', '"
operator|+
name|ontologyPath
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager# registerClass(java.lang.String,      * java.lang.String)      */
specifier|public
name|void
name|registerClass
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|classURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|resources
operator|.
name|containsKey
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|classURI
argument_list|)
condition|)
block|{
name|String
name|classPath
init|=
name|normalizeURI
argument_list|(
name|classURI
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|classURI
argument_list|,
name|classPath
argument_list|)
expr_stmt|;
name|resourcesInverted
operator|.
name|put
argument_list|(
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"#"
operator|+
name|classPath
argument_list|,
name|classURI
argument_list|)
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|put
argument_list|(
name|classURI
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|resourcesTypes
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|classURI
argument_list|,
name|CLASS_RESOURCE
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT id from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE ontologyURI='"
operator|+
name|ontologyURI
operator|+
literal|"'"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ontologyRowID
init|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|resourcesTable
operator|+
literal|" (id, resourceURI, resourcePath, resourceType) VALUES ("
operator|+
name|ontologyRowID
operator|+
literal|", '"
operator|+
name|classURI
operator|+
literal|"', '"
operator|+
name|classPath
operator|+
literal|"', '"
operator|+
name|CLASS_RESOURCE
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * registerDatatypeProperty(java.lang.String, java.lang.String)      */
specifier|public
name|void
name|registerDatatypeProperty
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|dataPropertyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|resources
operator|.
name|containsKey
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|dataPropertyURI
argument_list|)
condition|)
block|{
name|String
name|dataPropertyPath
init|=
name|normalizeURI
argument_list|(
name|dataPropertyURI
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|dataPropertyURI
argument_list|,
name|dataPropertyPath
argument_list|)
expr_stmt|;
name|resourcesInverted
operator|.
name|put
argument_list|(
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"#"
operator|+
name|dataPropertyPath
argument_list|,
name|dataPropertyURI
argument_list|)
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|put
argument_list|(
name|dataPropertyURI
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|resourcesTypes
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|dataPropertyURI
argument_list|,
name|DATA_PROPERTY_RESOURCE
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT id from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE ontologyURI='"
operator|+
name|ontologyURI
operator|+
literal|"'"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ontologyRowID
init|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|resourcesTable
operator|+
literal|" (id, resourceURI, resourcePath, resourceType) VALUES ("
operator|+
name|ontologyRowID
operator|+
literal|", '"
operator|+
name|dataPropertyURI
operator|+
literal|"', '"
operator|+
name|dataPropertyPath
operator|+
literal|"', '"
operator|+
name|DATA_PROPERTY_RESOURCE
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * registerObjectProperty(java.lang.String, java.lang.String)      */
specifier|public
name|void
name|registerObjectProperty
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|objectPropertyURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|resources
operator|.
name|containsKey
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|objectPropertyURI
argument_list|)
condition|)
block|{
name|String
name|objectPropertyPath
init|=
name|normalizeURI
argument_list|(
name|objectPropertyURI
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|objectPropertyURI
argument_list|,
name|objectPropertyPath
argument_list|)
expr_stmt|;
name|resourcesInverted
operator|.
name|put
argument_list|(
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"#"
operator|+
name|objectPropertyPath
argument_list|,
name|objectPropertyURI
argument_list|)
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|put
argument_list|(
name|objectPropertyURI
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|resourcesTypes
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|objectPropertyURI
argument_list|,
name|OBJECT_PROPERTY_RESOURCE
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT id from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE ontologyURI='"
operator|+
name|ontologyURI
operator|+
literal|"'"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ontologyRowID
init|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
literal|"INSERT INTO "
operator|+
name|resourcesTable
operator|+
literal|" (id, resourceURI, resourcePath, resourceType) VALUES ("
operator|+
name|ontologyRowID
operator|+
literal|", '"
operator|+
name|objectPropertyURI
operator|+
literal|"', '"
operator|+
name|objectPropertyPath
operator|+
literal|"', '"
operator|+
name|OBJECT_PROPERTY_RESOURCE
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * registerIndividual(java.lang.String, java.lang.String)      */
specifier|public
name|void
name|registerIndividual
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|individualURI
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|resources
operator|.
name|containsKey
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|individualURI
argument_list|)
condition|)
block|{
name|String
name|individualPath
init|=
name|normalizeURI
argument_list|(
name|individualURI
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|individualURI
argument_list|,
name|individualPath
argument_list|)
expr_stmt|;
name|resourcesInverted
operator|.
name|put
argument_list|(
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"#"
operator|+
name|individualPath
argument_list|,
name|individualURI
argument_list|)
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|put
argument_list|(
name|individualURI
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|resourcesTypes
operator|.
name|put
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|individualURI
argument_list|,
name|INDIVIDUAL_RESOURCE
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SELECT id from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE ontologyURI='"
operator|+
name|ontologyURI
operator|+
literal|"'"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|ontologyRowID
init|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|statementstr
init|=
literal|"INSERT INTO "
operator|+
name|resourcesTable
operator|+
literal|" (id, resourceURI, resourcePath, resourceType) VALUES ("
operator|+
name|ontologyRowID
operator|+
literal|", '"
operator|+
name|individualURI
operator|+
literal|"', '"
operator|+
name|individualPath
operator|+
literal|"', '"
operator|+
name|INDIVIDUAL_RESOURCE
operator|+
literal|"')"
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
name|statementstr
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see      *       * org.apache.stanbol.persistencestore.rest.IResourceManager#hasOntology (java.lang.String)      */
specifier|public
name|boolean
name|hasOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|boolean
name|result
init|=
name|ontologies
operator|.
name|containsKey
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager# getOntologyPath(java.lang.String)      */
specifier|public
name|String
name|getOntologyPath
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontologies
operator|.
name|containsKey
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|result
operator|=
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * getOntologyFullPath(java.lang.String)      */
specifier|public
name|String
name|getOntologyFullPath
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontologies
operator|.
name|containsKey
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|result
operator|=
name|ontologyPathPrefix
operator|+
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * getResourceFullPath(java.lang.String)      */
specifier|public
name|String
name|getResourceFullPath
parameter_list|(
name|String
name|resourceURI
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|String
name|ontologyURI
init|=
name|resourceToOntologyURIs
operator|.
name|get
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologies
operator|.
name|containsKey
argument_list|(
name|ontologyURI
argument_list|)
operator|&&
name|resources
operator|.
name|containsKey
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|)
condition|)
block|{
name|String
name|resourceType
init|=
name|resourcesTypes
operator|.
name|get
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|)
decl_stmt|;
name|String
name|pathPrefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceType
operator|.
name|equalsIgnoreCase
argument_list|(
name|CLASS_RESOURCE
argument_list|)
condition|)
block|{
name|pathPrefix
operator|=
name|classPathPrefix
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceType
operator|.
name|equalsIgnoreCase
argument_list|(
name|OBJECT_PROPERTY_RESOURCE
argument_list|)
condition|)
block|{
name|pathPrefix
operator|=
name|objectPropertyPathPrefix
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceType
operator|.
name|equalsIgnoreCase
argument_list|(
name|DATA_PROPERTY_RESOURCE
argument_list|)
condition|)
block|{
name|pathPrefix
operator|=
name|dataPropertyPathPrefix
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceType
operator|.
name|equalsIgnoreCase
argument_list|(
name|INDIVIDUAL_RESOURCE
argument_list|)
condition|)
block|{
name|pathPrefix
operator|=
name|individualPathPrefix
expr_stmt|;
block|}
name|result
operator|=
name|ontologyPathPrefix
operator|+
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"/"
operator|+
name|pathPrefix
operator|+
name|resources
operator|.
name|get
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * getOntologyURIForPath(java.lang.String)      */
specifier|public
name|String
name|getOntologyURIForPath
parameter_list|(
name|String
name|ontologyPath
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ontologiesInverted
operator|.
name|containsKey
argument_list|(
name|ontologyPath
argument_list|)
condition|)
block|{
name|result
operator|=
name|ontologiesInverted
operator|.
name|get
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * getResourceURIForPath(java.lang.String, java.lang.String)      */
specifier|public
name|String
name|getResourceURIForPath
parameter_list|(
name|String
name|ontologyPath
parameter_list|,
name|String
name|resourcePath
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourcesInverted
operator|.
name|containsKey
argument_list|(
name|ontologyPath
operator|+
literal|"#"
operator|+
name|resourcePath
argument_list|)
condition|)
block|{
name|result
operator|=
name|resourcesInverted
operator|.
name|get
argument_list|(
name|ontologyPath
operator|+
literal|"#"
operator|+
name|resourcePath
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager# getResourceType(java.lang.String)      */
specifier|public
name|String
name|getResourceType
parameter_list|(
name|String
name|resourceURI
parameter_list|)
block|{
name|String
name|result
init|=
name|resourcesTypes
operator|.
name|get
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager# removeOntology(java.lang.String)      */
specifier|public
name|void
name|removeOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
try|try
block|{
comment|// first clear hashtables
name|String
name|ontologyPath
init|=
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|ontologyPath
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Ontology {} already deleted "
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
return|return;
block|}
name|ontologies
operator|.
name|remove
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
name|ontologiesInverted
operator|.
name|remove
argument_list|(
name|ontologyPath
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keysToRemove
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|resources_keys
init|=
name|resources
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|resources_keys_itr
init|=
name|resources_keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resources_keys_itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|resources_keys_itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|keysToRemove
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|keysToRemoveItr
init|=
name|keysToRemove
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keysToRemoveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resources
operator|.
name|remove
argument_list|(
name|keysToRemoveItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keysToRemove
operator|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|resourcesInverted_keys
init|=
name|resourcesInverted
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|resourcesInverted_keys_itr
init|=
name|resourcesInverted_keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resourcesInverted_keys_itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|resourcesInverted_keys_itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|keysToRemove
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|keysToRemoveItr
operator|=
name|keysToRemove
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|keysToRemoveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resourcesInverted
operator|.
name|remove
argument_list|(
name|keysToRemoveItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keysToRemove
operator|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|resourcesTypes_keys
init|=
name|resourcesTypes
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|resourcesTypes_keys_itr
init|=
name|resourcesTypes_keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resourcesTypes_keys_itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|resourcesTypes_keys_itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|keysToRemove
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|keysToRemoveItr
operator|=
name|keysToRemove
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|keysToRemoveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resourcesTypes
operator|.
name|remove
argument_list|(
name|keysToRemoveItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keysToRemove
operator|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|resourceToOntologyURIs_keys
init|=
name|resourceToOntologyURIs
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|resourceToOntologyURIs_keys_itr
init|=
name|resourceToOntologyURIs_keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|resourceToOntologyURIs_keys_itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|resourceToOntologyURIs_keys_itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|resourceToOntologyURIs
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|keysToRemove
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|keysToRemoveItr
operator|=
name|keysToRemove
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|keysToRemoveItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|resourceToOntologyURIs
operator|.
name|remove
argument_list|(
name|keysToRemoveItr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then clear database
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"SELECT id from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE ontologyURI='"
operator|+
name|ontologyURI
operator|+
literal|"'"
decl_stmt|;
name|ResultSet
name|rSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|id
operator|=
name|rSet
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
name|statement
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"DELETE from "
operator|+
name|ontologiesTable
operator|+
literal|" WHERE id="
operator|+
name|id
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|statement
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|sql
operator|=
literal|"DELETE from "
operator|+
name|resourcesTable
operator|+
literal|" WHERE id="
operator|+
name|id
expr_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager# removeResource(java.lang.String)      */
specifier|public
name|void
name|removeResource
parameter_list|(
name|String
name|resourceURI
parameter_list|)
block|{
try|try
block|{
comment|// first clear hashtables
name|String
name|classPath
init|=
name|resources
operator|.
name|get
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|classPath
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Resource {} not found"
argument_list|,
name|resourceURI
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|ontologyURI
init|=
name|resourceToOntologyURIs
operator|.
name|get
argument_list|(
name|resourceURI
argument_list|)
decl_stmt|;
name|String
name|ontologyPath
init|=
name|ontologies
operator|.
name|get
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|resources
operator|.
name|remove
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|)
expr_stmt|;
name|resourcesInverted
operator|.
name|remove
argument_list|(
name|ontologyPath
operator|+
literal|"#"
operator|+
name|classPath
argument_list|)
expr_stmt|;
name|resourcesTypes
operator|.
name|remove
argument_list|(
name|ontologyURI
operator|+
literal|"#"
operator|+
name|resourceURI
argument_list|)
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|remove
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
comment|// then clear database
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"DELETE from "
operator|+
name|resourcesTable
operator|+
literal|" WHERE resourceURI='"
operator|+
name|resourceURI
operator|+
literal|"'"
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager#      * resolveOntologyURIFromResourceURI(java.lang.String)      */
specifier|public
name|String
name|resolveOntologyURIFromResourceURI
parameter_list|(
name|String
name|resourceURI
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceToOntologyURIs
operator|.
name|containsKey
argument_list|(
name|resourceURI
argument_list|)
condition|)
block|{
name|result
operator|=
name|resourceToOntologyURIs
operator|.
name|get
argument_list|(
name|resourceURI
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @seeeu.iksproject.fise.stores.persistencestore.rest.IResourceManager# clearResourceManager()      */
specifier|public
name|void
name|clearResourceManager
parameter_list|()
block|{
try|try
block|{
comment|// first clear hashtables
name|ontologies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ontologiesInverted
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resources
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourcesInverted
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourcesTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourceToOntologyURIs
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// then clear database
name|Connection
name|con
init|=
name|obtainConnection
argument_list|()
decl_stmt|;
name|boolean
name|ontologiesTableExists
init|=
name|checkTableExists
argument_list|(
name|con
argument_list|,
name|ontologiesTable
argument_list|)
decl_stmt|;
name|boolean
name|resourceTableExists
init|=
name|checkTableExists
argument_list|(
name|con
argument_list|,
name|resourcesTable
argument_list|)
decl_stmt|;
name|Statement
name|statement
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ontologiesTableExists
condition|)
block|{
name|String
name|sql1
init|=
literal|"DELETE  FROM "
operator|+
name|ontologiesTable
decl_stmt|;
name|statement
operator|.
name|executeUpdate
argument_list|(
name|sql1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceTableExists
condition|)
block|{
name|statement
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|String
name|sql2
init|=
literal|"DELETE FROM "
operator|+
name|resourcesTable
decl_stmt|;
name|statement
operator|.
name|execute
argument_list|(
name|sql2
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Connection Closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Connection
name|obtainConnection
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
throws|,
name|SQLException
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|DB_URL
argument_list|)
return|;
block|}
specifier|private
name|String
name|normalizeURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// FIXME Find a solution to # problem
return|return
name|uri
operator|.
name|replace
argument_list|(
literal|"#"
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|convertEntityRelativePathToURI
parameter_list|(
name|String
name|entityPath
parameter_list|)
block|{
return|return
name|entityPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|entityPath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|+
literal|"#"
operator|+
name|entityPath
operator|.
name|substring
argument_list|(
name|entityPath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

