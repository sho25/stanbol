begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|writers
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SerializingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
operator|.
name|JsonLd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
operator|.
name|JsonLdResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements a<a href="http://json-ld.org/">JSON-LD</a> serialization of a Clerezza  * {@link TripleCollection}.<br>  *  * @scr.component immediate="true"  * @scr.service  *                 interface="org.apache.clerezza.rdf.core.serializedform.SerializingProvider"  */
end_comment

begin_class
annotation|@
name|SupportedFormat
argument_list|(
name|JsonLdSerializerProvider
operator|.
name|SUPPORTED_FORMAT
argument_list|)
specifier|public
class|class
name|JsonLdSerializerProvider
implements|implements
name|SerializingProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SUPPORTED_FORMAT
init|=
name|APPLICATION_JSON
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RDF_NS_TYPE
init|=
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonLdSerializerProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Map from Namespace -> to Prefix
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|indentation
init|=
literal|2
decl_stmt|;
specifier|private
name|boolean
name|useTypeCoercion
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|OutputStream
name|serializedGraph
parameter_list|,
name|TripleCollection
name|tc
parameter_list|,
name|String
name|formatIdentifier
parameter_list|)
block|{
if|if
condition|(
operator|!
name|formatIdentifier
operator|.
name|equals
argument_list|(
name|SUPPORTED_FORMAT
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"serialize() the format '"
operator|+
name|formatIdentifier
operator|+
literal|"' is not supported by this implementation"
argument_list|)
expr_stmt|;
return|return;
block|}
name|JsonLd
name|jsonLd
init|=
operator|new
name|JsonLd
argument_list|()
decl_stmt|;
comment|// If there is no namespace prefix map set, we use the namespaces
comment|// known from the NamespaceEnum
if|if
condition|(
name|this
operator|.
name|namespacePrefixMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|NamespaceEnum
name|ns
range|:
name|NamespaceEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Adding JSON-LD namespace "
operator|+
name|ns
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|ns
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|namespacePrefixMap
operator|.
name|put
argument_list|(
name|ns
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|ns
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|jsonLd
operator|.
name|setNamespacePrefixMap
argument_list|(
name|this
operator|.
name|namespacePrefixMap
argument_list|)
expr_stmt|;
name|jsonLd
operator|.
name|setUseTypeCoercion
argument_list|(
name|this
operator|.
name|useTypeCoercion
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NonLiteral
argument_list|,
name|String
argument_list|>
name|subjects
init|=
name|createSubjectsMap
argument_list|(
name|tc
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|subject
range|:
name|subjects
operator|.
name|keySet
argument_list|()
control|)
block|{
name|JsonLdResource
name|resource
init|=
operator|new
name|JsonLdResource
argument_list|()
decl_stmt|;
name|String
name|strSubject
init|=
name|subject
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|instanceof
name|UriRef
condition|)
block|{
name|UriRef
name|uri
init|=
operator|(
name|UriRef
operator|)
name|subject
decl_stmt|;
name|strSubject
operator|=
name|uri
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
name|resource
operator|.
name|setSubject
argument_list|(
name|strSubject
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triplesFromSubject
init|=
name|tc
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|triplesFromSubject
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|currentTriple
init|=
name|triplesFromSubject
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTriple
operator|.
name|getPredicate
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
operator|.
name|equals
argument_list|(
name|RDF_NS_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"serialize() adding rdf:type: \"a\":"
operator|+
name|currentTriple
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|addType
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|currentTriple
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"serializer() adding predicate "
operator|+
name|currentTriple
operator|.
name|getPredicate
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" with object "
operator|+
name|currentTriple
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|property
init|=
name|currentTriple
operator|.
name|getPredicate
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|String
name|strValue
init|=
name|currentTriple
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTriple
operator|.
name|getObject
argument_list|()
operator|instanceof
name|TypedLiteral
condition|)
block|{
name|TypedLiteral
name|typedObject
init|=
operator|(
name|TypedLiteral
operator|)
name|currentTriple
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|typedObject
operator|.
name|getDataType
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|strValue
operator|=
name|typedObject
operator|.
name|getLexicalForm
argument_list|()
expr_stmt|;
name|resource
operator|.
name|putPropertyType
argument_list|(
name|property
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentTriple
operator|.
name|getObject
argument_list|()
operator|instanceof
name|UriRef
condition|)
block|{
name|UriRef
name|uriRef
init|=
operator|(
name|UriRef
operator|)
name|currentTriple
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|resource
operator|.
name|putPropertyType
argument_list|(
name|property
argument_list|,
literal|"@iri"
argument_list|)
expr_stmt|;
name|strValue
operator|=
name|uriRef
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
name|resource
operator|.
name|putProperty
argument_list|(
name|property
argument_list|,
name|convertValueType
argument_list|(
name|strValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|jsonLd
operator|.
name|put
argument_list|(
name|resource
operator|.
name|getSubject
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|serializedGraph
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|jsonLd
operator|.
name|toString
argument_list|(
name|this
operator|.
name|indentation
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|NonLiteral
argument_list|,
name|String
argument_list|>
name|createSubjectsMap
parameter_list|(
name|TripleCollection
name|tc
parameter_list|)
block|{
name|Map
argument_list|<
name|NonLiteral
argument_list|,
name|String
argument_list|>
name|subjects
init|=
operator|new
name|HashMap
argument_list|<
name|NonLiteral
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|bNodeCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Triple
name|triple
range|:
name|tc
control|)
block|{
name|NonLiteral
name|subject
init|=
name|triple
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|subjects
operator|.
name|containsKey
argument_list|(
name|subject
argument_list|)
condition|)
block|{
if|if
condition|(
name|subject
operator|instanceof
name|UriRef
condition|)
block|{
name|subjects
operator|.
name|put
argument_list|(
name|subject
argument_list|,
name|subject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|instanceof
name|BNode
condition|)
block|{
name|bNodeCounter
operator|++
expr_stmt|;
name|subjects
operator|.
name|put
argument_list|(
name|subject
argument_list|,
literal|"_:bnode"
operator|+
name|bNodeCounter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|subjects
return|;
block|}
specifier|private
name|Object
name|convertValueType
parameter_list|(
name|String
name|strValue
parameter_list|)
block|{
comment|// check if value can be interpreted as integer
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|strValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
empty_stmt|;
comment|// check if value can be interpreted as boolean
if|if
condition|(
name|strValue
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|||
name|strValue
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|strValue
argument_list|)
return|;
block|}
return|return
name|strValue
return|;
block|}
comment|/**      * Get the known namespace to prefix mapping.      *      * @return A {@link Map} from namespace String to prefix String.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespacePrefixMap
parameter_list|()
block|{
return|return
name|namespacePrefixMap
return|;
block|}
comment|/**      * Sets the known namespaces for the serializer.      *      * @param knownNamespaces A {@link Map} from namespace String to prefix String.      */
specifier|public
name|void
name|setNamespacePrefixMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|knownNamespaces
parameter_list|)
block|{
name|this
operator|.
name|namespacePrefixMap
operator|=
name|knownNamespaces
expr_stmt|;
block|}
comment|/**      * Returns the current number of space characters which are used      * to indent the serialized output.      *      * @return Number of space characters used for indentation.      */
specifier|public
name|int
name|getIndentation
parameter_list|()
block|{
return|return
name|indentation
return|;
block|}
comment|/**      * Sets the number of characters used per indentation level for the serialized output.<br />      * Set this value to zero (0) if you don't want indentation. Default value is 2.      *      * @param indentation Number of space characters used for indentation.      */
specifier|public
name|void
name|setIndentation
parameter_list|(
name|int
name|indentation
parameter_list|)
block|{
name|this
operator|.
name|indentation
operator|=
name|indentation
expr_stmt|;
block|}
comment|/**      * Check if JSON-LD type coercion is applied on serialization.      *       * @return      */
specifier|public
name|boolean
name|isUseTypeCoercion
parameter_list|()
block|{
return|return
name|useTypeCoercion
return|;
block|}
comment|/**      * If JSON-LD type coercion should be applied set this      * to<code>true</code>.      *       * @param useTypeCoercion      */
specifier|public
name|void
name|setUseTypeCoercion
parameter_list|(
name|boolean
name|useTypeCoercion
parameter_list|)
block|{
name|this
operator|.
name|useTypeCoercion
operator|=
name|useTypeCoercion
expr_stmt|;
block|}
block|}
end_class

end_unit

