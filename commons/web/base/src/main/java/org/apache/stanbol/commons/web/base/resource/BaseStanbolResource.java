begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|LinkResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|NavigationLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ScriptResource
import|;
end_import

begin_comment
comment|/**  * Mixin class to provide the controller method for the navigation template.  *   * TODO: make the list of menu items dynamically contributed by WebFragments from the OSGi runtime.  */
end_comment

begin_class
specifier|public
class|class
name|BaseStanbolResource
block|{
specifier|public
specifier|static
specifier|final
name|String
name|LINK_RESOURCES
init|=
literal|"org.apache.stanbol.commons.web.base.resource.links"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_RESOURCES
init|=
literal|"org.apache.stanbol.commons.web.base.resource.scripts"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STATIC_RESOURCES_ROOT_URL
init|=
literal|"org.apache.stanbol.commons.web.base.resource.static.root"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAVIGATION_LINKS
init|=
literal|"org.apache.stanbol.commons.web.base.navigation.link"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_URL
init|=
literal|"org.apache.stanbol.commons.web.base.root"
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|UriInfo
name|uriInfo
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|public
name|URI
name|getPublicBaseUri
parameter_list|()
block|{
return|return
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
return|;
block|}
comment|/**      * @return the sorted list of navigation links data transfer objects      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|NavigationLink
argument_list|>
name|getNavigationLinks
parameter_list|()
block|{
return|return
operator|(
name|List
argument_list|<
name|NavigationLink
argument_list|>
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|NAVIGATION_LINKS
argument_list|)
return|;
block|}
comment|/**      * @return menu items with "selected" CSS class for the active link precomputed where applicable      */
specifier|public
name|List
argument_list|<
name|MenuItem
argument_list|>
name|getMainMenuItems
parameter_list|()
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|MenuItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NavigationLink
name|link
range|:
name|getNavigationLinks
argument_list|()
control|)
block|{
name|items
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
name|link
operator|.
name|label
argument_list|,
name|link
operator|.
name|path
argument_list|,
name|uriInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
specifier|public
specifier|static
class|class
name|MenuItem
block|{
specifier|public
name|MenuItem
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|link
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
if|if
condition|(
name|link
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|link
operator|=
name|link
expr_stmt|;
name|cssClass
operator|=
name|uriInfo
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|link
argument_list|)
condition|?
literal|"selected"
else|:
literal|"unselected"
expr_stmt|;
block|}
specifier|protected
specifier|final
name|String
name|label
decl_stmt|;
specifier|protected
specifier|final
name|String
name|link
decl_stmt|;
specifier|protected
specifier|final
name|String
name|cssClass
decl_stmt|;
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
name|String
name|getLink
parameter_list|()
block|{
return|return
name|link
return|;
block|}
specifier|public
name|String
name|getCssClass
parameter_list|()
block|{
return|return
name|cssClass
return|;
block|}
block|}
specifier|public
name|String
name|getRootUrl
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|ROOT_URL
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStaticRootUrl
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|STATIC_RESOURCES_ROOT_URL
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|LinkResource
argument_list|>
name|getRegisteredLinkResources
parameter_list|()
block|{
if|if
condition|(
name|servletContext
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|LinkResource
argument_list|>
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|LINK_RESOURCES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|ScriptResource
argument_list|>
name|getRegisteredScriptResources
parameter_list|()
block|{
if|if
condition|(
name|servletContext
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|ScriptResource
argument_list|>
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|SCRIPT_RESOURCES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

