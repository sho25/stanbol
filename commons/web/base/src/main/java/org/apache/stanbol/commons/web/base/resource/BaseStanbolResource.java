begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|LinkResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|NavigationLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ScriptResource
import|;
end_import

begin_comment
comment|/**  * Mixin class to provide the controller method for the navigation template.  *   * TODO: make the list of menu items dynamically contributed by WebFragments from the OSGi runtime.  */
end_comment

begin_class
specifier|public
class|class
name|BaseStanbolResource
block|{
specifier|public
specifier|static
specifier|final
name|String
name|LINK_RESOURCES
init|=
literal|"org.apache.stanbol.commons.web.base.resource.links"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_RESOURCES
init|=
literal|"org.apache.stanbol.commons.web.base.resource.scripts"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STATIC_RESOURCES_ROOT_URL
init|=
literal|"org.apache.stanbol.commons.web.base.resource.static.root"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAVIGATION_LINKS
init|=
literal|"org.apache.stanbol.commons.web.base.navigation.link"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_URL
init|=
literal|"org.apache.stanbol.commons.web.base.root"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_CONSOLE
init|=
literal|"system/console"
decl_stmt|;
annotation|@
name|Context
specifier|protected
name|UriInfo
name|uriInfo
decl_stmt|;
specifier|public
name|URI
name|getRequestUri
parameter_list|()
block|{
return|return
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|public
name|URI
name|getPublicBaseUri
parameter_list|()
block|{
return|return
name|uriInfo
operator|.
name|getBaseUri
argument_list|()
return|;
block|}
comment|/**      * The Apache Felix Webconsole base URL does not depend on alias configured      * for the Stanbol JerseyEndpoint. However they is affected by the base      * path of the Servlet when Stanbol is running as WAR within a web container.<p>      *<i>LIMITATION</i> this does not take into account the path configured      * for the Apache Felix Webconsole (property:<code>manager.root</code>       * class:<code>org.apache.felix.webconsole.internal.servlet.OsgiManager</code>)      * Because of this it will only work with the default {@link #SYSTEM_CONSOLE}.      * @return The URI for the Apache Felix Webconsole      */
comment|/*public URI getConsoleBaseUri() {         String root = getRootUrl();         UriBuilder consolePathBuilder;         if(StringUtils.isNotBlank(root)&& !"/".equals(root)){             String request = uriInfo.getRequestUri().toString();             int aliasIndex = request.lastIndexOf(root);             if(aliasIndex> 0) {                 request = request.substring(0, request.lastIndexOf(root));             }             consolePathBuilder = UriBuilder.fromUri(request);         } else {             consolePathBuilder = uriInfo.getRequestUriBuilder();         }                      if (this.getClass().isAnnotationPresent(Path.class)) {         	String path = this.getClass().getAnnotation(Path.class).value();         	int levels = (path.endsWith("/") ? StringUtils.countMatches(path, "/")-1 : StringUtils.countMatches(path, "/"));         	for (int i=levels; i>0; i--) {         		consolePathBuilder = consolePathBuilder.path("../");         	}         }              	return consolePathBuilder.path(SYSTEM_CONSOLE).build();     }*/
comment|/**      * @return the sorted list of navigation links data transfer objects      */
comment|/*@SuppressWarnings("unchecked")     public List<NavigationLink> getNavigationLinks() {         return (List<NavigationLink>) servletContext.getAttribute(NAVIGATION_LINKS);     }*/
comment|/**      * @return menu items with "selected" CSS class for the active link precomputed where applicable      */
comment|/*public List<MenuItem> getMainMenuItems() {         List<MenuItem> items = new ArrayList<MenuItem>();         for (NavigationLink link : getNavigationLinks()) {             items.add(new MenuItem(link.getLabel(), link.getPath(), uriInfo));         }         return items;     }*/
specifier|public
specifier|static
class|class
name|MenuItem
block|{
specifier|public
name|MenuItem
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|link
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
if|if
condition|(
name|link
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|link
operator|=
name|link
expr_stmt|;
name|cssClass
operator|=
name|uriInfo
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|link
argument_list|)
condition|?
literal|"selected"
else|:
literal|"unselected"
expr_stmt|;
block|}
specifier|protected
specifier|final
name|String
name|label
decl_stmt|;
specifier|protected
specifier|final
name|String
name|link
decl_stmt|;
specifier|protected
specifier|final
name|String
name|cssClass
decl_stmt|;
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
name|String
name|getLink
parameter_list|()
block|{
return|return
name|link
return|;
block|}
specifier|public
name|String
name|getCssClass
parameter_list|()
block|{
return|return
name|cssClass
return|;
block|}
block|}
comment|/*public String getRootUrl() {         return (String) servletContext.getAttribute(ROOT_URL);     }      public String getStaticRootUrl() {         String baseURI = getPublicBaseUri().toString();         return baseURI.substring(0, baseURI.length() - 1)                + (String) servletContext.getAttribute(STATIC_RESOURCES_ROOT_URL);     }      @SuppressWarnings("unchecked")     public List<LinkResource> getRegisteredLinkResources() {         if (servletContext != null) {             return (List<LinkResource>) servletContext.getAttribute(LINK_RESOURCES);         } else {             return Collections.emptyList();         }     }      @SuppressWarnings("unchecked")     public List<ScriptResource> getRegisteredScriptResources() {         if (servletContext != null) {             return (List<ScriptResource>) servletContext.getAttribute(SCRIPT_RESOURCES);         } else {             return Collections.emptyList();         }     }*/
block|}
end_class

end_unit

