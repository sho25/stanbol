begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|PlainLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|SolutionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
class|class
name|ResultSetToXml
block|{
specifier|private
specifier|final
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Document
name|toDocument
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
specifier|final
name|Document
name|doc
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
decl_stmt|;
comment|// root element
name|Element
name|root
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"sparql"
argument_list|)
decl_stmt|;
name|root
operator|.
name|setAttribute
argument_list|(
literal|"xmlns"
argument_list|,
literal|"http://www.w3.org/2005/sparql-results#"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Element
name|head
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"head"
argument_list|)
decl_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|head
argument_list|)
expr_stmt|;
comment|// result set
name|Element
name|results
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"results"
argument_list|)
decl_stmt|;
name|SolutionMapping
name|solutionMapping
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|solutionMapping
operator|=
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|createResultElement
argument_list|(
name|solutionMapping
argument_list|,
name|results
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|createVariable
argument_list|(
name|solutionMapping
argument_list|,
name|head
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|private
name|void
name|createResultElement
parameter_list|(
name|SolutionMapping
name|solutionMap
parameter_list|,
name|Element
name|results
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|Set
argument_list|<
name|Variable
argument_list|>
name|keys
init|=
name|solutionMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Element
name|result
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"result"
argument_list|)
decl_stmt|;
name|results
operator|.
name|appendChild
argument_list|(
name|result
argument_list|)
expr_stmt|;
for|for
control|(
name|Variable
name|key
range|:
name|keys
control|)
block|{
name|Element
name|bindingElement
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"binding"
argument_list|)
decl_stmt|;
name|bindingElement
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingElement
operator|.
name|appendChild
argument_list|(
name|createValueElement
argument_list|(
operator|(
name|Resource
operator|)
name|solutionMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|appendChild
argument_list|(
name|bindingElement
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createVariable
parameter_list|(
name|SolutionMapping
name|solutionMap
parameter_list|,
name|Element
name|head
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
if|if
condition|(
name|solutionMap
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Variable
argument_list|>
name|keys
init|=
name|solutionMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Variable
name|key
range|:
name|keys
control|)
block|{
name|Element
name|varElement
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"variable"
argument_list|)
decl_stmt|;
name|varElement
operator|.
name|setAttribute
argument_list|(
literal|"name"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|head
operator|.
name|appendChild
argument_list|(
name|varElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Element
name|createValueElement
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|Element
name|value
decl_stmt|;
if|if
condition|(
name|resource
operator|instanceof
name|UriRef
condition|)
block|{
name|value
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"uri"
argument_list|)
expr_stmt|;
name|value
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
operator|(
operator|(
name|UriRef
operator|)
name|resource
operator|)
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|instanceof
name|TypedLiteral
condition|)
block|{
name|value
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
name|value
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
operator|(
operator|(
name|TypedLiteral
operator|)
name|resource
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|.
name|setAttribute
argument_list|(
literal|"datatype"
argument_list|,
operator|(
operator|(
operator|(
name|TypedLiteral
operator|)
name|resource
operator|)
operator|.
name|getDataType
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|instanceof
name|PlainLiteral
condition|)
block|{
name|value
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
name|value
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
operator|(
operator|(
name|PlainLiteral
operator|)
name|resource
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Language
name|lang
init|=
operator|(
operator|(
name|PlainLiteral
operator|)
name|resource
operator|)
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|setAttribute
argument_list|(
literal|"xml:lang"
argument_list|,
operator|(
name|lang
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|value
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"bnode"
argument_list|)
expr_stmt|;
name|value
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
operator|(
operator|(
name|BNode
operator|)
name|resource
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

