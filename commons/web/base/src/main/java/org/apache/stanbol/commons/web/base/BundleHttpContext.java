begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_comment
comment|/**  * Custom HTTP Context to lookup the resources from the classloader of the OSGi bundle.  */
end_comment

begin_class
specifier|public
class|class
name|BundleHttpContext
implements|implements
name|HttpContext
block|{
specifier|private
name|Bundle
name|bundle
decl_stmt|;
specifier|public
name|BundleHttpContext
parameter_list|(
name|WebFragment
name|fragment
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|fragment
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BundleHttpContext
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
block|}
specifier|public
name|String
name|getMimeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// someone in the chain seems to already be doing the Mime type mapping
return|return
literal|null
return|;
block|}
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|bundle
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|handleSecurity
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

