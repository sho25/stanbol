begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2013 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|LinkResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|NavigationLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ScriptResource
import|;
end_import

begin_comment
comment|/**  * Provides the method the common templates expect in the data object  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TemplateLayoutConfiguration
implements|implements
name|LayoutConfiguration
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_CONSOLE
init|=
literal|"system/console"
decl_stmt|;
comment|/**      * The Apache Felix Webconsole base URL does not depend on alias configured      * for the Stanbol JerseyEndpoint. However they is affected by the base      * path of the Servlet when Stanbol is running as WAR within a web container.<p>      *<i>LIMITATION</i> this does not take into account the path configured      * for the Apache Felix Webconsole (property:<code>manager.root</code>      * class:<code>org.apache.felix.webconsole.internal.servlet.OsgiManager</code>)      * Because of this it will only work with the default {@link #SYSTEM_CONSOLE}.      * @return The URI for the Apache Felix Webconsole      */
specifier|public
name|URI
name|getConsoleBaseUri
parameter_list|()
block|{
name|String
name|root
init|=
name|getRootUrl
argument_list|()
decl_stmt|;
name|UriBuilder
name|consolePathBuilder
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|root
argument_list|)
operator|&&
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|String
name|request
init|=
name|getUriInfo
argument_list|()
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|aliasIndex
init|=
name|request
operator|.
name|lastIndexOf
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasIndex
operator|>
literal|0
condition|)
block|{
name|request
operator|=
name|request
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|lastIndexOf
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consolePathBuilder
operator|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consolePathBuilder
operator|=
name|getUriInfo
argument_list|()
operator|.
name|getRequestUriBuilder
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|Path
operator|.
name|class
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Path
operator|.
name|class
argument_list|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|int
name|levels
init|=
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
operator|-
literal|1
else|:
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|levels
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|consolePathBuilder
operator|=
name|consolePathBuilder
operator|.
name|path
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|consolePathBuilder
operator|.
name|path
argument_list|(
name|SYSTEM_CONSOLE
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|LayoutConfiguration
name|getLayoutConfiguration
parameter_list|()
function_decl|;
comment|/**      * @return menu items with "selected" CSS class for the active link precomputed where applicable      */
specifier|public
name|List
argument_list|<
name|MenuItem
argument_list|>
name|getMainMenuItems
parameter_list|()
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|MenuItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NavigationLink
name|link
range|:
name|getNavigationLinks
argument_list|()
control|)
block|{
name|items
operator|.
name|add
argument_list|(
operator|new
name|MenuItem
argument_list|(
name|link
operator|.
name|getLabel
argument_list|()
argument_list|,
name|link
operator|.
name|getPath
argument_list|()
argument_list|,
name|getUriInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
comment|/**      * @return the sorted list of navigation links data transfer objects      */
specifier|public
name|List
argument_list|<
name|NavigationLink
argument_list|>
name|getNavigationLinks
parameter_list|()
block|{
return|return
name|getLayoutConfiguration
argument_list|()
operator|.
name|getNavigationLinks
argument_list|()
return|;
block|}
specifier|public
name|URI
name|getPublicBaseUri
parameter_list|()
block|{
if|if
condition|(
name|getUriInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UriInfo has not been injected"
argument_list|)
throw|;
block|}
return|return
name|getUriInfo
argument_list|()
operator|.
name|getBaseUri
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|LinkResource
argument_list|>
name|getRegisteredLinkResources
parameter_list|()
block|{
return|return
name|getLayoutConfiguration
argument_list|()
operator|.
name|getRegisteredLinkResources
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|ScriptResource
argument_list|>
name|getRegisteredScriptResources
parameter_list|()
block|{
return|return
name|getLayoutConfiguration
argument_list|()
operator|.
name|getRegisteredScriptResources
argument_list|()
return|;
block|}
specifier|public
name|URI
name|getRequestUri
parameter_list|()
block|{
if|if
condition|(
name|getUriInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"UriInfo has not been injected"
argument_list|)
throw|;
block|}
return|return
name|getUriInfo
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRootUrl
parameter_list|()
block|{
return|return
name|getLayoutConfiguration
argument_list|()
operator|.
name|getRootUrl
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStaticResourcesRootUrl
parameter_list|()
block|{
return|return
name|getLayoutConfiguration
argument_list|()
operator|.
name|getStaticResourcesRootUrl
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStaticRootUrl
parameter_list|()
block|{
name|String
name|baseURI
init|=
name|getPublicBaseUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|baseURI
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|baseURI
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|getStaticResourcesRootUrl
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|UriInfo
name|getUriInfo
parameter_list|()
function_decl|;
specifier|public
specifier|static
class|class
name|MenuItem
block|{
specifier|public
name|MenuItem
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|link
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
if|if
condition|(
name|link
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|link
operator|=
name|link
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|link
operator|=
name|link
expr_stmt|;
name|cssClass
operator|=
name|uriInfo
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|link
argument_list|)
condition|?
literal|"selected"
else|:
literal|"unselected"
expr_stmt|;
block|}
specifier|protected
specifier|final
name|String
name|label
decl_stmt|;
specifier|protected
specifier|final
name|String
name|link
decl_stmt|;
specifier|protected
specifier|final
name|String
name|cssClass
decl_stmt|;
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
name|String
name|getLink
parameter_list|()
block|{
return|return
name|link
return|;
block|}
specifier|public
name|String
name|getCssClass
parameter_list|()
block|{
return|return
name|cssClass
return|;
block|}
block|}
block|}
end_class

end_unit

