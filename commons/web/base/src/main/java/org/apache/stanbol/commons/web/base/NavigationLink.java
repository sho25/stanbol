begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
package|;
end_package

begin_comment
comment|/**  * Data transfer object to define an entry in the main navigation menu.  */
end_comment

begin_class
specifier|public
class|class
name|NavigationLink
implements|implements
name|Comparable
argument_list|<
name|NavigationLink
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|label
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|int
name|order
decl_stmt|;
specifier|private
specifier|final
name|String
name|htmlDescription
decl_stmt|;
specifier|public
name|NavigationLink
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|label
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|htmlDescription
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|NavigationLink
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|label
parameter_list|,
name|String
name|htmlDescription
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|htmlDescription
operator|=
name|htmlDescription
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|NavigationLink
name|other
parameter_list|)
block|{
return|return
name|order
operator|-
name|other
operator|.
name|order
return|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
comment|/**      * @return An English language description of the linked resource       */
specifier|public
name|String
name|getHtmlDescription
parameter_list|()
block|{
return|return
name|htmlDescription
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|label
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|label
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|path
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|path
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|NavigationLink
name|other
init|=
operator|(
name|NavigationLink
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|label
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|label
operator|.
name|equals
argument_list|(
name|other
operator|.
name|label
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|path
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|other
operator|.
name|path
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

