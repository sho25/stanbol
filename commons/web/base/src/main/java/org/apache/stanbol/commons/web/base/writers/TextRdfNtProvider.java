begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|writers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|ParsingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SerializingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * With Clerezza 1.0 the deprecated<code>text/rdf+nt</code> content type is no longer  * support. This provider allows the usage of this content type by forwarding the  * request to the provider registered for the new {@link SupportedFormat#N_TRIPLE} content type  * @author Rupert Westenthaler  *  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|SerializingProvider
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"supportedFormat"
argument_list|,
name|value
operator|=
block|{
name|SupportedFormat
operator|.
name|TEXT_RDF_NT
block|}
argument_list|)
annotation|@
name|SupportedFormat
argument_list|(
block|{
name|SupportedFormat
operator|.
name|TEXT_RDF_NT
block|}
argument_list|)
specifier|public
class|class
name|TextRdfNtProvider
implements|implements
name|SerializingProvider
implements|,
name|ParsingProvider
block|{
annotation|@
name|Reference
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Reference
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|Graph
name|tc
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|String
name|formatIdentifier
init|=
name|cleanFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|SupportedFormat
operator|.
name|TEXT_RDF_NT
operator|.
name|equals
argument_list|(
name|formatIdentifier
argument_list|)
condition|)
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|outputStream
argument_list|,
name|tc
argument_list|,
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This serializer only supports "
operator|+
name|SupportedFormat
operator|.
name|TEXT_RDF_NT
operator|+
literal|"(parsed: "
operator|+
name|format
operator|+
literal|" | format: "
operator|+
name|formatIdentifier
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|Graph
name|target
parameter_list|,
name|InputStream
name|serializedGraph
parameter_list|,
name|String
name|format
parameter_list|,
name|IRI
name|baseUri
parameter_list|)
block|{
name|String
name|formatIdentifier
init|=
name|cleanFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|SupportedFormat
operator|.
name|TEXT_RDF_NT
operator|.
name|equals
argument_list|(
name|formatIdentifier
argument_list|)
condition|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|target
argument_list|,
name|serializedGraph
argument_list|,
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|,
name|baseUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This serializer only supports "
operator|+
name|SupportedFormat
operator|.
name|TEXT_RDF_NT
operator|+
literal|"(parsed: "
operator|+
name|format
operator|+
literal|" | format: "
operator|+
name|formatIdentifier
operator|+
literal|")!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Used to strip parameters; ensure lower case and trim the media type      * @param formatIdentifier      * @return      */
specifier|private
specifier|static
name|String
name|cleanFormat
parameter_list|(
name|String
name|formatIdentifier
parameter_list|)
block|{
return|return
name|formatIdentifier
operator|==
literal|null
condition|?
literal|null
else|:
name|formatIdentifier
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
literal|2
argument_list|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cleanFormat
argument_list|(
literal|"text/rdf+nt;charset=UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

