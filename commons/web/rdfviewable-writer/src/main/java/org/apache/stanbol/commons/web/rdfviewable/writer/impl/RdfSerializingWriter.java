begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|rdfviewable
operator|.
name|writer
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|GraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|RdfViewable
import|;
end_import

begin_comment
comment|/**  * By default this returns a serialization of the context of the GraphNode. The  * template path of the RdfViewable is ignored.  *  * Same as with<code>org.apache.clerezza.jaxrs.rdf.providers</code> the   * expansion can be widened by using the query parameters xPropObj and  * xProSubj. These parameters specify property uris (both parameters might be  * repeated). For the specified properties their objects respectively subjects  * are expanded as if they were bnodes.  *   */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Provider
annotation|@
name|Produces
argument_list|(
block|{
name|SupportedFormat
operator|.
name|N3
block|,
name|SupportedFormat
operator|.
name|N_TRIPLE
block|,
name|SupportedFormat
operator|.
name|RDF_XML
block|,
name|SupportedFormat
operator|.
name|TURTLE
block|,
name|SupportedFormat
operator|.
name|X_TURTLE
block|,
name|SupportedFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
specifier|public
class|class
name|RdfSerializingWriter
implements|implements
name|MessageBodyWriter
argument_list|<
name|RdfViewable
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_EXP_PARAM
init|=
literal|"xPropObj"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBJ_EXP_PARAM
init|=
literal|"xPropSubj"
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Serializer
name|serializer
decl_stmt|;
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|RdfViewable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|(
name|RdfViewable
name|n
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|RdfViewable
name|v
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Type
name|genericType
parameter_list|,
name|Annotation
index|[]
name|annotations
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|,
name|OutputStream
name|entityStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|GraphNode
name|node
init|=
name|v
operator|.
name|getGraphNode
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|entityStream
argument_list|,
name|getExpandedContext
argument_list|(
name|node
argument_list|)
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Context
specifier|public
name|void
name|setUriInfo
parameter_list|(
name|UriInfo
name|uriInfo
parameter_list|)
block|{
name|this
operator|.
name|uriInfo
operator|=
name|uriInfo
expr_stmt|;
block|}
specifier|private
name|TripleCollection
name|getExpandedContext
parameter_list|(
name|GraphNode
name|node
parameter_list|)
block|{
specifier|final
name|TripleCollection
name|result
init|=
operator|new
name|SimpleMGraph
argument_list|(
name|node
operator|.
name|getNodeContext
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Resource
argument_list|>
name|expandedResources
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|expandedResources
operator|.
name|add
argument_list|(
name|node
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Set
argument_list|<
name|Resource
argument_list|>
name|additionalExpansionRes
init|=
name|getAdditionalExpansionResources
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|additionalExpansionRes
operator|.
name|removeAll
argument_list|(
name|expandedResources
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalExpansionRes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
for|for
control|(
name|Resource
name|resource
range|:
name|additionalExpansionRes
control|)
block|{
specifier|final
name|GraphNode
name|additionalNode
init|=
operator|new
name|GraphNode
argument_list|(
name|resource
argument_list|,
name|node
operator|.
name|getGraph
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|additionalNode
operator|.
name|getNodeContext
argument_list|()
argument_list|)
expr_stmt|;
name|expandedResources
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Set
argument_list|<
name|Resource
argument_list|>
name|getAdditionalExpansionResources
parameter_list|(
name|TripleCollection
name|tc
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|subjectExpansionProperties
init|=
name|getSubjectExpansionProperties
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|objectExpansionProperties
init|=
name|getObjectExpansionProperties
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Resource
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|subjectExpansionProperties
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|objectExpansionProperties
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|Triple
name|triple
range|:
name|tc
control|)
block|{
specifier|final
name|UriRef
name|predicate
init|=
name|triple
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectExpansionProperties
operator|.
name|contains
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|triple
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|objectExpansionProperties
operator|.
name|contains
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|triple
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Set
argument_list|<
name|UriRef
argument_list|>
name|getSubjectExpansionProperties
parameter_list|()
block|{
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paramValues
init|=
name|queryParams
operator|.
name|get
argument_list|(
name|SUBJ_EXP_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValues
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|paramValues
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|uriString
range|:
name|paramValues
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|UriRef
argument_list|(
name|uriString
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Set
argument_list|<
name|UriRef
argument_list|>
name|getObjectExpansionProperties
parameter_list|()
block|{
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paramValues
init|=
name|queryParams
operator|.
name|get
argument_list|(
name|OBJ_EXP_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramValues
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|final
name|Set
argument_list|<
name|UriRef
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|UriRef
argument_list|>
argument_list|(
name|paramValues
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|uriString
range|:
name|paramValues
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|UriRef
argument_list|(
name|uriString
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

