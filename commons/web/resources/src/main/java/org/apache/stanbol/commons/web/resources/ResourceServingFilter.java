begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_comment
comment|/**  * Serves resource in META-INF/services of any active bundle  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"pattern"
argument_list|,
name|value
operator|=
literal|".*"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"service.ranking"
argument_list|,
name|intValue
operator|=
literal|500
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ResourceServingFilter
implements|implements
name|Filter
implements|,
name|BundleListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE_PREFIX
init|=
literal|"META-INF/resources"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|RESOURCE_PREFIX_LENGTH
init|=
name|RESOURCE_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Bundle
argument_list|>
name|resourceProvidingBundles
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|path2Bundle
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
block|{
name|resourceProvidingBundles
operator|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
expr_stmt|;
name|path2Bundle
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|Bundle
index|[]
name|registeredBundles
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|registeredBundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|registeredBundles
index|[
name|i
index|]
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
name|registerResources
argument_list|(
name|registeredBundles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
specifier|final
name|ComponentContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|removeBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resourceProvidingBundles
operator|=
literal|null
expr_stmt|;
name|path2Bundle
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|doFilterHttp
argument_list|(
operator|(
name|HttpServletRequest
operator|)
name|request
argument_list|,
operator|(
name|HttpServletResponse
operator|)
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
specifier|private
specifier|synchronized
name|void
name|registerResources
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
comment|//TODO maybe bundle.getLastModified() could be used for modification data in http-headers, and for if-modified since negotiation
name|registerResourcesWithPathPrefix
argument_list|(
name|bundle
argument_list|,
name|RESOURCE_PREFIX
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerResourcesWithPathPrefix
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
specifier|final
name|Enumeration
argument_list|<
name|String
argument_list|>
name|resourceEnum
init|=
name|bundle
operator|.
name|getEntryPaths
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceEnum
operator|!=
literal|null
operator|&&
name|resourceEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|resourceProvidingBundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
while|while
condition|(
name|resourceEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|resourcePath
init|=
name|resourceEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourcePath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|registerResourcesWithPathPrefix
argument_list|(
name|bundle
argument_list|,
name|resourcePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path2Bundle
operator|.
name|put
argument_list|(
name|resourcePath
operator|.
name|substring
argument_list|(
name|RESOURCE_PREFIX_LENGTH
argument_list|)
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|doFilterHttp
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
specifier|final
name|String
name|requestPath
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|path2Bundle
operator|.
name|containsKey
argument_list|(
name|requestPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"GET"
argument_list|)
operator|||
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
name|Bundle
name|resourceBundle
init|=
name|path2Bundle
operator|.
name|get
argument_list|(
name|requestPath
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|resourceBundle
operator|.
name|getEntry
argument_list|(
name|RESOURCE_PREFIX
operator|+
name|requestPath
argument_list|)
decl_stmt|;
name|String
name|mediaType
init|=
name|URLConnection
operator|.
name|guessContentTypeFromName
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
comment|//TODO can we get the length of a resource without
comment|//TODO handle caching related headers
if|if
condition|(
operator|!
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
condition|)
block|{
name|OutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|ba
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|is
operator|.
name|read
argument_list|(
name|ba
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|ba
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|is
operator|.
name|read
argument_list|(
name|ba
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//TODO handle OPTIONS
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|event
parameter_list|)
block|{
specifier|final
name|Bundle
name|bundle
init|=
name|event
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|STARTED
condition|)
block|{
name|registerResources
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|resourceProvidingBundles
operator|.
name|contains
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
argument_list|>
name|entryIter
init|=
name|path2Bundle
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entryIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|entry
init|=
name|entryIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
name|entryIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

