begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2011 Salzburg Research.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|at
operator|.
name|newmedialab
operator|.
name|ldpath
operator|.
name|template
operator|.
name|model
operator|.
name|freemarker
operator|.
name|TemplateWrapperModel
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|core
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|freemarker
operator|.
name|template
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Add file description here!  *<p/>  * Author: Sebastian Schaffert  */
end_comment

begin_class
specifier|public
class|class
name|NamespaceDirective
implements|implements
name|TemplateDirectiveModel
block|{
specifier|public
name|NamespaceDirective
parameter_list|()
block|{     }
comment|/**      * Executes this user-defined directive; called by FreeMarker when the user-defined      * directive is called in the template.      *      * @param env      the current processing environment. Note that you can access      *                 the output {@link java.io.Writer Writer} by {@link freemarker.core.Environment#getOut()}.      * @param params   the parameters (if any) passed to the directive as a      *                 map of key/value pairs where the keys are {@link String}-s and the      *                 values are {@link freemarker.template.TemplateModel} instances. This is never      *<code>null</code>. If you need to convert the template models to POJOs,      *                 you can use the utility methods in the {@link freemarker.template.utility.DeepUnwrap} class.      * @param loopVars an array that corresponds to the "loop variables", in      *                 the order as they appear in the directive call. ("Loop variables" are out-parameters      *                 that are available to the nested body of the directive; see in the Manual.)      *                 You set the loop variables by writing this array. The length of the array gives the      *                 number of loop-variables that the caller has specified.      *                 Never<code>null</code>, but can be a zero-length array.      * @param body     an object that can be used to render the nested content (body) of      *                 the directive call. If the directive call has no nested content (i.e., it is like      *                 [@myDirective /] or [@myDirective][/@myDirective]), then this will be      *<code>null</code>.      * @throws freemarker.template.TemplateException      *      * @throws java.io.IOException      */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Environment
name|env
parameter_list|,
name|Map
name|params
parameter_list|,
name|TemplateModel
index|[]
name|loopVars
parameter_list|,
name|TemplateDirectiveBody
name|body
parameter_list|)
throws|throws
name|TemplateException
throws|,
name|IOException
block|{
name|TemplateWrapperModel
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|namespacesWrapped
init|=
operator|(
name|TemplateWrapperModel
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|env
operator|.
name|getGlobalVariable
argument_list|(
literal|"namespaces"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
decl_stmt|;
if|if
condition|(
name|namespacesWrapped
operator|==
literal|null
condition|)
block|{
name|namespaces
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|namespacesWrapped
operator|=
operator|new
name|TemplateWrapperModel
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|env
operator|.
name|setGlobalVariable
argument_list|(
literal|"namespaces"
argument_list|,
name|namespacesWrapped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|namespaces
operator|=
name|namespacesWrapped
operator|.
name|getAdaptedObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|paramIter
init|=
name|params
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|paramIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|ent
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|paramIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|paramName
init|=
operator|(
name|String
operator|)
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TemplateModel
name|paramValue
init|=
operator|(
name|TemplateModel
operator|)
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramValue
operator|instanceof
name|TemplateScalarModel
condition|)
block|{
name|String
name|uri
init|=
operator|(
operator|(
name|TemplateScalarModel
operator|)
name|paramValue
operator|)
operator|.
name|getAsString
argument_list|()
decl_stmt|;
try|try
block|{
name|URI
name|test
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|test
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TemplateModelException
argument_list|(
literal|"invalid namespace URI '"
operator|+
name|uri
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

