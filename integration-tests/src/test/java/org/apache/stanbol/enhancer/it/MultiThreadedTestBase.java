begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|it
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|parser
operator|.
name|JenaParserProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|rdfjson
operator|.
name|parser
operator|.
name|RdfJsonParsingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|params
operator|.
name|ClientPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|BasicHttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreConnectionPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreProtocolPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
operator|.
name|Execution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|execution
operator|.
name|ExecutionMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for multi threaded tests  * @author westei  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MultiThreadedTestBase
extends|extends
name|EnhancerTestBase
block|{
comment|/**      * The name of the Enhancement Chain this test runs against. If not defined      * the default chain is used.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_CHAIN
init|=
literal|"stanbol.it.multithreadtest.chain"
decl_stmt|;
comment|/**      * The reference to the test data. Can be a File, a Resource available via the      * Classpath or an URL. This also supports compressed files. In case of ZIP      * only the first entry is processed.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TEST_DATA
init|=
literal|"stanbol.it.multithreadtest.data"
decl_stmt|;
comment|/**      * Can be used to explicitly parse the Media-Type of the test data. If not set      * the Media-Type is parsed based on the file extension.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TEST_DATA_TYPE
init|=
literal|"stanbol.it.multithreadtest.media-type"
decl_stmt|;
comment|/**      * The RDF property used to filter triples their values are used as texts for      * Enhancer requests. Only used of test data are provided as RDF<p>      * Note:<ul>      *<li> Only triples where their Object are Literals are used      *<li> the default property is "http://dbpedia.org/ontology/abstract"      *<li> if set to "*" than all triples with literal values are used.      *</ul>      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TEST_DATA_PROPERTY
init|=
literal|"stanbol.it.multithreadtest.data-property"
decl_stmt|;
comment|/**      * The maximum number of concurrent requests      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_THREADS
init|=
literal|"stanbol.it.multithreadtest.threads"
decl_stmt|;
comment|/**      * The maximum number of requests. Can be used to limit the number of requests if      * the provided data do contain more samples.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_REQUESTS
init|=
literal|"stanbol.it.multithreadtest.requests"
decl_stmt|;
comment|/**      * The RDF serialisation used as Accept header for Stanbol Enhancer requests      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_RDF_FORMAT
init|=
literal|"stanbol.it.multithreadtest.rdf-format"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiThreadedTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_THREADS
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_REQUESTS
init|=
literal|500
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RDF_FORMAT
init|=
name|SupportedFormat
operator|.
name|RDF_JSON
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEST_DATA
init|=
literal|"10k_long_abstracts_en.nt.bz2"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TEST_DATA_PROPERTY
init|=
literal|"http://dbpedia.org/ontology/abstract"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ENABLE_EXECUTION_METADATA
init|=
operator|new
name|String
index|[]
block|{
literal|"executionmetadata"
block|,
literal|"true"
block|}
decl_stmt|;
specifier|protected
specifier|static
name|Parser
name|rdfParser
decl_stmt|;
specifier|protected
name|DefaultHttpClient
name|pooledHttpClient
decl_stmt|;
specifier|private
name|BasicHttpParams
name|httpParams
decl_stmt|;
specifier|private
name|PoolingClientConnectionManager
name|connectionManager
decl_stmt|;
specifier|protected
name|MultiThreadedTestBase
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MultiThreadedTestBase
parameter_list|(
name|String
modifier|...
name|assertEngines
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|assertEngines
argument_list|)
expr_stmt|;
comment|//set the endpoint to the default
name|setEndpoint
argument_list|(
literal|null
argument_list|,
name|ENABLE_EXECUTION_METADATA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
comment|//init the RDF parser
name|rdfParser
operator|=
operator|new
name|Parser
argument_list|()
expr_stmt|;
name|rdfParser
operator|.
name|bindParsingProvider
argument_list|(
operator|new
name|JenaParserProvider
argument_list|()
argument_list|)
expr_stmt|;
name|rdfParser
operator|.
name|bindParsingProvider
argument_list|(
operator|new
name|RdfJsonParsingProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|//init theTestData
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
specifier|final
name|void
name|cleanup
parameter_list|()
block|{     }
comment|/**      * Helper method that initialises the test data based on the parsed parameter      * @param settings the settings of the Test.      * @return the Iterator over the contents in the test data      * @throws IOException on any error while accessing the parsed test data      */
specifier|private
specifier|static
name|Iterator
argument_list|<
name|String
argument_list|>
name|initTestData
parameter_list|(
name|TestSettings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Read Testdata from '{}'"
argument_list|,
name|settings
operator|.
name|getTestData
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
name|settings
operator|.
name|getTestData
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|testFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... init from File"
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|MultiThreadedTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|settings
operator|.
name|getTestData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|settings
operator|.
name|getTestData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|=
operator|new
name|URL
argument_list|(
name|settings
operator|.
name|getTestData
argument_list|()
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|" ... init from URL"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|//not a URL
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|" ... init via Classpath"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to load the parsed TestData '"
operator|+
name|settings
operator|.
name|getTestData
argument_list|()
operator|+
literal|"'!"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  - InputStream: {}"
argument_list|,
name|is
operator|==
literal|null
condition|?
literal|null
else|:
name|is
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|settings
operator|.
name|getTestData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"gz"
operator|.
name|equalsIgnoreCase
argument_list|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|name
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"   - from GZIP Archive"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bz2"
operator|.
name|equalsIgnoreCase
argument_list|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|name
operator|=
name|FilenameUtils
operator|.
name|removeExtension
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"   - from BZip2 Archive"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"zip"
operator|.
name|equalsIgnoreCase
argument_list|(
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|ZipArchiveInputStream
name|zipin
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|ArchiveEntry
name|entry
init|=
name|zipin
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"For ZIP archives only the 1st Entry will be processed!"
argument_list|)
expr_stmt|;
name|name
operator|=
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  - processed Entry: {}"
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// else uncompressed data ...
name|log
operator|.
name|info
argument_list|(
literal|"  - uncompressed source: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|MediaType
name|mediaType
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|getTestDataMediaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|settings
operator|.
name|getTestDataMediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//parse based on extension
name|String
name|ext
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"txt"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rdf"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"xml"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ttl"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"n3"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|N3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"nt"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|N_TRIPLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"json"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|SupportedFormat
operator|.
name|RDF_JSON
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|//no extension
name|mediaType
operator|=
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
expr_stmt|;
comment|//try plain text
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unkown File Extension {} for resource name {}"
argument_list|,
name|ext
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|mediaType
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to detect MediaType for Resource '"
operator|+
name|name
operator|+
literal|"'. Please use the property '"
operator|+
name|PROPERTY_TEST_DATA_TYPE
operator|+
literal|"' to manually parse the MediaType!"
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  - Media-Type: {}"
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
comment|//now init the iterator for the test data
return|return
name|mediaType
operator|.
name|isCompatible
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
condition|?
name|createTextDataIterator
argument_list|(
name|is
argument_list|,
name|mediaType
argument_list|)
else|:
name|createRdfDataIterator
argument_list|(
name|is
argument_list|,
name|mediaType
argument_list|,
name|settings
operator|.
name|getContentProperty
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Iterator implementation that parses an RDF graph from the parsed      * {@link InputStream}. The RDF data are loaded in-memory. Because of this      * only test data that fit in-memory can be used.<p>      * Literal values (objects) of the {@link #PROPERTY_TEST_DATA_PROPERTY} are      * used as data. If this property is not present {@link #DEFAULT_TEST_DATA_PROPERTY}      * is used. If {@link #PROPERTY_TEST_DATA_PROPERTY} is set to '*' than all      * Triples with Literal values are used.<p>      * This supports all RDF-formats supported by the {@link JenaParserProvider} and      * {@link RdfJsonParsingProvider}. The charset is expected to be UTF-8.      * @param is the input stream providing the RDF test data.      * @param mediaType the Media-Type of the stream. MUST BE supported by      * the Apache Clerezza RDF parsers.      */
specifier|private
specifier|static
name|Iterator
argument_list|<
name|String
argument_list|>
name|createRdfDataIterator
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
specifier|final
name|String
name|propertyString
parameter_list|)
block|{
specifier|final
name|SimpleMGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
try|try
block|{
name|rdfParser
operator|.
name|parse
argument_list|(
name|graph
argument_list|,
name|is
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFormatException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"The MimeType '"
operator|+
name|mediaType
operator|+
literal|"' of the parsed testData "
operator|+
literal|"is not supported. This utility supports plain text files as "
operator|+
literal|"as well as the RDF formats "
operator|+
name|rdfParser
operator|.
name|getSupportedFormats
argument_list|()
operator|+
literal|"If your test data uses one of those formats but it was not "
operator|+
literal|"correctly detected you can use the System property '"
operator|+
name|PROPERTY_TEST_DATA_TYPE
operator|+
literal|"' to manually parse the Media-Type!"
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
literal|null
decl_stmt|;
name|String
name|next
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|getNext
parameter_list|()
block|{
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
name|UriRef
name|property
decl_stmt|;
name|propertyString
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|propertyString
argument_list|)
condition|)
block|{
name|property
operator|=
literal|null
expr_stmt|;
comment|//wildcard
name|log
operator|.
name|info
argument_list|(
literal|"Iterate over values of all Triples"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|property
operator|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|propertyString
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Iterate over values of property {}"
argument_list|,
name|propertyString
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|property
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|value
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Literal
condition|)
block|{
return|return
operator|(
operator|(
name|Literal
operator|)
name|value
operator|)
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
comment|//no more data
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|getNext
argument_list|()
expr_stmt|;
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|getNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No further testData available"
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|elem
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|elem
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|initialiseHttpClient
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|pooledHttpClient
operator|==
literal|null
condition|)
block|{
comment|//init for the first test
name|httpParams
operator|=
operator|new
name|BasicHttpParams
argument_list|()
expr_stmt|;
name|httpParams
operator|.
name|setParameter
argument_list|(
name|CoreProtocolPNames
operator|.
name|USER_AGENT
argument_list|,
literal|"Stanbol Integration Test"
argument_list|)
expr_stmt|;
name|httpParams
operator|.
name|setBooleanParameter
argument_list|(
name|ClientPNames
operator|.
name|HANDLE_REDIRECTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|httpParams
operator|.
name|setIntParameter
argument_list|(
name|ClientPNames
operator|.
name|MAX_REDIRECTS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|httpParams
operator|.
name|setBooleanParameter
argument_list|(
name|CoreConnectionPNames
operator|.
name|SO_KEEPALIVE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connectionManager
operator|=
operator|new
name|PoolingClientConnectionManager
argument_list|()
expr_stmt|;
name|connectionManager
operator|.
name|setMaxTotal
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|connectionManager
operator|.
name|setDefaultMaxPerRoute
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|pooledHttpClient
operator|=
operator|new
name|DefaultHttpClient
argument_list|(
name|connectionManager
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|performTest
parameter_list|(
name|TestSettings
name|settings
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|testDataIterator
init|=
name|initTestData
argument_list|(
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|getChain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setEndpoint
argument_list|(
name|getChainEndpoint
argument_list|(
name|settings
operator|.
name|getChain
argument_list|()
argument_list|)
argument_list|,
name|ENABLE_EXECUTION_METADATA
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Start Multi Thread testing of max. {} requests using {} threads "
operator|+
literal|"on Endpoint {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|settings
operator|.
name|getMaxRequests
argument_list|()
block|,
name|settings
operator|.
name|getNumThreads
argument_list|()
block|,
name|getEndpoint
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|ExcutionTracker
name|tracker
init|=
operator|new
name|ExcutionTracker
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|settings
operator|.
name|getNumThreads
argument_list|()
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|100
argument_list|,
name|settings
operator|.
name|getNumThreads
argument_list|()
operator|*
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rdfFormat
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_RDF_FORMAT
argument_list|,
name|DEFAULT_RDF_FORMAT
argument_list|)
decl_stmt|;
name|int
name|testNum
decl_stmt|;
for|for
control|(
name|testNum
operator|=
literal|0
init|;
name|testDataIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|testNum
operator|<
name|settings
operator|.
name|getMaxRequests
argument_list|()
condition|;
name|testNum
operator|++
control|)
block|{
name|String
name|test
init|=
name|testDataIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|rdfFormat
argument_list|)
operator|.
name|withContent
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|register
argument_list|(
name|request
argument_list|,
name|test
argument_list|)
expr_stmt|;
if|if
condition|(
name|testNum
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  ... sent {} Requests ({} finished, {} pending, {} failed"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|testNum
block|,
name|tracker
operator|.
name|getNumCompleted
argument_list|()
block|,
name|tracker
operator|.
name|getNumPending
argument_list|()
block|,
name|tracker
operator|.
name|getFailed
argument_list|()
operator|.
name|size
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"> All {} requests sent!"
argument_list|,
name|testNum
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... wait for all requests to complete"
argument_list|)
expr_stmt|;
while|while
condition|(
name|tracker
operator|.
name|getNumPending
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tracker
operator|.
name|wait
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... {} finished, {} pending, {} failed"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|tracker
operator|.
name|getNumCompleted
argument_list|()
block|,
name|tracker
operator|.
name|getNumPending
argument_list|()
block|,
name|tracker
operator|.
name|getFailed
argument_list|()
operator|.
name|size
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Multi Thread testing of {} requests (failed: {}) using {} threads completed"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|tracker
operator|.
name|getNumCompleted
argument_list|()
block|,
name|tracker
operator|.
name|getFailed
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|settings
operator|.
name|getNumThreads
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|printStatistics
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Content(s) of Faild tests:"
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|HttpResponse
argument_list|,
name|String
argument_list|>
name|failed
range|:
name|tracker
operator|.
name|getFailed
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed ({}):"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"> Status: {}"
argument_list|,
name|failed
operator|.
name|getKey
argument_list|()
operator|.
name|getStatusLine
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"> Content: {}"
argument_list|,
name|failed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tracker
operator|.
name|getFailed
argument_list|()
operator|+
literal|"/"
operator|+
name|settings
operator|.
name|getNumThreads
argument_list|()
operator|+
literal|" failed"
argument_list|,
name|tracker
operator|.
name|getFailed
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
specifier|final
name|void
name|close
parameter_list|()
block|{
name|setEndpoint
argument_list|(
literal|null
argument_list|,
name|ENABLE_EXECUTION_METADATA
argument_list|)
expr_stmt|;
comment|//reset the endpoint to the default
name|httpParams
operator|=
literal|null
expr_stmt|;
name|pooledHttpClient
operator|=
literal|null
expr_stmt|;
name|connectionManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|connectionManager
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestSettings
block|{
specifier|private
name|String
name|endpoint
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|maxRequests
init|=
name|DEFAULT_NUM_REQUESTS
decl_stmt|;
specifier|private
name|Integer
name|numThreads
init|=
name|DEFAULT_NUM_THREADS
decl_stmt|;
specifier|private
name|String
name|rdfFormat
init|=
name|DEFAULT_RDF_FORMAT
decl_stmt|;
specifier|private
name|String
name|testData
init|=
name|DEFAULT_TEST_DATA
decl_stmt|;
specifier|private
name|String
name|testDataMediaType
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|propertyString
init|=
name|DEFAULT_TEST_DATA_PROPERTY
decl_stmt|;
specifier|public
specifier|static
name|TestSettings
name|fromSystemProperties
parameter_list|()
block|{
name|TestSettings
name|settings
init|=
operator|new
name|TestSettings
argument_list|()
decl_stmt|;
name|settings
operator|.
name|setMaxRequests
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
name|PROPERTY_REQUESTS
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setNumThreads
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
name|PROPERTY_THREADS
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setTestData
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_TEST_DATA
argument_list|)
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_TEST_DATA_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setChain
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_CHAIN
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|settings
return|;
block|}
specifier|public
name|String
name|getChain
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
specifier|public
name|void
name|setChain
parameter_list|(
name|String
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
specifier|public
name|Integer
name|getMaxRequests
parameter_list|()
block|{
return|return
name|maxRequests
return|;
block|}
specifier|public
name|void
name|setMaxRequests
parameter_list|(
name|Integer
name|maxRequests
parameter_list|)
block|{
if|if
condition|(
name|maxRequests
operator|==
literal|null
operator|||
name|maxRequests
operator|<
literal|1
condition|)
block|{
name|this
operator|.
name|maxRequests
operator|=
name|DEFAULT_NUM_REQUESTS
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxRequests
operator|=
name|maxRequests
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNumThreads
parameter_list|(
name|Integer
name|numThreads
parameter_list|)
block|{
if|if
condition|(
name|numThreads
operator|==
literal|null
operator|||
name|numThreads
operator|<
literal|1
condition|)
block|{
name|this
operator|.
name|numThreads
operator|=
name|DEFAULT_NUM_THREADS
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
block|}
block|}
specifier|public
name|Integer
name|getNumThreads
parameter_list|()
block|{
return|return
name|numThreads
return|;
block|}
specifier|public
name|String
name|getRdfFormat
parameter_list|()
block|{
return|return
name|rdfFormat
return|;
block|}
specifier|public
name|void
name|setRdfFormat
parameter_list|(
name|String
name|rdfFormat
parameter_list|)
block|{
if|if
condition|(
name|rdfFormat
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rdfFormat
operator|=
name|DEFAULT_RDF_FORMAT
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|rdfFormat
operator|=
name|rdfFormat
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTestData
parameter_list|()
block|{
return|return
name|testData
return|;
block|}
comment|/**          * setter for the test data          * @param testData source for the test. A file, URL or Classpath resource          * @param testdataMediaType the media type or<code>null</code> to detect          * it based on the name of the testData resource.          */
specifier|public
name|void
name|setTestData
parameter_list|(
name|String
name|testData
parameter_list|,
name|String
name|testdataMediaType
parameter_list|)
block|{
if|if
condition|(
name|testData
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|testData
operator|=
name|DEFAULT_TEST_DATA
expr_stmt|;
name|this
operator|.
name|testDataMediaType
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|testData
operator|=
name|testData
expr_stmt|;
name|this
operator|.
name|testDataMediaType
operator|=
name|testdataMediaType
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTestDataMediaType
parameter_list|()
block|{
return|return
name|testDataMediaType
return|;
block|}
specifier|public
name|void
name|setContentProperty
parameter_list|(
name|String
name|propertyString
parameter_list|)
block|{
if|if
condition|(
name|propertyString
operator|==
literal|null
operator|||
name|propertyString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|propertyString
operator|=
name|DEFAULT_TEST_DATA_PROPERTY
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|propertyString
operator|=
name|propertyString
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getContentProperty
parameter_list|()
block|{
return|return
name|propertyString
return|;
block|}
block|}
comment|/* -------------------------------------------------------------      * Utilities for reading the Test Data from the defined source      * -------------------------------------------------------------      */
comment|/**      * Iterator reading Content elements from the input stream. Two (ore more)      * empty lines are used to separate multiple content items.<p>      * NOTE: This iterator does not keep the whole text in-memory. Therefore      * it can be possible used to process test data that would not fit      * in-memory.      * @param is The input stream to read the data from      * @param mediaType the Media-Type - only used to parse the charset from. If      * no charset is specified UTF-8 is uses as default.      */
specifier|private
specifier|static
name|Iterator
argument_list|<
name|String
argument_list|>
name|createTextDataIterator
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|MediaType
name|mediaType
parameter_list|)
block|{
name|String
name|charsetString
init|=
name|mediaType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetString
operator|==
literal|null
condition|?
literal|"UTF-8"
else|:
name|charsetString
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  ... using charset {} for parsing Text data"
argument_list|,
name|charset
argument_list|)
expr_stmt|;
specifier|final
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
name|String
name|next
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|getNext
parameter_list|()
block|{
name|String
name|line
decl_stmt|;
name|StringBuilder
name|data
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|emtptyLines
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|emtptyLines
operator|<
literal|2
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|emtptyLines
operator|++
expr_stmt|;
block|}
comment|//do not count empty lines at the beginning!
block|}
else|else
block|{
name|emtptyLines
operator|=
literal|0
expr_stmt|;
block|}
name|data
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"IOException while reading from Stream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IOException while reading from Stream"
argument_list|)
expr_stmt|;
block|}
return|return
name|data
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|data
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|getNext
argument_list|()
expr_stmt|;
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|getNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"No further testData available"
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|elem
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|elem
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
comment|/* -------------------------------------------------------------      * Utilities for executing and tracking the concurrent Requests      * -------------------------------------------------------------      */
specifier|protected
class|class
name|ExcutionTracker
block|{
specifier|private
name|int
name|maxRegistered
decl_stmt|;
specifier|private
name|int
name|completed
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Request
argument_list|>
name|registered
init|=
operator|new
name|HashSet
argument_list|<
name|Request
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|HttpResponse
argument_list|,
name|String
argument_list|>
name|failed
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|HttpResponse
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ExecutionStatistics
name|statistics
init|=
operator|new
name|ExecutionStatistics
argument_list|()
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
specifier|protected
name|ExcutionTracker
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
argument_list|(
name|executorService
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExcutionTracker
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|,
name|int
name|maxRegistered
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
name|this
operator|.
name|maxRegistered
operator|=
name|maxRegistered
operator|<=
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxRegistered
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|Request
name|request
parameter_list|,
name|String
name|content
parameter_list|)
block|{
synchronized|synchronized
init|(
name|registered
init|)
block|{
while|while
condition|(
name|registered
operator|.
name|size
argument_list|()
operator|>=
name|maxRegistered
condition|)
block|{
try|try
block|{
name|registered
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//interrupped
block|}
block|}
name|registered
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|AsyncExecuter
argument_list|(
name|content
argument_list|,
name|request
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|succeed
parameter_list|(
name|Request
name|request
parameter_list|,
name|UriRef
name|contentItemUri
parameter_list|,
name|TripleCollection
name|results
parameter_list|,
name|Long
name|rtt
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|ExecutionMetadata
name|em
init|=
name|ExecutionMetadata
operator|.
name|parseFrom
argument_list|(
name|results
argument_list|,
operator|(
name|UriRef
operator|)
name|contentItemUri
argument_list|)
decl_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// we no longer need the results
if|if
condition|(
name|em
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|statistics
init|)
block|{
name|statistics
operator|.
name|addResult
argument_list|(
name|em
argument_list|,
name|rtt
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no executionData available ... unable to collect statistics
synchronized|synchronized
init|(
name|registered
init|)
block|{
if|if
condition|(
name|registered
operator|.
name|remove
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|completed
operator|++
expr_stmt|;
name|registered
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|failed
parameter_list|(
name|Request
name|request
parameter_list|,
name|String
name|content
parameter_list|,
name|RequestExecutor
name|executor
parameter_list|)
block|{
synchronized|synchronized
init|(
name|registered
init|)
block|{
name|failed
operator|.
name|put
argument_list|(
name|executor
operator|.
name|getResponse
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|registered
operator|.
name|remove
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|completed
operator|++
expr_stmt|;
name|registered
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getNumPending
parameter_list|()
block|{
synchronized|synchronized
init|(
name|registered
init|)
block|{
return|return
name|registered
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**          * Live list of the failed requests. Non basic access MUST BE          * syncronized on the list while the requests are still pending as newly          * failed requests will modify this list          * @return          */
specifier|public
name|Map
argument_list|<
name|HttpResponse
argument_list|,
name|String
argument_list|>
name|getFailed
parameter_list|()
block|{
return|return
name|failed
return|;
block|}
specifier|public
name|int
name|getNumCompleted
parameter_list|()
block|{
return|return
name|completed
return|;
block|}
specifier|public
name|void
name|wait
parameter_list|(
name|int
name|seconds
parameter_list|)
block|{
try|try
block|{
name|executorService
operator|.
name|awaitTermination
argument_list|(
name|seconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
specifier|public
name|void
name|printStatistics
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Statistics:"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|statistics
init|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Chain:"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  Round Trip Time (Server + Transfer + Client):"
argument_list|)
expr_stmt|;
if|if
condition|(
name|statistics
operator|.
name|getNumRtt
argument_list|()
operator|<
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    - not available"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"     max: {}ms | min: {}ms | avr: {}ms over {} requests"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|statistics
operator|.
name|getMaxRtt
argument_list|()
block|,
name|statistics
operator|.
name|getMinRtt
argument_list|()
block|,
name|statistics
operator|.
name|getAverageRtt
argument_list|()
block|,
name|statistics
operator|.
name|getNumRtt
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"  Processing Time (server side)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|statistics
operator|.
name|getNumSamples
argument_list|()
operator|<
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    - not available. Make shure the used "
operator|+
literal|"EnhancementJobManager supports ExecutionMetadata!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"     max: {}ms | min: {}ms | avr: {}ms over {} requests"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|statistics
operator|.
name|getMaxDuration
argument_list|()
block|,
name|statistics
operator|.
name|getMinDuration
argument_list|()
block|,
name|statistics
operator|.
name|getAverageDuration
argument_list|()
block|,
name|statistics
operator|.
name|getNumSamples
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"  Bandwith Consumption (received data)"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"     max: {}KB | min: {}KB | avr: {}KB received over {} requests"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|statistics
operator|.
name|getMaxReceivedKB
argument_list|()
block|,
name|statistics
operator|.
name|getMinReceivedKB
argument_list|()
block|,
name|statistics
operator|.
name|getAverageReceivedKB
argument_list|()
block|,
name|statistics
operator|.
name|getNumReceivedData
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Enhancement Engines"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|statistics
operator|.
name|getEngineNames
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  {}: max: {}ms | min: {}ms | avr: {}ms over {} requests"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|statistics
operator|.
name|getMaxDuration
argument_list|(
name|name
argument_list|)
block|,
name|statistics
operator|.
name|getMinDuration
argument_list|(
name|name
argument_list|)
block|,
name|statistics
operator|.
name|getAverage
argument_list|(
name|name
argument_list|)
block|,
name|statistics
operator|.
name|getNumSamples
argument_list|(
name|name
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
class|class
name|AsyncExecuter
implements|implements
name|Runnable
block|{
specifier|private
name|Request
name|request
decl_stmt|;
specifier|private
name|ExcutionTracker
name|tracker
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
specifier|protected
name|AsyncExecuter
parameter_list|(
name|String
name|content
parameter_list|,
name|Request
name|request
parameter_list|,
name|ExcutionTracker
name|tracker
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|RequestExecutor
name|executor
init|=
operator|new
name|RequestExecutor
argument_list|(
name|pooledHttpClient
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Long
name|rtt
decl_stmt|;
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|request
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|content
operator|=
literal|null
expr_stmt|;
comment|//do not store content for successfull resutls
name|rtt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while sending Request "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|failed
argument_list|(
name|request
argument_list|,
name|content
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|rtt
operator|=
literal|null
expr_stmt|;
block|}
name|IndexedMGraph
name|graph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
try|try
block|{
name|rdfParser
operator|.
name|parse
argument_list|(
name|graph
argument_list|,
name|executor
operator|.
name|getStream
argument_list|()
argument_list|,
name|executor
operator|.
name|getContentType
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to parse RDF data from Response with Content-Type "
operator|+
name|executor
operator|.
name|getContentType
argument_list|()
operator|.
name|getMimeType
argument_list|()
operator|+
literal|" ( "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|//            log.info("Content:\n{}",executor.getContent());
comment|//
comment|//            log.info("Triples");
comment|//            for(Triple t : graph){
comment|//                log.info(t.toString());
comment|//            }
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|ciIt
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Enhancement Results do not caontain a single Enhancement"
argument_list|,
name|ciIt
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|contentItemUri
init|=
name|ciIt
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ContentItem URI is not an UriRef but an instance of "
operator|+
name|contentItemUri
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|contentItemUri
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|succeed
argument_list|(
name|request
argument_list|,
operator|(
name|UriRef
operator|)
name|contentItemUri
argument_list|,
name|graph
argument_list|,
name|rtt
argument_list|,
name|executor
operator|.
name|getContent
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|ExecutionStatistics
block|{
specifier|private
name|int
name|numSamples
decl_stmt|;
specifier|private
name|long
name|maxDuration
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|minDuration
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|sumDuration
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numRtt
decl_stmt|;
specifier|private
name|long
name|maxRtt
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|minRtt
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|sumRtt
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numReceivedData
decl_stmt|;
specifier|private
name|int
name|maxReceivedBytes
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|minReceivedBytes
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|int
name|sumReceivedBytes
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
name|engineStats
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|long
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|addResult
parameter_list|(
name|ExecutionMetadata
name|em
parameter_list|,
name|Long
name|roundTripTime
parameter_list|,
name|Integer
name|receivedBytes
parameter_list|)
block|{
name|Long
name|durationNumber
init|=
name|em
operator|.
name|getChainExecution
argument_list|()
operator|.
name|getDuration
argument_list|()
decl_stmt|;
name|long
name|duration
decl_stmt|;
if|if
condition|(
name|durationNumber
operator|!=
literal|null
condition|)
block|{
name|duration
operator|=
name|durationNumber
operator|.
name|longValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|duration
operator|>
name|maxDuration
condition|)
block|{
name|maxDuration
operator|=
name|duration
expr_stmt|;
block|}
if|if
condition|(
name|duration
operator|<
name|minDuration
condition|)
block|{
name|minDuration
operator|=
name|duration
expr_stmt|;
block|}
name|sumDuration
operator|=
name|sumDuration
operator|+
name|duration
expr_stmt|;
name|numSamples
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|roundTripTime
operator|!=
literal|null
condition|)
block|{
name|long
name|rtt
init|=
name|roundTripTime
decl_stmt|;
if|if
condition|(
name|rtt
operator|>
name|maxRtt
condition|)
block|{
name|maxRtt
operator|=
name|rtt
expr_stmt|;
block|}
if|if
condition|(
name|rtt
operator|<
name|minRtt
condition|)
block|{
name|minRtt
operator|=
name|rtt
expr_stmt|;
block|}
name|sumRtt
operator|=
name|sumRtt
operator|+
name|rtt
expr_stmt|;
name|numRtt
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|receivedBytes
operator|!=
literal|null
condition|)
block|{
name|int
name|rb
init|=
name|receivedBytes
decl_stmt|;
if|if
condition|(
name|rb
operator|>
name|maxReceivedBytes
condition|)
block|{
name|maxReceivedBytes
operator|=
name|rb
expr_stmt|;
block|}
if|if
condition|(
name|rb
operator|<
name|minReceivedBytes
condition|)
block|{
name|minReceivedBytes
operator|=
name|rb
expr_stmt|;
block|}
name|sumReceivedBytes
operator|+=
name|rb
expr_stmt|;
name|numReceivedData
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Execution
argument_list|>
name|ex
range|:
name|em
operator|.
name|getEngineExecutions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
index|[]
name|stats
init|=
name|engineStats
operator|.
name|get
argument_list|(
name|ex
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
name|stats
operator|=
operator|new
name|long
index|[]
block|{
operator|-
literal|1L
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
literal|0L
block|,
literal|0L
block|}
expr_stmt|;
name|engineStats
operator|.
name|put
argument_list|(
name|ex
operator|.
name|getKey
argument_list|()
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
name|durationNumber
operator|=
name|ex
operator|.
name|getValue
argument_list|()
operator|.
name|getDuration
argument_list|()
expr_stmt|;
if|if
condition|(
name|durationNumber
operator|!=
literal|null
condition|)
block|{
name|duration
operator|=
name|durationNumber
operator|.
name|longValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|duration
operator|>
name|stats
index|[
literal|0
index|]
condition|)
block|{
comment|//max duration
name|stats
index|[
literal|0
index|]
operator|=
name|duration
expr_stmt|;
block|}
if|if
condition|(
name|duration
operator|<
name|stats
index|[
literal|1
index|]
condition|)
block|{
comment|//min duration
name|stats
index|[
literal|1
index|]
operator|=
name|duration
expr_stmt|;
block|}
name|stats
index|[
literal|2
index|]
operator|=
name|stats
index|[
literal|2
index|]
operator|+
name|duration
expr_stmt|;
comment|//sum duration
name|stats
index|[
literal|3
index|]
operator|++
expr_stmt|;
comment|//num Samples
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEngineNames
parameter_list|()
block|{
return|return
name|engineStats
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Long
name|getMaxDuration
parameter_list|()
block|{
return|return
name|maxDuration
operator|<
literal|0
condition|?
literal|null
else|:
name|maxDuration
return|;
block|}
specifier|public
name|Long
name|getMinDuration
parameter_list|()
block|{
return|return
name|minDuration
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
literal|null
else|:
name|minDuration
return|;
block|}
specifier|public
name|Long
name|getAverageDuration
parameter_list|()
block|{
return|return
name|sumDuration
operator|<=
literal|0
operator|&&
name|numSamples
operator|<=
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|sumDuration
operator|/
operator|(
name|double
operator|)
name|numSamples
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumSamples
parameter_list|()
block|{
return|return
name|numSamples
return|;
block|}
specifier|public
name|Long
name|getMaxRtt
parameter_list|()
block|{
return|return
name|maxRtt
operator|<
literal|0
condition|?
literal|null
else|:
name|maxRtt
return|;
block|}
specifier|public
name|Long
name|getMinRtt
parameter_list|()
block|{
return|return
name|minRtt
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
literal|null
else|:
name|minRtt
return|;
block|}
specifier|public
name|Long
name|getAverageRtt
parameter_list|()
block|{
return|return
name|sumRtt
operator|<=
literal|0
operator|&&
name|numRtt
operator|<=
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|sumRtt
operator|/
operator|(
name|double
operator|)
name|numRtt
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumRtt
parameter_list|()
block|{
return|return
name|numRtt
return|;
block|}
specifier|public
name|int
name|getNumReceivedData
parameter_list|()
block|{
return|return
name|numReceivedData
return|;
block|}
specifier|public
name|int
name|getMaxReceivedKB
parameter_list|()
block|{
return|return
name|maxReceivedBytes
operator|/
literal|1024
return|;
block|}
specifier|public
name|int
name|getMinReceivedKB
parameter_list|()
block|{
return|return
name|minReceivedBytes
operator|/
literal|1024
return|;
block|}
specifier|public
name|int
name|getAverageReceivedKB
parameter_list|()
block|{
return|return
name|sumReceivedBytes
operator|<=
literal|0
operator|&&
name|numReceivedData
operator|<=
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
name|sumReceivedBytes
operator|/
name|numReceivedData
operator|/
literal|1024
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getMaxDuration
parameter_list|(
name|String
name|engine
parameter_list|)
block|{
name|long
index|[]
name|stats
init|=
name|engineStats
operator|.
name|get
argument_list|(
name|engine
argument_list|)
decl_stmt|;
return|return
name|stats
operator|==
literal|null
condition|?
literal|null
else|:
name|stats
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Long
name|getMinDuration
parameter_list|(
name|String
name|engine
parameter_list|)
block|{
name|long
index|[]
name|stats
init|=
name|engineStats
operator|.
name|get
argument_list|(
name|engine
argument_list|)
decl_stmt|;
return|return
name|stats
operator|==
literal|null
condition|?
literal|null
else|:
name|stats
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|Long
name|getAverage
parameter_list|(
name|String
name|engine
parameter_list|)
block|{
name|long
index|[]
name|stats
init|=
name|engineStats
operator|.
name|get
argument_list|(
name|engine
argument_list|)
decl_stmt|;
return|return
name|stats
operator|==
literal|null
operator|||
name|stats
index|[
literal|2
index|]
operator|<=
literal|0
operator|||
name|stats
index|[
literal|3
index|]
operator|<=
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|stats
index|[
literal|2
index|]
operator|/
operator|(
name|double
operator|)
name|stats
index|[
literal|3
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNumSamples
parameter_list|(
name|String
name|engine
parameter_list|)
block|{
name|long
index|[]
name|stats
init|=
name|engineStats
operator|.
name|get
argument_list|(
name|engine
argument_list|)
decl_stmt|;
return|return
name|stats
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|int
operator|)
name|stats
index|[
literal|3
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

