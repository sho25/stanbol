begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|it
operator|.
name|MultipartContentItemTestUtils
operator|.
name|buildPathWithParams
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|it
operator|.
name|MultipartContentItemTestUtils
operator|.
name|getHTMLContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
operator|.
name|DBPEDIA_ORGANISATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
operator|.
name|DBPEDIA_PERSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
operator|.
name|DBPEDIA_PLACE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|serializer
operator|.
name|JenaSerializerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|FormBodyPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|HttpMultipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MIME
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MultipartEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|AbstractContentBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|ContentBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|ContentDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|content
operator|.
name|StringBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|OntologicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This tests RESTful API extensions to the Stanbol Enhancer as described by  * STANBOL-481  */
end_comment

begin_class
specifier|public
class|class
name|MultipartRequestTest
extends|extends
name|EnhancerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Serializer
name|serializer
init|=
operator|new
name|Serializer
argument_list|()
decl_stmt|;
static|static
block|{
name|serializer
operator|.
name|bindSerializingProvider
argument_list|(
operator|new
name|JenaSerializerProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultipartRequestTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|TEXT_CONTENT
init|=
literal|"The Apache Stanbol Enhancer.\n"
operator|+
literal|"The Stanbol enhancer can detect famous cities such as Paris and "
operator|+
literal|"people such as Bob Marley."
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|TEXT_CONTENT_LINES
init|=
name|TEXT_CONTENT
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|HTML_CONTENT
init|=
name|getHTMLContent
argument_list|(
name|TEXT_CONTENT_LINES
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|HTML_CONTENT_LINES
init|=
name|HTML_CONTENT
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
specifier|public
name|MultipartRequestTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|//use the default endpoint
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalRdfFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"*/*"
block|,
literal|"rdfFormat"
block|,
literal|"notAvalidMimeFormat"
block|}
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|400
argument_list|)
expr_stmt|;
comment|//BAD_REQUEST
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalOutputContent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"notAvalidMimeFormat"
block|}
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|400
argument_list|)
expr_stmt|;
comment|//BAD_REQUEST
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultContentTypes
parameter_list|()
throws|throws
name|IOException
block|{
comment|//'*/*', 'text/plain' and 'application/octet-stream' where considered as
comment|// Indicators that the default RDF serialisation format for the metadata
comment|// should be used.
comment|//This is basically testing backward compatibility
name|String
index|[]
name|jsonLDMetadataTests
init|=
operator|new
name|String
index|[]
block|{
literal|"\"@subject\": \"http://dbpedia.org/resource/Paris\","
block|,
literal|"\"@subject\": \"http://dbpedia.org/resource/Bob_Marley\","
block|,
literal|"\"dc:creator\": \"org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine\","
block|}
decl_stmt|;
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"text/plain"
block|}
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/plain"
argument_list|)
comment|//must be multipart/from-data
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
comment|//metadata as JSONLD
operator|.
name|assertContentRegexp
argument_list|(
name|jsonLDMetadataTests
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"application/octet-stream"
block|}
expr_stmt|;
comment|//omitMetadata=false
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/plain"
argument_list|)
comment|//must be multipart/from-data
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
comment|//metadata as JSONLD
operator|.
name|assertContentRegexp
argument_list|(
name|jsonLDMetadataTests
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"application/octet-stream"
block|}
expr_stmt|;
comment|//omitMetadata=false
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/plain"
argument_list|)
comment|//must be multipart/from-data
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
comment|//metadata as JSONLD
operator|.
name|assertContentRegexp
argument_list|(
name|jsonLDMetadataTests
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputMetadataAndAllContent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"*/*"
block|,
literal|"rdfFormat"
block|,
literal|"text/rdf+nt"
block|}
decl_stmt|;
name|String
name|content
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"--contentItem"
argument_list|,
literal|"--contentItem--"
argument_list|,
literal|"Content-Disposition: form-data; name=\"content\""
argument_list|,
literal|"Content-Type: multipart/alternate; boundary=contentParts; charset=UTF-8"
argument_list|,
literal|"Content-Type: text/plain; charset=UTF-8"
argument_list|,
literal|"Content-Type: text/html"
argument_list|,
literal|"--contentParts"
argument_list|,
literal|"--contentParts--"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|TEXT_CONTENT_LINES
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|HTML_CONTENT_LINES
argument_list|)
comment|//line by line the HTML content
operator|.
name|assertContentRegexp
argument_list|(
literal|"Content-Disposition: form-data; name=\"metadata\"; filename=.*"
argument_list|,
literal|"Content-Disposition: form-data; name=\"urn:metaxa:plain-text:.*"
argument_list|,
literal|"Content-Disposition: form-data; name=\"urn:content-item-sha1-.*"
argument_list|,
comment|//and the expected enhancements in the metadata
literal|"http://purl.org/dc/terms/creator.*LangIdEnhancementEngine"
argument_list|,
literal|"http://purl.org/dc/terms/language.*en"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Paris"
argument_list|,
literal|"http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*EngineCore"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputAllContentOmitMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"*/*"
block|,
literal|"omitMetadata"
block|,
literal|"true"
block|,
literal|"rdfFormat"
block|,
literal|"text/rdf+nt"
block|}
decl_stmt|;
name|String
name|content
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"--contentItem"
argument_list|,
literal|"--contentItem--"
argument_list|,
literal|"Content-Disposition: form-data; name=\"content\""
argument_list|,
literal|"Content-Type: multipart/alternate; boundary=contentParts; charset=UTF-8"
argument_list|,
literal|"Content-Type: text/plain; charset=UTF-8"
argument_list|,
literal|"Content-Type: text/html"
argument_list|,
literal|"--contentParts"
argument_list|,
literal|"--contentParts--"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|TEXT_CONTENT_LINES
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|HTML_CONTENT_LINES
argument_list|)
comment|//line by line the HTML content
operator|.
name|assertContentRegexp
argument_list|(
comment|//MUST contain
literal|"Content-Disposition: form-data; name=\"urn:metaxa:plain-text:.*"
argument_list|,
literal|"Content-Disposition: form-data; name=\"urn:content-item-sha1-.*"
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
literal|false
argument_list|,
comment|//MUST NOT contain
literal|"Content-Disposition: form-data; name=\"metadata\"; filename=.*"
argument_list|,
comment|//and the expected enhancements in the metadata
literal|"http://purl.org/dc/terms/creator.*LangIdEnhancementEngine"
argument_list|,
literal|"http://purl.org/dc/terms/language.*en"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Paris"
argument_list|,
literal|"http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*EngineCore"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputPlainTextContent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"text/plain"
block|,
literal|"rdfFormat"
block|,
literal|"text/rdf+nt"
block|}
decl_stmt|;
name|String
name|content
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"--contentItem"
argument_list|,
literal|"--contentItem--"
argument_list|,
literal|"Content-Disposition: form-data; name=\"content\""
argument_list|,
literal|"Content-Type: multipart/alternate; boundary=contentParts; charset=UTF-8"
argument_list|,
literal|"Content-Type: text/plain; charset=UTF-8"
argument_list|,
literal|"--contentParts"
argument_list|,
literal|"--contentParts--"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|TEXT_CONTENT_LINES
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
literal|"Content-Disposition: form-data; name=\"metadata\"; filename=.*"
argument_list|,
literal|"Content-Disposition: form-data; name=\"urn:metaxa:plain-text:.*"
argument_list|,
comment|//and the expected enhancements in the metadata
literal|"http://purl.org/dc/terms/creator.*LangIdEnhancementEngine"
argument_list|,
literal|"http://purl.org/dc/terms/language.*en"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Paris"
argument_list|,
literal|"http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*EngineCore"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputContentOtherThanParsed
parameter_list|()
throws|throws
name|IOException
block|{
comment|//metadata and text content
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContent"
block|,
literal|"*/*"
block|,
literal|"omitParsed"
block|,
literal|"true"
block|,
literal|"rdfFormat"
block|,
literal|"text/rdf+nt"
block|}
decl_stmt|;
name|String
name|content
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|HTML_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"--contentItem"
argument_list|,
literal|"--contentItem--"
argument_list|,
literal|"Content-Disposition: form-data; name=\"content\""
argument_list|,
literal|"Content-Type: multipart/alternate; boundary=contentParts; charset=UTF-8"
argument_list|,
literal|"Content-Type: text/plain; charset=UTF-8"
argument_list|,
literal|"--contentParts"
argument_list|,
literal|"--contentParts--"
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|TEXT_CONTENT_LINES
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
literal|"Content-Disposition: form-data; name=\"metadata\"; filename=.*"
argument_list|,
literal|"Content-Disposition: form-data; name=\"urn:metaxa:plain-text:.*"
argument_list|,
comment|//and the expected enhancements in the metadata
literal|"http://purl.org/dc/terms/creator.*LangIdEnhancementEngine"
argument_list|,
literal|"http://purl.org/dc/terms/language.*en"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Paris"
argument_list|,
literal|"http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*EngineCore"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputContentPart
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"outputContentPart"
block|,
literal|"http://stanbol.apache.org/ontology/enhancer/executionmetadata#ChainExecution"
block|,
literal|"omitMetadata"
block|,
literal|"true"
block|,
literal|"rdfFormat"
block|,
literal|"application/rdf+xml"
block|}
decl_stmt|;
name|String
name|content
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|buildPathWithParams
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"multipart/from-data"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
operator|.
name|withContent
argument_list|(
name|TEXT_CONTENT
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"--contentItem"
argument_list|,
literal|"--contentItem--"
argument_list|,
literal|"Content-Disposition: form-data; name=\"http://stanbol.apache.org/ontology/enhancer/executionmetadata#ChainExecution\""
argument_list|,
literal|"Content-Type: application/rdf+xml; charset=UTF-8"
argument_list|,
literal|"<rdf:type rdf:resource=\"http://stanbol.apache.org/ontology/enhancer/executionplan#ExecutionPlan\"/>"
argument_list|,
literal|"<rdf:type rdf:resource=\"http://stanbol.apache.org/ontology/enhancer/executionplan#ExecutionNode\"/>"
argument_list|,
literal|"<rdf:type rdf:resource=\"http://stanbol.apache.org/ontology/enhancer/executionmetadata#EngineExecution\"/>"
argument_list|,
literal|"<rdf:type rdf:resource=\"http://stanbol.apache.org/ontology/enhancer/executionmetadata#ChainExecution\"/>"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * This uploads the HTML as well as the plain text version of an content.      * This allows it CMS to parse already available alternate content versions      * in a single request. Stanbol can than still use the original content      * (e.g. to extract metadata) but other engines that require the alternate      * version (e.g. plain text version) of an document will directly use the      * parsed version .<p>      * This UnitTest ensures this by adding a "secret" extension the to plain      * text version and than checks if the two entities mentioned in that      * part are included in the extracted entities.      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testUploadMultipleContents
parameter_list|()
throws|throws
name|IOException
block|{
comment|//It is a secret, that Berlin is the capital of Germany
name|String
name|extraTextConent
init|=
name|TEXT_CONTENT
operator|+
literal|"\nIt is a secret, that the city of Berlin is the capital of Germany since 1990."
decl_stmt|;
comment|//The multipart entity for the contentItem
name|MultipartEntity
name|contentItem
init|=
operator|new
name|MultipartEntity
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
comment|//The multipart/alternate mime part for the parsed content versions
name|HttpMultipart
name|content
init|=
operator|new
name|HttpMultipart
argument_list|(
literal|"alternate"
argument_list|,
name|UTF8
argument_list|,
literal|"contentParts"
argument_list|)
decl_stmt|;
comment|//add the content part to the contentItem
name|contentItem
operator|.
name|addPart
argument_list|(
literal|"content"
argument_list|,
comment|//the name MUST BE "content"
operator|new
name|MultipartContentBody
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
comment|//now add the content (ordering is important, because the first
comment|//part will be assumed the original document and all following are
comment|//assumed alternate - transformed - versions
name|content
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
literal|"http://www.example.com/test.html"
argument_list|,
comment|//the id of the content
operator|new
name|StringBody
argument_list|(
name|HTML_CONTENT
argument_list|,
literal|"text/html"
argument_list|,
name|UTF8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|.
name|addBodyPart
argument_list|(
operator|new
name|FormBodyPart
argument_list|(
literal|"http://www.example.com/test.txt"
argument_list|,
operator|new
name|StringBody
argument_list|(
name|extraTextConent
argument_list|,
literal|"text/plain"
argument_list|,
name|UTF8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receivedContent
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/rdf+nt"
argument_list|)
operator|.
name|withEntity
argument_list|(
name|contentItem
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
comment|//and the expected enhancements in the metadata
literal|"http://purl.org/dc/terms/creator.*LangIdEnhancementEngine"
argument_list|,
literal|"http://purl.org/dc/terms/language.*en"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Paris"
argument_list|,
literal|"http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*EngineCore"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"
argument_list|,
comment|//check also for expeted entities extracted from the secret Text part!
literal|"http://fise.iks-project.eu/ontology/entity-label.*Berlin"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Germany"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|receivedContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentBeforeMetadata
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|UriRef
name|contentItemId
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.example.com/test.html"
argument_list|)
decl_stmt|;
name|String
name|rdfContentType
init|=
name|SupportedFormat
operator|.
name|RDF_XML
decl_stmt|;
name|String
name|rdfContent
init|=
name|getDummyRdfMetadata
argument_list|(
name|contentItemId
argument_list|,
name|rdfContentType
argument_list|)
decl_stmt|;
name|MultipartEntity
name|contentItem
init|=
operator|new
name|MultipartEntity
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
comment|//first the content -> illegal
name|contentItem
operator|.
name|addPart
argument_list|(
literal|"content"
argument_list|,
comment|//the name MUST BE "content"
operator|new
name|StringBody
argument_list|(
name|HTML_CONTENT
argument_list|,
literal|"text/html"
argument_list|,
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
comment|//after that the metadata
name|contentItem
operator|.
name|addPart
argument_list|(
literal|"metadata"
argument_list|,
comment|//the name MUST BE "metadata"
operator|new
name|StringBody
argument_list|(
name|rdfContent
argument_list|,
name|rdfContentType
argument_list|,
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receivedContent
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/rdf+nt"
argument_list|)
operator|.
name|withEntity
argument_list|(
name|contentItem
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|400
argument_list|)
comment|//BAD request
operator|.
name|getContent
argument_list|()
decl_stmt|;
comment|//check also the error message
name|Assert
operator|.
name|assertTrue
argument_list|(
name|receivedContent
operator|.
name|contains
argument_list|(
literal|"The Multipart MIME part with the 'metadata' MUST BE before the "
operator|+
literal|"MIME part containing the 'content'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingContent
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|UriRef
name|contentItemId
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.example.com/test.html"
argument_list|)
decl_stmt|;
name|String
name|rdfContentType
init|=
name|SupportedFormat
operator|.
name|RDF_XML
decl_stmt|;
name|String
name|rdfContent
init|=
name|getDummyRdfMetadata
argument_list|(
name|contentItemId
argument_list|,
name|rdfContentType
argument_list|)
decl_stmt|;
name|MultipartEntity
name|contentItem
init|=
operator|new
name|MultipartEntity
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
comment|//after that the metadata
name|contentItem
operator|.
name|addPart
argument_list|(
literal|"metadata"
argument_list|,
comment|//the name MUST BE "metadata"
operator|new
name|StringBody
argument_list|(
name|rdfContent
argument_list|,
name|rdfContentType
argument_list|,
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receivedContent
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/rdf+nt"
argument_list|)
operator|.
name|withEntity
argument_list|(
name|contentItem
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|400
argument_list|)
comment|//BAD request
operator|.
name|getContent
argument_list|()
decl_stmt|;
comment|//check also the error message
name|Assert
operator|.
name|assertTrue
argument_list|(
name|receivedContent
operator|.
name|contains
argument_list|(
literal|"The parsed multipart content item does not contain any content."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param contentItemId      * @param rdfContentType      * @return      */
specifier|private
name|String
name|getDummyRdfMetadata
parameter_list|(
specifier|final
name|UriRef
name|contentItemId
parameter_list|,
name|String
name|rdfContentType
parameter_list|)
block|{
name|MGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
operator|new
name|BNode
argument_list|()
argument_list|,
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|contentItemId
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|metadata
argument_list|,
name|rdfContentType
argument_list|)
expr_stmt|;
name|String
name|rdfContent
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
return|return
name|rdfContent
return|;
block|}
comment|/**      * Stanbol also supports to upload pre-existing metadata with the content.      * This UnitTest uses an example that parsed TextAnnotations for free text      * tags provided by users that are than linked to Entities in DBPedia      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testUploadWithMetadata
parameter_list|()
throws|throws
name|IOException
block|{
comment|//create the metadata
name|Resource
name|user
init|=
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"Rupert Westenthaler"
argument_list|)
decl_stmt|;
specifier|final
name|UriRef
name|contentItemId
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://www.example.com/test.html"
argument_list|)
decl_stmt|;
name|MGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|addTagAsTextAnnotation
argument_list|(
name|metadata
argument_list|,
name|contentItemId
argument_list|,
literal|"Germany"
argument_list|,
name|DBPEDIA_PLACE
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|addTagAsTextAnnotation
argument_list|(
name|metadata
argument_list|,
name|contentItemId
argument_list|,
literal|"Europe"
argument_list|,
name|DBPEDIA_PLACE
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|addTagAsTextAnnotation
argument_list|(
name|metadata
argument_list|,
name|contentItemId
argument_list|,
literal|"NATO"
argument_list|,
name|DBPEDIA_ORGANISATION
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|addTagAsTextAnnotation
argument_list|(
name|metadata
argument_list|,
name|contentItemId
argument_list|,
literal|"Silvio Berlusconi"
argument_list|,
name|DBPEDIA_PERSON
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
name|metadata
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|String
name|rdfContent
init|=
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
comment|//The multipart entity for the contentItem
name|MultipartEntity
name|contentItem
init|=
operator|new
name|MultipartEntity
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
comment|//the "metadata" MUST BE the first element
comment|/*          * NOTE: We need here to override the getFilename, because this MUST          *       BE the URI of the ContentItem. This is important, because the          *       Metadata do contain triples about that ContentItem and therefore          *       it MUST BE assured that the URI of the ContentItem created by          *       the Stanbol Enhancer is the same of as the URI used in the          *       Metadata!          */
name|contentItem
operator|.
name|addPart
argument_list|(
literal|"metadata"
argument_list|,
comment|//the name MUST BE "metadata"
operator|new
name|StringBody
argument_list|(
name|rdfContent
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|,
name|UTF8
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
comment|//The filename MUST BE the
return|return
name|contentItemId
operator|.
name|getUnicodeString
argument_list|()
return|;
comment|//uri of the ContentItem
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Add the Content
comment|/*          * NOTE: If we only parse a single content than we can also directly          *       add it with the name "content". This means that the useage of          *       a "multipart/alternate" container is in such cases optional.          */
name|contentItem
operator|.
name|addPart
argument_list|(
literal|"content"
argument_list|,
comment|//the name MUST BE "content"
operator|new
name|StringBody
argument_list|(
name|HTML_CONTENT
argument_list|,
literal|"text/html"
argument_list|,
name|UTF8
argument_list|)
argument_list|)
expr_stmt|;
comment|//send the request
name|String
name|receivedContent
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/rdf+nt"
argument_list|)
operator|.
name|withEntity
argument_list|(
name|contentItem
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
comment|//and the expected enhancements based on the parsed content
literal|"http://purl.org/dc/terms/creator.*LangIdEnhancementEngine"
argument_list|,
literal|"http://purl.org/dc/terms/language.*en"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Paris"
argument_list|,
literal|"http://purl.org/dc/terms/creator.*org.apache.stanbol.enhancer.engines.opennlp.*EngineCore"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-label.*Bob Marley"
argument_list|,
comment|//additional enhancements based on parsed metadata
literal|"http://fise.iks-project.eu/ontology/entity-reference.*http://dbpedia.org/resource/Germany.*"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-reference.*http://dbpedia.org/resource/NATO.*"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-reference.*http://dbpedia.org/resource/Silvio_Berlusconi.*"
argument_list|,
literal|"http://fise.iks-project.eu/ontology/entity-reference.*http://dbpedia.org/resource/Europe.*"
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Content:\n{}\n"
argument_list|,
name|receivedContent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility that creates an {@link TechnicalClasses#ENHANCER_TEXTANNOTATION TextAnnotation}      * for the parsed contentItem, free text tag an user.       * @param graph the grpah to add the information      * @param contentItem the {@link ContentItem#getUri() uri} of the {@link ContentItem}      * @param tag the free text tag for the document      * @param tagType the type of the tag. Typically Stanbol supports:<ul>      *<li>{@link OntologicalClasses#DBPEDIA_PERSON}      *<li>{@link OntologicalClasses#DBPEDIA_ORGANISATION}      *<li>{@link OntologicalClasses#DBPEDIA_PLACE}      *</ul>      * But specific {@link EnhancementEngine}s might also process other types      * or even TextAnnotations without an type      * @param user the user that created the tag      * @return the uri of the created annotation      */
specifier|private
specifier|static
specifier|final
name|UriRef
name|addTagAsTextAnnotation
parameter_list|(
name|MGraph
name|graph
parameter_list|,
name|UriRef
name|contentItem
parameter_list|,
name|String
name|tag
parameter_list|,
name|UriRef
name|tagType
parameter_list|,
name|Resource
name|user
parameter_list|)
block|{
name|UriRef
name|ta
init|=
operator|new
name|UriRef
argument_list|(
literal|"urn:user-annotation:"
operator|+
name|EnhancementEngineHelper
operator|.
name|randomUUID
argument_list|()
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|TechnicalClasses
operator|.
name|ENHANCER_TEXTANNOTATION
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|Properties
operator|.
name|ENHANCER_EXTRACTED_FROM
argument_list|,
name|contentItem
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tagType
operator|!=
literal|null
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|Properties
operator|.
name|DC_TYPE
argument_list|,
name|tagType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|Properties
operator|.
name|ENHANCER_SELECTED_TEXT
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|tag
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|TechnicalClasses
operator|.
name|ENHANCER_ENHANCEMENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|ta
argument_list|,
name|Properties
operator|.
name|DC_CREATOR
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ta
return|;
block|}
comment|/**      * Supports sending multipart mime as {@link ContentBody}.      * TODO: maybe move such utilities to an own Multipart ContentItem      * utility module      * @author Rupert Westenthaler      *      */
specifier|private
specifier|static
class|class
name|MultipartContentBody
extends|extends
name|AbstractContentBody
implements|implements
name|ContentBody
implements|,
name|ContentDescriptor
block|{
specifier|private
name|HttpMultipart
name|multipart
decl_stmt|;
specifier|public
name|MultipartContentBody
parameter_list|(
name|HttpMultipart
name|multipart
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"multipart/%s; boundary=%s"
argument_list|,
name|multipart
operator|.
name|getSubType
argument_list|()
argument_list|,
name|multipart
operator|.
name|getBoundary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|multipart
operator|=
name|multipart
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharset
parameter_list|()
block|{
return|return
name|multipart
operator|.
name|getCharset
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
return|return
name|MIME
operator|.
name|ENC_8BIT
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|multipart
operator|.
name|getTotalLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilename
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|multipart
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

