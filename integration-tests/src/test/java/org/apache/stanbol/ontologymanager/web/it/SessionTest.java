begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|stanbol
operator|.
name|StanbolTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_class
specifier|public
class|class
name|SessionTest
extends|extends
name|StanbolTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_URI
init|=
literal|"/ontonet"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SESSION_URI
init|=
name|ROOT_URI
operator|+
literal|"/session"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SessionTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSessionCreation
parameter_list|()
throws|throws
name|ClientProtocolException
throws|,
name|IOException
block|{
comment|/*log.info(executor.execute(             builder.buildPostRequest(SESSION_URI+"?scope="+encodeURI("http://localhost:8080/ontonet/ontology/User"))             .withHeader("Content-type",MediaType.APPLICATION_FORM_URLENCODED)             .withHeader("Accept",KRFormat.RDF_XML)         ).getContent()); //.assertStatus(200);*/
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|encodeURI
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|o
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|s
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|isUnsafe
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|o
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|o
operator|.
name|append
argument_list|(
name|toHex
argument_list|(
name|ch
operator|/
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|.
name|append
argument_list|(
name|toHex
argument_list|(
name|ch
operator|%
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|o
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|char
name|toHex
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
return|return
call|(
name|char
call|)
argument_list|(
name|ch
operator|<
literal|10
condition|?
literal|'0'
operator|+
name|ch
else|:
literal|'A'
operator|+
name|ch
operator|-
literal|10
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isUnsafe
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|>
literal|128
operator|||
name|ch
operator|<
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|" %$&+,/:;=?@<>#%"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
end_class

end_unit

