begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|web
operator|.
name|it
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|stanbol
operator|.
name|StanbolTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_class
specifier|public
class|class
name|ScopeTest
extends|extends
name|StanbolTestBase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_URI
init|=
literal|"/ontonet"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ONTOLOGY_URI
init|=
name|ROOT_URI
operator|+
literal|"/ontology"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ONT_FOAF_URI
init|=
literal|"http://xmlns.com/foaf/spec/index.rdf"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ONT_PIZZA_URI
init|=
literal|"http://www.co-ode.org/ontologies/pizza/2007/02/12/pizza.owl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ONT_WINE_URI
init|=
literal|"http://www.schemaweb.info/webservices/rest/GetRDFByID.aspx?id=62"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REG_TEST_URI
init|=
literal|"http://www.ontologydesignpatterns.org/registry/krestest.owl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE_BIZ_URI
init|=
name|ONTOLOGY_URI
operator|+
literal|"/"
operator|+
literal|"Biz"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE_DRUNK_URI
init|=
name|ONTOLOGY_URI
operator|+
literal|"/"
operator|+
literal|"Drunk"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE_USER_URI
init|=
name|ONTOLOGY_URI
operator|+
literal|"/"
operator|+
literal|"User"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE1_URI
init|=
name|ONTOLOGY_URI
operator|+
literal|"/"
operator|+
literal|"Pippo%20Baudo"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SCOPE2_URI
init|=
name|ONTOLOGY_URI
operator|+
literal|"/"
operator|+
literal|"TestScope2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScopeTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetScopes
parameter_list|()
throws|throws
name|ClientProtocolException
throws|,
name|IOException
block|{
name|RequestExecutor
name|request
decl_stmt|;
comment|// RDF_XML format
name|request
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|ONTOLOGY_URI
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"<imports rdf:resource=\"http://www.ontologydesignpatterns.org/schemas/meta.owl\"/>"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|ONTOLOGY_URI
operator|+
literal|"\n"
operator|+
name|request
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// TURTLE format
name|request
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|ONTOLOGY_URI
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|TURTLE
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
literal|"owl:imports<http://www.ontologydesignpatterns.org/schemas/meta.owl>"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Request: "
operator|+
name|ONTOLOGY_URI
operator|+
literal|"\n"
operator|+
name|request
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
name|SCOPE_DRUNK_URI
operator|+
literal|"?corereg="
operator|+
name|encodeURI
argument_list|(
name|REG_TEST_URI
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
name|SCOPE_DRUNK_URI
operator|+
literal|"?ontology="
operator|+
name|encodeURI
argument_list|(
name|ONT_WINE_URI
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocking
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a scope with a core ontology and a custom registry.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
name|SCOPE2_URI
operator|+
literal|"?customont="
operator|+
name|encodeURI
argument_list|(
name|ONT_PIZZA_URI
argument_list|)
operator|+
literal|"&corereg="
operator|+
name|encodeURI
argument_list|(
name|REG_TEST_URI
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
name|SCOPE2_URI
operator|+
literal|"?location"
operator|+
name|encodeURI
argument_list|(
name|ONT_PIZZA_URI
argument_list|)
operator|+
literal|"&registry=false"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get in RDF_XML format
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|SCOPE2_URI
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that the creation of active and inactive scopes is reflected in the RDF version of the scope set,      * whether it is set to display all scopes or only the active ones.      */
annotation|@
name|Test
specifier|public
name|void
name|testActiveVsAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The needed Web resources to GET from.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|ONTOLOGY_URI
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Request: "
operator|+
name|ONTOLOGY_URI
operator|+
literal|" ... DONE"
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|ONTOLOGY_URI
argument_list|,
literal|"with-inactive"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Request: "
operator|+
name|ONTOLOGY_URI
operator|+
literal|"?with-inactive=true"
operator|+
literal|" ... DONE"
argument_list|)
expr_stmt|;
comment|// Put a simple, inactive scope.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
name|SCOPE_USER_URI
operator|+
literal|"?coreont="
operator|+
name|encodeURI
argument_list|(
name|ONT_FOAF_URI
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Request: "
operator|+
name|SCOPE_USER_URI
operator|+
literal|"?coreont="
operator|+
name|ONT_FOAF_URI
operator|+
literal|" ... DONE"
argument_list|)
expr_stmt|;
comment|// Check that it is in the list of all scopes.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|SCOPE_USER_URI
argument_list|,
literal|"with-inactive"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|SCOPE_USER_URI
argument_list|)
expr_stmt|;
comment|// Check that it is not in the list of active scopes.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|SCOPE_USER_URI
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|SCOPE_USER_URI
argument_list|)
expr_stmt|;
comment|// Now create a scope that is active on startup.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
name|SCOPE_BIZ_URI
operator|+
literal|"?activate=true&coreont="
operator|+
name|encodeURI
argument_list|(
name|ONT_PIZZA_URI
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Request: "
operator|+
name|SCOPE_BIZ_URI
operator|+
literal|"?activate=true&coreont="
operator|+
name|ONT_PIZZA_URI
operator|+
literal|" ... DONE"
argument_list|)
expr_stmt|;
comment|// Check that it appears in both sets.
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|ONTOLOGY_URI
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|SCOPE_BIZ_URI
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|ONTOLOGY_URI
argument_list|,
literal|"with-inactive"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|KRFormat
operator|.
name|RDF_XML
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentContains
argument_list|(
name|SCOPE_BIZ_URI
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|encodeURI
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|o
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|s
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|isUnsafe
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|o
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|o
operator|.
name|append
argument_list|(
name|toHex
argument_list|(
name|ch
operator|/
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|.
name|append
argument_list|(
name|toHex
argument_list|(
name|ch
operator|%
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|o
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|char
name|toHex
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
return|return
call|(
name|char
call|)
argument_list|(
name|ch
operator|<
literal|10
condition|?
literal|'0'
operator|+
name|ch
else|:
literal|'A'
operator|+
name|ch
operator|-
literal|10
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isUnsafe
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|>
literal|128
operator|||
name|ch
operator|<
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|" %$&+,/:;=?@<>#%"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
end_class

end_unit

