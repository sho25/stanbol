begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|solr
operator|.
name|web
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RetryLoop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|stanbol
operator|.
name|StanbolTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SolrDispatchFilterComponentTestBase
extends|extends
name|StanbolTestBase
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrDispatchFilterComponentTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TIMEOUT_SECONDS
init|=
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|WAIT_BETWEEN_TRIES_MSEC
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|private
specifier|final
name|String
name|coreName
decl_stmt|;
specifier|private
name|boolean
name|coreReady
decl_stmt|;
specifier|private
name|boolean
name|timedOut
decl_stmt|;
specifier|protected
name|SolrDispatchFilterComponentTestBase
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|coreName
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed prefix MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreName
operator|==
literal|null
operator|||
name|coreName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The parsed name of the SolrCore MUST NOT be NULL nor empty"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|prefix
operator|+
literal|'/'
expr_stmt|;
block|}
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|coreName
operator|=
name|coreName
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|checkEnginesReady
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check only once per test run
if|if
condition|(
name|coreReady
condition|)
block|{
return|return;
block|}
comment|// If we timed out previously, don't waste time checking again
if|if
condition|(
name|timedOut
condition|)
block|{
name|fail
argument_list|(
literal|"Timeout in previous check of enhancement engines, cannot run tests"
argument_list|)
expr_stmt|;
block|}
comment|// We'll retry to send ping requests for to the configured core
specifier|final
name|RetryLoop
operator|.
name|Condition
name|c
init|=
operator|new
name|RetryLoop
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isTrue
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*  List of expected engines could be made configurable via system                  *  properties, but we don't expect it to change often.                   */
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
name|getCorePath
argument_list|()
operator|+
literal|"admin/ping"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
literal|"<str name=\"status\">OK</str>"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Solr Core {} is ready and mapped to {}"
argument_list|,
name|coreName
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Checking that SolrCore "
operator|+
name|coreName
operator|+
literal|" is ready"
return|;
block|}
block|}
decl_stmt|;
operator|new
name|RetryLoop
argument_list|(
name|c
argument_list|,
name|TIMEOUT_SECONDS
argument_list|,
name|WAIT_BETWEEN_TRIES_MSEC
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|reportException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Exception in RetryLoop, will retry for up to "
operator|+
name|getRemainingTimeSeconds
argument_list|()
operator|+
literal|" seconds: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onTimeout
parameter_list|()
block|{
name|timedOut
operator|=
literal|true
expr_stmt|;
block|}
block|}
expr_stmt|;
name|coreReady
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * The path to the configured Solr core       * @return<code>prefix+coreName+'/'</code>      */
specifier|public
name|String
name|getCorePath
parameter_list|()
block|{
return|return
name|prefix
operator|+
name|coreName
operator|+
literal|'/'
return|;
block|}
block|}
end_class

end_unit

