begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|httpqueryheaders
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|it
operator|.
name|StatelessEngineTest
operator|.
name|ACCEPT_FORMAT_TEST_DATA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|it
operator|.
name|EnhancerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|HttpQueryHeaderPostTest
extends|extends
name|EnhancerTestBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSetAccept
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ACCEPT_FORMAT_TEST_DATA
operator|.
name|length
condition|;
name|i
operator|+=
literal|3
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPost
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/engines"
argument_list|,
literal|"header_Accept"
argument_list|,
name|ACCEPT_FORMAT_TEST_DATA
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withContent
argument_list|(
literal|"Nothing"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
name|ACCEPT_FORMAT_TEST_DATA
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
name|ACCEPT_FORMAT_TEST_DATA
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOverrideAccept
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ACCEPT_FORMAT_TEST_DATA
operator|.
name|length
condition|;
name|i
operator|+=
literal|3
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPost
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/engines"
argument_list|,
literal|"header_Accept"
argument_list|,
name|ACCEPT_FORMAT_TEST_DATA
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
comment|//use an other Accept header
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
name|ACCEPT_FORMAT_TEST_DATA
index|[
operator|(
name|i
operator|+
literal|3
operator|)
operator|%
name|ACCEPT_FORMAT_TEST_DATA
operator|.
name|length
index|]
argument_list|)
operator|.
name|withContent
argument_list|(
literal|"Nothing"
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
name|ACCEPT_FORMAT_TEST_DATA
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
name|ACCEPT_FORMAT_TEST_DATA
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAccept
parameter_list|()
throws|throws
name|Exception
block|{
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPost
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/engines"
argument_list|,
literal|"header_Accept"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
comment|//override the parse Accept Header
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"text/turtle"
argument_list|)
comment|//set Accept to turtle (overridden)
operator|.
name|withContent
argument_list|(
literal|"John Smith was born in London."
argument_list|)
argument_list|)
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
comment|//check for JSON-LD (the default content type
operator|.
name|assertContentType
argument_list|(
literal|"application/json"
argument_list|)
operator|.
name|assertContentRegexp
argument_list|(
literal|"\"entity-reference\": \"http://dbpedia.org/resource/London\","
argument_list|,
literal|"\"creator\": \"org.apache.stanbol.enhancer.engines.langid.LangIdEnhancementEngine\""
argument_list|,
literal|"\"creator\": \"org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine\""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

