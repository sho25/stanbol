begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|it
operator|.
name|AssertEntityhubJson
operator|.
name|assertEntity
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|it
operator|.
name|AssertEntityhubJson
operator|.
name|assertQueryResults
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|it
operator|.
name|AssertEntityhubJson
operator|.
name|assertRepresentation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|query
operator|.
name|FieldQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|query
operator|.
name|FindQueryTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|query
operator|.
name|QueryTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests the RESTful service provided by the Entityhub. Note that this   * extends the QueryTestBase. By that generic tests for the query interface  * (e.g. illegal requests, usage of default values ...) are already covered.  * @author Rupert Westenthaler  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EntityhubTest
extends|extends
name|QueryTestBase
block|{
specifier|public
name|EntityhubTest
parameter_list|()
block|{
name|super
argument_list|(
literal|"/entityhub"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|EXPECTED_DOAP_FIELDS
decl_stmt|;
static|static
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#created"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#license"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#name"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#homepage"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#shortdesc"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#description"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#bug-database"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#mailing-list"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#download-page"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#programming-language"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://usefulinc.com/ns/doap#category"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"http://projects.apache.org/ns/asfext#pmc"
argument_list|)
expr_stmt|;
name|EXPECTED_DOAP_FIELDS
operator|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDefaultFindQueryField
parameter_list|()
block|{
return|return
name|NamespaceEnum
operator|.
name|entityhub
operator|+
literal|"label"
return|;
block|}
comment|/*      * Tests the CRUD interface      *       */
annotation|@
name|Test
specifier|public
name|void
name|testEntityCrud
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
comment|//execution order is important
name|testEntityCreation
argument_list|()
expr_stmt|;
name|testEntityCreated
argument_list|()
expr_stmt|;
name|testEntityUpdate
argument_list|()
expr_stmt|;
name|testEntityUpdated
argument_list|()
expr_stmt|;
name|testEntityDelete
argument_list|()
expr_stmt|;
name|testEntityDeleted
argument_list|()
expr_stmt|;
name|testEntityDeleteAll
argument_list|()
expr_stmt|;
name|testAllEntitiesDeleted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|EntityhubTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"doap_Stanbol.rdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to load test resource 'doap_Stanbol.rdf'"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|String
name|stanbolProjectUri
init|=
literal|"http://stanbol.apache.org"
decl_stmt|;
comment|//create a POST request with a test RDF file
name|RequestExecutor
name|test
init|=
name|executor
operator|.
name|execute
argument_list|(
name|buildImportRdfData
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|true
argument_list|,
name|stanbolProjectUri
argument_list|)
argument_list|)
decl_stmt|;
comment|//assert that the entity was created
name|test
operator|.
name|assertStatus
argument_list|(
literal|201
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityCreated
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|String
name|id
init|=
literal|"http://stanbol.apache.org"
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|JSONObject
name|jEntity
init|=
name|assertEntity
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|,
name|id
argument_list|,
literal|"entityhub"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|data
init|=
name|assertRepresentation
argument_list|(
name|jEntity
operator|.
name|getJSONObject
argument_list|(
literal|"representation"
argument_list|)
argument_list|,
name|EXPECTED_DOAP_FIELDS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//test values of two properties we will update in a following test
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|pmcValues
init|=
name|data
operator|.
name|get
argument_list|(
literal|"http://projects.apache.org/ns/asfext#pmc"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|pmcValues
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pmcValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://incubator.apache.org"
argument_list|,
name|pmcValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|downloadValues
init|=
name|data
operator|.
name|get
argument_list|(
literal|"http://usefulinc.com/ns/doap#download-page"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|downloadValues
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|downloadValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://stanbol.apache.org"
argument_list|,
name|downloadValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityUpdate
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|InputStream
name|in
init|=
name|EntityhubTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"mod_doap_Stanbol.rdf"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unable to load test resource 'mod_doap_Stanbol.rdf'"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|String
name|stanbolProjectUri
init|=
literal|"http://stanbol.apache.org"
decl_stmt|;
comment|//create a POST request with a test RDF file
name|RequestExecutor
name|test
init|=
name|executor
operator|.
name|execute
argument_list|(
name|buildImportRdfData
argument_list|(
name|in
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|,
name|stanbolProjectUri
argument_list|)
argument_list|)
decl_stmt|;
comment|//assert that the entity was created
name|test
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|//check that the updated entity was returned
name|assertEntity
argument_list|(
name|test
operator|.
name|getContent
argument_list|()
argument_list|,
name|stanbolProjectUri
argument_list|,
literal|"entityhub"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityUpdated
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|String
name|id
init|=
literal|"http://stanbol.apache.org"
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|JSONObject
name|jEntity
init|=
name|assertEntity
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|,
name|id
argument_list|,
literal|"entityhub"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|data
init|=
name|assertRepresentation
argument_list|(
name|jEntity
operator|.
name|getJSONObject
argument_list|(
literal|"representation"
argument_list|)
argument_list|,
name|EXPECTED_DOAP_FIELDS
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|pmcValues
init|=
name|data
operator|.
name|get
argument_list|(
literal|"http://projects.apache.org/ns/asfext#pmc"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|pmcValues
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pmcValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://stanbol.apache.org"
argument_list|,
name|pmcValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|downloadValues
init|=
name|data
operator|.
name|get
argument_list|(
literal|"http://usefulinc.com/ns/doap#download-page"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|downloadValues
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|downloadValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://stanbol.apache.org/downloads/"
argument_list|,
name|downloadValues
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|stanbolProjectUri
init|=
literal|"http://stanbol.apache.org"
decl_stmt|;
name|Request
name|request
init|=
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|stanbolProjectUri
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityDeleted
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|id
init|=
literal|"http://stanbol.apache.org"
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|404
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testEntityDeleteAll
parameter_list|()
throws|throws
name|IOException
block|{
name|Request
name|request
init|=
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAllEntitiesDeleted
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|id
init|=
literal|"http://xml.apache.org/xerces-c/"
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|404
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityLookup
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|String
name|uri
init|=
literal|"http://dbpedia.org/resource/Paris"
decl_stmt|;
comment|//first check that lookup without create returns 404
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/lookup"
argument_list|,
literal|"id"
argument_list|,
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|404
argument_list|)
expr_stmt|;
comment|//Now check that lookup with create does work
name|re
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/lookup"
argument_list|,
literal|"id"
argument_list|,
name|uri
argument_list|,
literal|"create"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|JSONObject
name|entity
init|=
name|assertEntity
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"entityhub"
argument_list|)
decl_stmt|;
name|String
name|ehUri
init|=
name|entity
operator|.
name|optString
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//try to retrieve the entity with the generated id
name|re
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|ehUri
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEntity
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|,
name|ehUri
argument_list|,
literal|"entityhub"
argument_list|)
expr_stmt|;
comment|//no try again to lookup the entity without create
name|re
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildGetRequest
argument_list|(
literal|"/entityhub/lookup"
argument_list|,
literal|"id"
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEntity
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|,
name|ehUri
argument_list|,
literal|"entityhub"
argument_list|)
expr_stmt|;
comment|//finally delete the entity
name|re
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|ehUri
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueries
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
comment|//first load the data for the rquery test
name|URL
name|url
init|=
name|EntityhubTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"apache-project-doap-files.zip"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|File
name|f
decl_stmt|;
try|try
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|f
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|ZipFile
name|archive
init|=
operator|new
name|ZipFile
argument_list|(
name|f
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|archive
operator|.
name|entries
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ZipEntry
name|entry
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|buildImportRdfData
argument_list|(
name|archive
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|RDF_XML
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|//assert that the entity was created (or already existed)
comment|//some projects seams to have more than a single doap file
name|int
name|status
init|=
name|re
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|==
literal|200
operator|||
name|status
operator|==
literal|304
argument_list|)
expr_stmt|;
block|}
name|testFindNameQuery
argument_list|()
expr_stmt|;
name|testFindWildcards
argument_list|()
expr_stmt|;
name|testFindLimitAndOffsetQuery
argument_list|()
expr_stmt|;
name|testFieldQueryTextConstraints
argument_list|()
expr_stmt|;
comment|//finally delete all added entity
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFindNameQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|FindQueryTestCase
name|test
init|=
operator|new
name|FindQueryTestCase
argument_list|(
literal|"Apache Stanbol"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://stanbol.apache.org"
argument_list|)
argument_list|)
decl_stmt|;
comment|//,
comment|//"http://dbpedia.org/resource/Paris_Hilton"));
name|test
operator|.
name|setField
argument_list|(
literal|"http://usefulinc.com/ns/doap#name"
argument_list|)
expr_stmt|;
name|test
operator|.
name|setLanguage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFindWildcards
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|FindQueryTestCase
name|test
init|=
operator|new
name|FindQueryTestCase
argument_list|(
literal|"Hiv*"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://hive.apache.org"
argument_list|,
literal|"http://jakarta.apache.org/hivemind/"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://beehive.apache.org"
argument_list|)
argument_list|)
decl_stmt|;
name|test
operator|.
name|setField
argument_list|(
literal|"http://usefulinc.com/ns/doap#name"
argument_list|)
expr_stmt|;
name|test
operator|.
name|setLanguage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFindLimitAndOffsetQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
comment|//With Solr4 we need a test that produces different scores for results,
comment|//to ensure consistant odering
name|FindQueryTestCase
name|test
init|=
operator|new
name|FindQueryTestCase
argument_list|(
literal|"XML XSL*"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://velocity.apache.org/anakia/"
argument_list|,
literal|"http://xalan.apache.org/xalan-c/"
argument_list|,
literal|"http://xalan.apache.org/xalan-j/"
argument_list|,
literal|"http://velocity.apache.org/dvsl/devel/"
argument_list|,
literal|"http://xmlgraphics.apache.org/commons/"
argument_list|,
literal|"http://xmlgraphics.apache.org/fop"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|test
operator|.
name|setField
argument_list|(
literal|"http://usefulinc.com/ns/doap#description"
argument_list|)
expr_stmt|;
name|test
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|test
operator|.
name|setLanguage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|RequestExecutor
name|re
init|=
name|executeQuery
argument_list|(
name|test
argument_list|)
decl_stmt|;
comment|//get the list of results (will assert the response twice)
comment|//to check the expected limit and offset results
name|List
argument_list|<
name|String
argument_list|>
name|resultList
init|=
name|assertQueryResults
argument_list|(
name|re
argument_list|,
name|test
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|resultList
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|//3rd and 4th element
name|List
argument_list|<
name|String
argument_list|>
name|excluded
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//all other
name|excluded
operator|.
name|addAll
argument_list|(
name|resultList
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|excluded
operator|.
name|addAll
argument_list|(
name|resultList
operator|.
name|subList
argument_list|(
literal|4
argument_list|,
name|resultList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//repeat the test with offset 2 and limit 2 to only retrieve the 3-4 result
name|test
operator|=
operator|new
name|FindQueryTestCase
argument_list|(
literal|"XML XSL*"
argument_list|,
name|expected
argument_list|,
name|excluded
argument_list|)
expr_stmt|;
name|test
operator|.
name|setField
argument_list|(
literal|"http://usefulinc.com/ns/doap#description"
argument_list|)
expr_stmt|;
name|test
operator|.
name|setOffset
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|test
operator|.
name|setLanguage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|executeQuery
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFieldQueryTextConstraints
parameter_list|()
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|FieldQueryTestCase
name|test
init|=
operator|new
name|FieldQueryTestCase
argument_list|(
literal|"{ "
operator|+
literal|"'selected': ["
operator|+
literal|"'http:\\/\\/usefulinc.com\\/ns\\/doap#name'],"
operator|+
literal|"'offset': '0',"
operator|+
literal|"'limit': '3',"
operator|+
literal|"'constraints': [{ "
operator|+
literal|"'type': 'text', "
operator|+
literal|"'patternType': 'wildcard', "
operator|+
literal|"'text': 'Stanbol', "
operator|+
literal|"'field': 'http:\\/\\/usefulinc.com\\/ns\\/doap#name' "
operator|+
literal|"},{ "
operator|+
literal|"'type': 'text', "
operator|+
literal|"'patternType': 'wildcard', "
operator|+
literal|"'text': 'Java', "
operator|+
literal|"'field': 'http:\\/\\/usefulinc.com\\/ns\\/doap#programming-language' "
operator|+
literal|"}]"
operator|+
literal|"}"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
comment|//list of expected results
literal|"http://stanbol.apache.org"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//now execute the test
name|executeQuery
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
comment|/**      * Imports/updates RDF data of the file to the entityhub with the possibility      * to restrict imports/updates to the parsed uri      * @param file the file with the RDF data (needs to be in the classpath)      * @param create if<code>true</code> the data are created (POST) otherwise      * updated (PUT).       * @param uri if not<code>null</code> only data of this URI are imported by      * specifying the id parameter      */
specifier|protected
name|Request
name|buildImportRdfData
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|contentType
parameter_list|,
name|boolean
name|create
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|Request
name|request
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/entityhub/entity"
argument_list|,
literal|"id"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|builder
operator|.
name|buildUrl
argument_list|(
literal|"/entityhub/entity"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|create
condition|)
block|{
name|request
operator|=
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPost
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|=
name|builder
operator|.
name|buildOtherRequest
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//set the HttpEntity (both PUT and POST are HttpEntityEnclosingRequests)
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|.
name|getRequest
argument_list|()
operator|)
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|in
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//finally set the correct content-type of the provided data
comment|//currently fixed to "application/rdf+xml"
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
end_class

end_unit

