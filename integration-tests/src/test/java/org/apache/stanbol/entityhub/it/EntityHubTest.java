begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|it
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|testing
operator|.
name|http
operator|.
name|RequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|test
operator|.
name|it
operator|.
name|EntityhubTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|//inherit from EnhancerTestBase, but we more care about the entityhub readiness than engine's one.
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EntityHubTest
extends|extends
name|EntityhubTestBase
block|{
specifier|public
name|EntityHubTest
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityHubTest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|PARIS_VALUE
init|=
literal|"{"
operator|+
literal|"'selected': [ "
operator|+
literal|"'http:\\/\\/www.w3.org\\/2000\\/01\\/rdf-schema#label', "
operator|+
literal|"'http:\\/\\/www.w3.org\\/1999\\/02\\/22-rdf-syntax-ns#type' "
operator|+
literal|"], "
operator|+
literal|"'offset': '0', "
operator|+
literal|"'limit': '3', "
operator|+
literal|"'constraints': [{ "
operator|+
literal|"'type': 'value', "
operator|+
literal|"'value': 'Paris', "
operator|+
literal|"'field': 'http:\\/\\/www.w3.org\\/2000\\/01\\/rdf-schema#label', "
operator|+
literal|"'dataTypes': ['http:\\/\\/www.iks-project.eu\\/ontology\\/rick\\/model\\/text'] "
operator|+
literal|"}]"
operator|+
literal|"}"
decl_stmt|;
specifier|final
name|String
name|PARIS_TEXT
init|=
literal|"{"
operator|+
literal|"'selected': [ "
operator|+
literal|"'http:\\/\\/www.w3.org\\/2000\\/01\\/rdf-schema#label', "
operator|+
literal|"'http:\\/\\/www.w3.org\\/1999\\/02\\/22-rdf-syntax-ns#type' "
operator|+
literal|"], "
operator|+
literal|"'offset': '0', "
operator|+
literal|"'limit': '3', "
operator|+
literal|"'constraints': [{ "
operator|+
literal|"'type': 'text', "
operator|+
literal|"'text': 'Paris', "
operator|+
literal|"'patternType' : 'none', "
operator|+
literal|"'field': 'http:\\/\\/www.w3.org\\/2000\\/01\\/rdf-schema#label', "
operator|+
literal|"'dataTypes': ['http:\\/\\/www.iks-project.eu\\/ontology\\/rick\\/model\\/text'] "
operator|+
literal|"}]"
operator|+
literal|"}"
decl_stmt|;
name|String
index|[]
name|queryRequests
init|=
block|{
name|PARIS_VALUE
block|,
name|PARIS_TEXT
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testQueryEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|queryRequests
control|)
block|{
name|i
operator|+=
literal|1
expr_stmt|;
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
literal|"/entityhub/sites/query"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
operator|.
name|withContent
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test request number {}/{} : "
argument_list|,
name|i
argument_list|,
name|queryRequests
operator|.
name|length
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|JSONObject
name|jso
init|=
operator|new
name|JSONObject
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|JSONArray
name|result
init|=
name|jso
operator|.
name|getJSONArray
argument_list|(
literal|"results"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSymbolFindEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|RequestExecutor
name|re
init|=
name|executor
operator|.
name|execute
argument_list|(
name|builder
operator|.
name|buildPostRequest
argument_list|(
literal|"/entityhub/sites/find"
argument_list|)
operator|.
name|withHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
operator|.
name|withContent
argument_list|(
literal|"name=Paris&lang=de"
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test request : "
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|re
operator|.
name|assertStatus
argument_list|(
literal|200
argument_list|)
operator|.
name|assertContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|JSONObject
name|jso
init|=
operator|new
name|JSONObject
argument_list|(
name|re
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|JSONArray
name|result
init|=
name|jso
operator|.
name|getJSONArray
argument_list|(
literal|"results"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

