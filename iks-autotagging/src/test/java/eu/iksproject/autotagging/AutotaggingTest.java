begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|autotagging
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|autotagging
operator|.
name|jena
operator|.
name|ModelIndexer
import|;
end_import

begin_class
specifier|public
class|class
name|AutotaggingTest
block|{
specifier|private
name|Model
name|model
decl_stmt|;
specifier|private
name|RAMDirectory
name|ramDirectory
decl_stmt|;
specifier|private
name|StandardAnalyzer
name|analyzer
decl_stmt|;
specifier|private
name|IndexWriter
name|writer
decl_stmt|;
specifier|protected
name|File
name|defaultIndexDirectory
decl_stmt|;
specifier|public
specifier|static
name|InputStream
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|InputStream
name|stream
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"failed to load resource "
operator|+
name|name
argument_list|,
name|stream
argument_list|)
expr_stmt|;
return|return
name|stream
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpDefaultIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create index from scratch
name|ModelIndexer
operator|.
name|buildDefaultIndex
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|model
operator|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
expr_stmt|;
name|ramDirectory
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|analyzer
operator|=
operator|new
name|StandardAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_30
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|ramDirectory
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|,
operator|new
name|IndexWriter
operator|.
name|MaxFieldLength
argument_list|(
literal|25000
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|read
argument_list|(
name|getResource
argument_list|(
literal|"dbpedia_3.4_instancetype_en.nt"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"N-TRIPLE"
argument_list|)
expr_stmt|;
name|model
operator|.
name|read
argument_list|(
name|getResource
argument_list|(
literal|"dbpedia_3.4_longabstract_en.nt"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"N-TRIPLE"
argument_list|)
expr_stmt|;
comment|// will reuse the index built by setUpDefaultIndex
name|defaultIndexDirectory
operator|=
name|ModelIndexer
operator|.
name|buildDefaultIndex
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndexing
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
comment|// index model without closing it since it is memory only
name|ModelIndexer
operator|.
name|index
argument_list|(
name|model
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// perform a query on the fulltext content of the abstracts in the model
name|IndexSearcher
name|isearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|ramDirectory
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// read-only=true
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|Version
operator|.
name|LUCENE_30
argument_list|,
literal|"http://dbpedia.org/property/abstract"
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|"1981"
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|isearcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// check that the match point to the expected entity
name|Document
name|hitDoc
init|=
name|isearcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/resource/%21Action_Pact%21"
argument_list|,
name|hitDoc
operator|.
name|get
argument_list|(
name|ModelIndexer
operator|.
name|URI_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|types
init|=
name|hitDoc
operator|.
name|getValues
argument_list|(
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|types
operator|.
name|length
argument_list|)
expr_stmt|;
name|isearcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutotaggingWithCustomIndex
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
comment|// index the model
name|testIndexing
argument_list|()
expr_stmt|;
comment|// perform a suggestion query
name|Autotagger
name|autotagger
init|=
operator|new
name|Autotagger
argument_list|(
name|ramDirectory
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TagInfo
argument_list|>
name|tags
init|=
name|autotagger
operator|.
name|suggest
argument_list|(
literal|"The punk side in me is telling me to listen to the british band Action Pact."
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/resource/%21Action_Pact%21"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"!Action Pact!"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.59
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConfidence
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/ontology/Band"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/ontology/Organisation"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.w3.org/2002/07/owl#Thing"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutotaggingWithDefaultIndex
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
comment|// build a tagger using a the default DBpedia based index
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|defaultIndexDirectory
argument_list|)
decl_stmt|;
name|Autotagger
name|autotagger
init|=
operator|new
name|Autotagger
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// perform a context similarity search for a Person
name|String
name|context
init|=
literal|"Let the autotagger guess who was a Jamaican"
operator|+
literal|" musician, a lead singer and guitarist"
operator|+
literal|" for a well known reggae band."
decl_stmt|;
name|List
argument_list|<
name|TagInfo
argument_list|>
name|tags
init|=
name|autotagger
operator|.
name|suggestForType
argument_list|(
name|context
argument_list|,
literal|"Person"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|TagInfo
name|bestGuess
init|=
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/resource/Bob_Marley"
argument_list|,
name|bestGuess
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bob Marley"
argument_list|,
name|bestGuess
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bestGuess
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|types
operator|.
name|contains
argument_list|(
literal|"http://www.w3.org/2002/07/owl#Thing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|types
operator|.
name|contains
argument_list|(
literal|"http://dbpedia.org/ontology/Person"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|types
operator|.
name|contains
argument_list|(
literal|"http://dbpedia.org/ontology/Artist"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|types
operator|.
name|contains
argument_list|(
literal|"http://dbpedia.org/ontology/MusicalArtist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityByNameWithContext
parameter_list|()
throws|throws
name|IOException
block|{
comment|// build a tagger using a the default DBpedia based index
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|defaultIndexDirectory
argument_list|)
decl_stmt|;
name|Autotagger
name|autotagger
init|=
operator|new
name|Autotagger
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// fuzzy lookup by entity name
name|String
name|name
init|=
literal|"the city of Paris"
decl_stmt|;
comment|// TODO: find an entity where the context can help filter out ambiguity
name|String
name|context
init|=
literal|"The river Seine flows in the city of Paris "
decl_stmt|;
comment|// strict name lookup (by default)
name|List
argument_list|<
name|TagInfo
argument_list|>
name|tags
init|=
name|autotagger
operator|.
name|suggestForType
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
literal|"Place"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tags
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// lax name lookup
name|tags
operator|=
name|autotagger
operator|.
name|withStrictNameLookup
argument_list|(
literal|false
argument_list|)
operator|.
name|suggestForType
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
literal|"Place"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/resource/Paris"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Paris"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityByNameWithoutContext
parameter_list|()
throws|throws
name|IOException
block|{
comment|// build a tagger using a the default DBpedia based index
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|defaultIndexDirectory
argument_list|)
decl_stmt|;
name|Autotagger
name|autotagger
init|=
operator|new
name|Autotagger
argument_list|(
name|dir
argument_list|)
operator|.
name|withStrictNameLookup
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// at least of one of the terms is matching
name|String
name|name
init|=
literal|"The city of Paris"
decl_stmt|;
name|List
argument_list|<
name|TagInfo
argument_list|>
name|tags
init|=
name|autotagger
operator|.
name|suggestForType
argument_list|(
name|name
argument_list|,
literal|"Place"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|tags
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://dbpedia.org/resource/Paris"
argument_list|,
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// try with non existing name
name|name
operator|=
literal|"somethingnot referencedin theindex"
expr_stmt|;
name|tags
operator|=
name|autotagger
operator|.
name|suggestForType
argument_list|(
name|name
argument_list|,
literal|"Place"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tags
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

