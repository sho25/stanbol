begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|autotagging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
operator|.
name|ShingleAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similar
operator|.
name|MoreLikeThis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similar
operator|.
name|MoreLikeThisQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|autotagging
operator|.
name|jena
operator|.
name|ModelIndexer
import|;
end_import

begin_comment
comment|/**  * Engine that uses a Lucene index of DBpedia entities (types and abstracts) to  * suggest the top 3 entities that are semantically related to the text content  * to annotate.  *  * @author ogrisel  */
end_comment

begin_class
specifier|public
class|class
name|Autotagger
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|String
name|typeFieldName
init|=
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
decl_stmt|;
specifier|private
specifier|final
name|String
name|lookupFieldName
init|=
literal|"http://www.w3.org/2000/01/rdf-schema#label"
decl_stmt|;
specifier|private
name|String
index|[]
name|likeFieldNames
init|=
block|{
literal|"http://www.w3.org/2000/01/rdf-schema#label"
block|,
literal|"http://dbpedia.org/property/abstract"
block|}
decl_stmt|;
specifier|private
name|String
name|idField
init|=
name|ModelIndexer
operator|.
name|URI_FIELD
decl_stmt|;
specifier|private
name|int
name|maxSuggestions
init|=
literal|3
decl_stmt|;
specifier|private
name|float
name|lookupBoost
init|=
literal|2f
decl_stmt|;
specifier|private
name|float
name|contextBoost
init|=
literal|1f
decl_stmt|;
specifier|private
name|Analyzer
name|analyzer
init|=
name|getDefaultAnalyzer
argument_list|()
decl_stmt|;
specifier|private
name|String
name|typePrefix
init|=
literal|"http://dbpedia.org/ontology/"
decl_stmt|;
specifier|private
name|boolean
name|strictLookup
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|Directory
name|directory
decl_stmt|;
specifier|public
name|Autotagger
parameter_list|(
name|Directory
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
specifier|static
name|Analyzer
name|getDefaultAnalyzer
parameter_list|()
block|{
return|return
operator|new
name|StandardAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_30
argument_list|)
return|;
block|}
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|(
name|boolean
name|withShingles
parameter_list|)
block|{
if|if
condition|(
name|withShingles
condition|)
block|{
return|return
operator|new
name|ShingleAnalyzerWrapper
argument_list|(
name|analyzer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|analyzer
return|;
block|}
block|}
specifier|public
name|Autotagger
name|withFieldNames
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|likeFieldNames
operator|=
name|fieldNames
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withIdFieldName
parameter_list|(
name|String
name|idField
parameter_list|)
block|{
name|this
operator|.
name|idField
operator|=
name|idField
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withMaxSuggestions
parameter_list|(
name|int
name|maxSuggestions
parameter_list|)
block|{
name|this
operator|.
name|maxSuggestions
operator|=
name|maxSuggestions
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withLookupBoost
parameter_list|(
name|float
name|lookupBoost
parameter_list|)
block|{
name|this
operator|.
name|lookupBoost
operator|=
name|lookupBoost
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withContextBoost
parameter_list|(
name|float
name|contextBoost
parameter_list|)
block|{
name|this
operator|.
name|contextBoost
operator|=
name|contextBoost
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withTypePrefix
parameter_list|(
name|String
name|typePrefix
parameter_list|)
block|{
name|this
operator|.
name|typePrefix
operator|=
name|typePrefix
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Autotagger
name|withStrictNameLookup
parameter_list|(
name|boolean
name|strictLookup
parameter_list|)
block|{
name|this
operator|.
name|strictLookup
operator|=
name|strictLookup
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Suggest entities that are textually similar to the given text.      *      * @param text      * @return entities info that best match the text      * @throws CorruptIndexException      * @throws IOException      */
specifier|public
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggest
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|suggest
argument_list|(
name|text
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Suggest entities that are textually similar to the given text. If the      * text is short enough, a fuzzy name lookup is performed instead. Further      * restrict the results to match the field values given in the fieldFilter      *      * @param text the textual content used for similarity search      * @param fieldFilters      * @return entities info that best match the text      * @throws CorruptIndexException      * @throws IOException      */
specifier|public
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggest
parameter_list|(
name|String
name|text
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldFilters
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// count tokens using the analyzer
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|tokens
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tokenStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|tokens
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|>
literal|3
condition|)
block|{
comment|// this is a context based suggestion
return|return
name|suggest
argument_list|(
literal|null
argument_list|,
name|text
argument_list|,
name|fieldFilters
argument_list|)
return|;
block|}
else|else
block|{
comment|// this is a name lookup
return|return
name|suggest
argument_list|(
name|text
argument_list|,
literal|null
argument_list|,
name|fieldFilters
argument_list|)
return|;
block|}
block|}
comment|/**      * Suggest entities that are fuzzy matching the given name and/or textually      * similar to the given context. Further restrict the results to match the      * field values given in the fieldFilter      *      * @param text the textual content used for similarity search      * @param fieldFilters      * @return entities info that best match the text      * @throws CorruptIndexException      * @throws IOException      */
specifier|public
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggest
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldFilters
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
operator|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name and context value cannot be both null or empty"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|TagInfo
argument_list|>
argument_list|(
name|maxSuggestions
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
try|try
block|{
comment|// fuzzy name lookup
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|lookupFieldName
argument_list|,
operator|new
name|StringReader
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|TermAttribute
name|termAtt
init|=
name|ts
operator|.
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|lookupFieldName
argument_list|,
name|termAtt
operator|.
name|term
argument_list|()
argument_list|)
argument_list|,
literal|0.8f
argument_list|)
decl_stmt|;
comment|// TODO: divide boost by number of terms
name|fuzzyQuery
operator|.
name|setBoost
argument_list|(
name|lookupBoost
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|fuzzyQuery
argument_list|,
name|strictLookup
condition|?
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
else|:
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
comment|// similarity context search
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
comment|// TODO: use FuzzyLikeThisQuery instead?
comment|// TODO: re-enable shingles once we can get rid of the "-"
comment|// shingles
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|new
name|MoreLikeThisQuery
argument_list|(
name|context
argument_list|,
name|likeFieldNames
argument_list|,
name|getAnalyzer
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|mltQuery
operator|.
name|setPercentTermsToMatch
argument_list|(
literal|0.15f
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMaxQueryTerms
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinTermFrequency
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setMinDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mltQuery
operator|.
name|setBoost
argument_list|(
name|contextBoost
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|mltQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
comment|// additional exact match filters
if|if
condition|(
name|fieldFilters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldFilter
range|:
name|fieldFilters
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|value
range|:
name|fieldFilter
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TermQuery
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldFilter
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
decl_stmt|;
comment|// should not influence ranking, just filtering
name|tq
operator|.
name|setBoost
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|maxSuggestions
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|maxSuggestions
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|double
name|confidence
init|=
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
decl_stmt|;
if|if
condition|(
name|confidence
operator|==
literal|0.0
condition|)
block|{
comment|// this might happen with BooleanClause.Occur.SHOULD queries
continue|continue;
block|}
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|d
operator|.
name|get
argument_list|(
name|idField
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"entity '%s' matches with score %f"
argument_list|,
name|id
argument_list|,
name|confidence
argument_list|)
argument_list|)
expr_stmt|;
comment|// assuming we are using DBPedia, we are extracting the label
comment|// from the entity URI to avoid loading the lucene index with
comment|// a stored label field
name|String
name|label
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|id
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
literal|"http://dbpedia.org/resource/"
operator|.
name|length
argument_list|()
argument_list|,
name|label
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|=
name|label
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|TagInfo
name|tag
init|=
operator|new
name|TagInfo
argument_list|(
name|id
argument_list|,
name|label
argument_list|,
name|d
operator|.
name|getValues
argument_list|(
name|typeFieldName
argument_list|)
argument_list|,
name|confidence
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|suggestions
return|;
block|}
comment|/**      * Suggest entities that are fuzzy matching the given text (if short) or      * textually similar to the text (if long). Further restrict the results to      * match the type given either as full URI or DBpedia class name.      *      * @param name      * @param context      * @param type      * @return ranked entities info that best match      * @throws CorruptIndexException      * @throws IOException      */
specifier|public
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggestForType
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldFilters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
block|{
name|type
operator|=
name|typePrefix
operator|+
name|type
expr_stmt|;
block|}
name|fieldFilters
operator|.
name|put
argument_list|(
name|typeFieldName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|suggest
argument_list|(
name|text
argument_list|,
name|fieldFilters
argument_list|)
return|;
block|}
comment|/**      * Suggest entities that are fuzzy matching the given name and/or textually      * similar to the given context. Further restrict the results to match the      * type given either as full URI or DBpedia class name.      *      * @param name      * @param context      * @param type      * @return ranked entities info that best match      * @throws CorruptIndexException      * @throws IOException      */
specifier|public
name|List
argument_list|<
name|TagInfo
argument_list|>
name|suggestForType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|context
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fieldFilters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
block|{
name|type
operator|=
name|typePrefix
operator|+
name|type
expr_stmt|;
block|}
name|fieldFilters
operator|.
name|put
argument_list|(
name|typeFieldName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|suggest
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|fieldFilters
argument_list|)
return|;
block|}
specifier|public
name|String
index|[]
name|mostImportantTerms
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MoreLikeThis
name|mlt
init|=
operator|new
name|MoreLikeThis
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|mlt
operator|.
name|setFieldNames
argument_list|(
name|likeFieldNames
argument_list|)
expr_stmt|;
name|mlt
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|mlt
operator|.
name|setMaxQueryTerms
argument_list|(
name|maxSuggestions
argument_list|)
expr_stmt|;
return|return
name|mlt
operator|.
name|retrieveInterestingTerms
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

