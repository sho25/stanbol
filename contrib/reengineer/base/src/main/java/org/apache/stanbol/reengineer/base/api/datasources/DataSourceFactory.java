begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|datasources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|reengineer
operator|.
name|base
operator|.
name|api
operator|.
name|settings
operator|.
name|ConnectionSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DataSourceFactory
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataSourceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|DataSource
name|createDataSource
parameter_list|(
name|int
name|dataSourceType
parameter_list|,
name|Object
name|source
parameter_list|)
throws|throws
name|NoSuchDataSourceExpection
throws|,
name|InvalidDataSourceForTypeSelectedException
block|{
name|DataSource
name|dataSource
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Created data source for object of type {}"
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|dataSourceType
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|source
operator|instanceof
name|ConnectionSettings
condition|)
block|{
name|dataSource
operator|=
operator|new
name|RDB
argument_list|(
operator|(
name|ConnectionSettings
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidDataSourceForTypeSelectedException
argument_list|(
name|source
argument_list|)
throw|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|source
operator|instanceof
name|InputStream
condition|)
block|{
name|dataSource
operator|=
operator|new
name|XML
argument_list|(
operator|(
name|InputStream
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidDataSourceForTypeSelectedException
argument_list|(
name|source
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|NoSuchDataSourceExpection
argument_list|(
name|dataSourceType
argument_list|)
throw|;
block|}
return|return
name|dataSource
return|;
block|}
block|}
end_class

end_unit

