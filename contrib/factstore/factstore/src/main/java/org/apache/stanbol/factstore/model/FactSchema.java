begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|factstore
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|jsonld
operator|.
name|JsonLdProfile
import|;
end_import

begin_class
specifier|public
class|class
name|FactSchema
block|{
specifier|private
name|String
name|factSchemaURN
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|roleMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getFactSchemaURN
parameter_list|()
block|{
return|return
name|factSchemaURN
return|;
block|}
specifier|public
name|void
name|setFactSchemaURN
parameter_list|(
name|String
name|factSchemaURN
parameter_list|)
block|{
name|this
operator|.
name|factSchemaURN
operator|=
name|factSchemaURN
expr_stmt|;
block|}
specifier|public
name|void
name|addRole
parameter_list|(
name|String
name|role
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|roleMap
operator|.
name|get
argument_list|(
name|role
argument_list|)
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|roleMap
operator|.
name|put
argument_list|(
name|role
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|this
operator|.
name|roleMap
operator|.
name|get
argument_list|(
name|role
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|this
operator|.
name|roleMap
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTypesOfRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|this
operator|.
name|roleMap
operator|.
name|get
argument_list|(
name|role
argument_list|)
return|;
block|}
specifier|public
name|JsonLdProfile
name|toJsonLdProfile
parameter_list|()
block|{
name|JsonLdProfile
name|profile
init|=
operator|new
name|JsonLdProfile
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|role
range|:
name|this
operator|.
name|roleMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|profile
operator|.
name|addTypes
argument_list|(
name|role
argument_list|,
name|this
operator|.
name|roleMap
operator|.
name|get
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|profile
return|;
block|}
specifier|public
specifier|static
name|FactSchema
name|fromJsonLdProfile
parameter_list|(
name|String
name|factSchemaURN
parameter_list|,
name|JsonLdProfile
name|jsonLd
parameter_list|)
block|{
if|if
condition|(
name|factSchemaURN
operator|==
literal|null
operator|||
name|factSchemaURN
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Fact schema URN must not be empty"
argument_list|)
throw|;
block|}
name|FactSchema
name|factSchema
init|=
operator|new
name|FactSchema
argument_list|()
decl_stmt|;
name|factSchema
operator|.
name|setFactSchemaURN
argument_list|(
name|factSchemaURN
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|role
range|:
name|jsonLd
operator|.
name|getTypes
argument_list|()
control|)
block|{
comment|// we have to unCURIE the types here to be sure it is not stored as a CURIE
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|jsonLd
operator|.
name|getTypes
argument_list|(
name|role
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|type
operator|=
name|jsonLd
operator|.
name|unCURIE
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|factSchema
operator|.
name|addRole
argument_list|(
name|role
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|factSchema
return|;
block|}
specifier|public
name|boolean
name|hasRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|this
operator|.
name|roleMap
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|role
argument_list|)
return|;
block|}
specifier|public
name|String
name|fixSpellingOfRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
for|for
control|(
name|String
name|correctSpelledRole
range|:
name|this
operator|.
name|roleMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|role
operator|.
name|equalsIgnoreCase
argument_list|(
name|correctSpelledRole
argument_list|)
condition|)
block|{
return|return
name|correctSpelledRole
return|;
block|}
block|}
return|return
name|role
return|;
block|}
block|}
end_class

end_unit

