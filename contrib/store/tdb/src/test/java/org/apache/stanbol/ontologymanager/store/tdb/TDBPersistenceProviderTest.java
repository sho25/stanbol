begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|tdb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|JenaPersistenceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDBPersistenceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|tdb
operator|.
name|TDB
import|;
end_import

begin_class
specifier|public
class|class
name|TDBPersistenceProviderTest
block|{
specifier|private
specifier|static
name|JenaPersistenceProvider
name|TDBProvider
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|testURIs
init|=
block|{
literal|"http://www.co-ode.org/ontologies/pizza/pizza.owl"
block|,
literal|"http://protege.cim3.net/file/pub/ontologies/camera/camera.owl"
block|,
literal|"http://protege.cim3.net/file/pub/ontologies/koala/koala.owl"
block|,
literal|"http://www.w3.org/TR/owl-guide/wine.rdf"
block|}
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpCase
parameter_list|()
throws|throws
name|Exception
block|{
name|TDBProvider
operator|=
operator|new
name|TDBPersistenceProvider
argument_list|()
expr_stmt|;
operator|(
operator|(
name|TDBPersistenceProvider
operator|)
name|TDBProvider
operator|)
operator|.
name|activate
argument_list|(
operator|new
name|DummyComponentContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|createAndLoadOntology
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|Model
name|model
init|=
name|TDBProvider
operator|.
name|createModel
argument_list|(
name|ontologyURI
argument_list|)
decl_stmt|;
name|model
operator|.
name|read
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownCase
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|model
range|:
name|TDBProvider
operator|.
name|listModels
argument_list|()
control|)
block|{
name|TDB
operator|.
name|sync
argument_list|(
name|TDBProvider
operator|.
name|getModel
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TDB
operator|.
name|closedown
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"target/testDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testCreateModel
parameter_list|()
block|{
for|for
control|(
name|String
name|uri
range|:
name|testURIs
control|)
block|{
name|createAndLoadOntology
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetModel
parameter_list|()
block|{
for|for
control|(
name|String
name|uri
range|:
name|testURIs
control|)
block|{
name|Model
name|model
init|=
name|TDBProvider
operator|.
name|getModel
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|model
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|model
operator|.
name|listStatements
argument_list|()
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testGetResourceManager
parameter_list|()
block|{      }
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testHasModel
parameter_list|()
block|{
for|for
control|(
name|String
name|uri
range|:
name|testURIs
control|)
block|{
name|assertTrue
argument_list|(
name|TDBProvider
operator|.
name|hasModel
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|TDBProvider
operator|.
name|hasModel
argument_list|(
literal|"http://somedummyURI"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TDBProvider
operator|.
name|hasModel
argument_list|(
literal|"http://anotherDummyURI"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testListModels
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|includedURIs
init|=
name|TDBProvider
operator|.
name|listModels
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|includedURIs
operator|.
name|size
argument_list|()
argument_list|,
name|testURIs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|testURIs
control|)
block|{
name|assertTrue
argument_list|(
name|includedURIs
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|removeModel
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
name|testURIs
index|[
name|i
index|]
decl_stmt|;
name|TDBProvider
operator|.
name|removeModel
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testURIs
operator|.
name|length
operator|-
name|i
operator|-
literal|1
argument_list|,
name|TDBProvider
operator|.
name|listModels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|TDBProvider
operator|.
name|getModel
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|clean
parameter_list|()
block|{
name|TDBProvider
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|testURIs
control|)
block|{
name|assertFalse
argument_list|(
name|TDBProvider
operator|.
name|hasModel
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|uri
range|:
name|testURIs
control|)
block|{
name|Model
name|model
init|=
name|TDBProvider
operator|.
name|getModel
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

