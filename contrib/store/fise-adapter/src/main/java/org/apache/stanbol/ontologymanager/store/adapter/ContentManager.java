begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
operator|.
name|util
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ContentManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContentManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_INDEX_FILE
init|=
literal|"content_index.properties"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|contentMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Properties
name|contentIndex
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
name|File
name|contentFolder
decl_stmt|;
specifier|public
name|ContentManager
parameter_list|(
name|File
name|contentFolder
parameter_list|)
block|{
name|File
name|indexFile
decl_stmt|;
name|this
operator|.
name|contentFolder
operator|=
name|contentFolder
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|checkContentFolder
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Content folder OK"
argument_list|)
expr_stmt|;
name|indexFile
operator|=
name|getIndexFile
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Index file OK"
argument_list|)
expr_stmt|;
name|loadIndexEntries
argument_list|(
name|indexFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Content loaded OK"
argument_list|)
expr_stmt|;
name|printContentMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|String
name|id
parameter_list|,
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|triple
parameter_list|)
block|{
name|IOUtil
name|ioUtil
init|=
name|IOUtil
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|UUID
name|contentAlias
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|String
name|contentType
init|=
name|triple
operator|.
name|getEntry1
argument_list|()
decl_stmt|;
name|byte
index|[]
name|content
init|=
name|triple
operator|.
name|getEntry2
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|triple
operator|.
name|getEntry3
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Overriding previous content for: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|contentIndex
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|Triple
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|contentType
argument_list|,
name|contentAlias
operator|.
name|toString
argument_list|()
argument_list|,
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|contentFolder
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|contentAlias
argument_list|)
decl_stmt|;
try|try
block|{
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|ioUtil
operator|.
name|writeBytesToFile
argument_list|(
name|f
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create file: {}"
argument_list|,
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return;
block|}
name|contentMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|(
name|contentType
argument_list|,
name|content
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|store
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|File
name|contentFile
init|=
operator|new
name|File
argument_list|(
name|contentFolder
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|Triple
operator|.
name|createTriple
argument_list|(
name|contentIndex
operator|.
name|getProperty
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|getEntry2
argument_list|()
argument_list|)
decl_stmt|;
name|contentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|contentIndex
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|contentMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|getContent
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|contentMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|void
name|store
parameter_list|()
block|{
name|IOUtil
name|ioUtil
init|=
name|IOUtil
operator|.
name|getInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|contentIndex
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|contentFolder
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|CONTENT_INDEX_FILE
argument_list|)
argument_list|,
literal|"Content Index"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|item
range|:
name|contentMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fileName
init|=
name|contentIndex
operator|.
name|getProperty
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|contentFolder
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Content file for {}  does not exist. Sycnhronizing ..."
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|getEntry1
argument_list|()
argument_list|)
expr_stmt|;
name|ioUtil
operator|.
name|writeBytesToFile
argument_list|(
name|file
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|getEntry2
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|". Sycnhronization Completed ..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot find file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadIndexEntries
parameter_list|(
name|File
name|indexFile
parameter_list|)
block|{
name|IOUtil
name|ioUtil
init|=
name|IOUtil
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|danglingItems
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// Read index porperties file
try|try
block|{
name|contentIndex
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|indexFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can not get index file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can not get content of index file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Populate in memory cache with real content-contentType-uri triples
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|contentIndex
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Triple
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
name|metaTriple
init|=
name|Triple
operator|.
name|createTriple
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|contentFile
init|=
operator|new
name|File
argument_list|(
name|contentFolder
argument_list|,
name|metaTriple
operator|.
name|getEntry2
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|content
init|=
literal|null
decl_stmt|;
try|try
block|{
name|content
operator|=
name|ioUtil
operator|.
name|getBytesFromFile
argument_list|(
name|contentFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|contentMap
operator|.
name|remove
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|danglingItems
operator|.
name|add
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|contentMap
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|(
name|metaTriple
operator|.
name|getEntry1
argument_list|()
argument_list|,
name|content
argument_list|,
name|metaTriple
operator|.
name|getEntry3
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Remove dangling content entries
for|for
control|(
name|Object
name|di
range|:
name|danglingItems
control|)
block|{
name|contentIndex
operator|.
name|remove
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Dangling Item Removed: {}"
argument_list|,
name|di
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|getIndexFile
parameter_list|()
block|{
name|File
name|indexFile
init|=
operator|new
name|File
argument_list|(
name|contentFolder
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|CONTENT_INDEX_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|indexFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Can not create index file: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|indexFile
return|;
block|}
specifier|private
name|void
name|checkContentFolder
parameter_list|()
block|{
if|if
condition|(
operator|!
name|contentFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|contentFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contentFolder
operator|.
name|exists
argument_list|()
operator|&&
name|contentFolder
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|contentFolder
operator|.
name|delete
argument_list|()
expr_stmt|;
name|contentFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printContentMap
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Content Items Dump"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|contentMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Item: {}, {}, {}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|entry
operator|.
name|getKey
argument_list|()
block|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getEntry1
argument_list|()
block|,                          ,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getEntry2
argument_list|()
operator|.
name|length
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

