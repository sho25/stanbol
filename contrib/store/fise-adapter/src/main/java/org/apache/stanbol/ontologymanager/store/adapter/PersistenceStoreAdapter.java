begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
operator|.
name|util
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|adapter
operator|.
name|util
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|PersistenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|AdministeredOntologies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|model
operator|.
name|OntologyMetaInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|PersistenceStoreAdapter
implements|implements
name|Store
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PersistenceStoreAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|PersistenceStore
name|pStore
decl_stmt|;
specifier|private
name|ContentManager
name|cm
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|)
specifier|private
name|Parser
name|parser
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|)
specifier|private
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
comment|// FIXME Need to bind Jena Parsing Provider here?
comment|// FIXME Need to bind Jena Serializing Provider here?
name|this
operator|.
name|cm
operator|=
operator|new
name|ContentManager
argument_list|(
name|cc
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getDataFile
argument_list|(
literal|"Content Items"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|cc
parameter_list|)
block|{
name|this
operator|.
name|cm
operator|.
name|store
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Persistence Store Adaptor deactivated successfully"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ContentItem
name|create
parameter_list|(
name|String
name|id
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
return|return
name|SimpleContentItem
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|content
argument_list|,
name|contentType
argument_list|)
return|;
block|}
specifier|public
name|ContentItem
name|get
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|contentEntry
init|=
name|cm
operator|.
name|getContent
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentEntry
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Content Item Not Found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|content
init|=
name|contentEntry
operator|.
name|getEntry2
argument_list|()
decl_stmt|;
name|String
name|mimeType
init|=
name|contentEntry
operator|.
name|getEntry1
argument_list|()
decl_stmt|;
name|String
name|URI
init|=
name|contentEntry
operator|.
name|getEntry3
argument_list|()
decl_stmt|;
name|MGraph
name|mg
init|=
name|readModel
argument_list|(
name|URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|mg
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Content item not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|content
operator|==
literal|null
operator|||
name|mimeType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|assemble
argument_list|(
name|id
argument_list|,
name|mg
argument_list|,
name|contentEntry
operator|.
name|getEntry1
argument_list|()
argument_list|,
name|contentEntry
operator|.
name|getEntry2
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|put
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
block|{
name|MGraph
name|mg
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|IOUtil
name|ioUtil
init|=
name|IOUtil
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|content
decl_stmt|;
name|String
name|uri
decl_stmt|;
name|content
operator|=
name|writeModel
argument_list|(
name|mg
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// FIXME Here assign a new id
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"How to assign a new id with current interface"
argument_list|)
throw|;
block|}
name|uri
operator|=
name|ContentItemHelper
operator|.
name|ensureUri
argument_list|(
name|ci
argument_list|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
try|try
block|{
name|Boolean
name|deleted
init|=
name|pStore
operator|.
name|deleteOntology
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Previous ontology deleted: {}"
argument_list|,
name|deleted
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// No need to log since it is actually an existence check
block|}
try|try
block|{
name|pStore
operator|.
name|saveOntology
argument_list|(
name|content
argument_list|,
name|uri
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|cm
operator|.
name|put
argument_list|(
name|ci
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Triple
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|(
name|ci
operator|.
name|getMimeType
argument_list|()
argument_list|,
name|ioUtil
operator|.
name|convertStreamToString
argument_list|(
name|ci
operator|.
name|getStream
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception in saving the ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception in saving the ontology"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ci
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|private
name|ContentItem
name|assemble
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|MGraph
name|metadata
parameter_list|,
specifier|final
name|String
name|contentType
parameter_list|,
specifier|final
name|byte
index|[]
name|content
parameter_list|)
block|{
return|return
operator|new
name|SimpleContentItem
argument_list|(
name|id
argument_list|,
name|metadata
argument_list|,
name|contentType
argument_list|,
name|content
argument_list|)
return|;
block|}
specifier|private
name|String
name|writeModel
parameter_list|(
name|MGraph
name|mg
parameter_list|)
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|this
operator|.
name|serializer
operator|.
name|serialize
argument_list|(
name|bos
argument_list|,
name|mg
argument_list|,
literal|"application/rdf+xml"
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|MGraph
name|readModel
parameter_list|(
name|String
name|URI
parameter_list|)
block|{
comment|// Model model = null;
name|MGraph
name|model
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|String
name|ontologyContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ontologyContent
operator|=
name|pStore
operator|.
name|retrieveOntology
argument_list|(
name|URI
argument_list|,
literal|"RDF/XML"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception in retrieving the ontology "
operator|+
name|URI
argument_list|,
name|e1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|Graph
name|graph
init|=
name|this
operator|.
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|ontologyContent
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
literal|"application/rdf+xml"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|URI
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|addAll
argument_list|(
name|graph
argument_list|)
expr_stmt|;
return|return
name|model
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception in reading the model"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|getEnhancementGraph
parameter_list|()
block|{
try|try
block|{
name|AdministeredOntologies
name|onts
init|=
name|pStore
operator|.
name|retrieveAdministeredOntologies
argument_list|()
decl_stmt|;
name|MGraph
name|mgraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|OntologyMetaInformation
name|ont
range|:
name|onts
operator|.
name|getOntologyMetaInformation
argument_list|()
control|)
block|{
name|String
name|content
init|=
name|pStore
operator|.
name|retrieveOntology
argument_list|(
name|ont
operator|.
name|getURI
argument_list|()
argument_list|,
literal|"RDF/XML"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Graph
name|gr
init|=
name|this
operator|.
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
literal|"application/rdf+xml"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|ont
operator|.
name|getURI
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mgraph
operator|.
name|addAll
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
return|return
name|mgraph
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception in retrieveing enhancement graph"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SimpleMGraph
argument_list|()
return|;
block|}
block|}
end_class

end_unit

