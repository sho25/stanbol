begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|api
operator|.
name|LockManager
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|LockManagerImp
implements|implements
name|LockManager
block|{
specifier|private
name|Lock
name|internalLock
init|=
literal|null
decl_stmt|;
specifier|private
name|ReentrantReadWriteLock
name|globalSpaceLock
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ReentrantReadWriteLock
argument_list|>
name|rwlockList
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|index
init|=
literal|null
decl_stmt|;
specifier|public
name|LockManagerImp
parameter_list|()
block|{
name|rwlockList
operator|=
operator|new
name|Vector
argument_list|<
name|ReentrantReadWriteLock
argument_list|>
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
argument_list|()
expr_stmt|;
name|internalLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|globalSpaceLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|LockManager
name|instance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|LockManager
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|LockManagerImp
argument_list|()
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.ontologymanager.store.rest.ILockManager#obtainReadLockFor(java.lang.String)      */
specifier|public
name|void
name|obtainReadLockFor
parameter_list|(
name|String
name|ontologyPath
parameter_list|)
block|{
if|if
condition|(
name|ontologyPath
operator|.
name|equalsIgnoreCase
argument_list|(
name|GLOBAL_SPACE
argument_list|)
condition|)
block|{
name|globalSpaceLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|closureID
init|=
name|getClosureIDFor
argument_list|(
name|ontologyPath
argument_list|)
decl_stmt|;
name|internalLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|containsKey
argument_list|(
name|closureID
argument_list|)
condition|)
block|{
name|ReentrantReadWriteLock
name|rrwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|rwlockList
operator|.
name|add
argument_list|(
name|rrwl
argument_list|)
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|closureID
argument_list|,
name|rrwl
argument_list|)
expr_stmt|;
block|}
name|internalLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|rrwl
init|=
name|index
operator|.
name|get
argument_list|(
name|closureID
argument_list|)
decl_stmt|;
name|globalSpaceLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|rrwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.ontologymanager.store.rest.ILockManager#releaseReadLockFor(java.lang.String)      */
specifier|public
name|void
name|releaseReadLockFor
parameter_list|(
name|String
name|ontologyPath
parameter_list|)
block|{
if|if
condition|(
name|ontologyPath
operator|.
name|equalsIgnoreCase
argument_list|(
name|GLOBAL_SPACE
argument_list|)
condition|)
block|{
name|globalSpaceLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|closureID
init|=
name|getClosureIDFor
argument_list|(
name|ontologyPath
argument_list|)
decl_stmt|;
name|ReentrantReadWriteLock
name|rrwl
init|=
name|index
operator|.
name|get
argument_list|(
name|closureID
argument_list|)
decl_stmt|;
name|rrwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|globalSpaceLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.ontologymanager.store.rest.ILockManager#obtainWriteLockFor(java.lang.String)      */
specifier|public
name|void
name|obtainWriteLockFor
parameter_list|(
name|String
name|ontologyPath
parameter_list|)
block|{
if|if
condition|(
name|ontologyPath
operator|.
name|equalsIgnoreCase
argument_list|(
name|GLOBAL_SPACE
argument_list|)
condition|)
block|{
name|globalSpaceLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|closureID
init|=
name|getClosureIDFor
argument_list|(
name|ontologyPath
argument_list|)
decl_stmt|;
name|internalLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|containsKey
argument_list|(
name|closureID
argument_list|)
condition|)
block|{
name|ReentrantReadWriteLock
name|rrwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|rwlockList
operator|.
name|add
argument_list|(
name|rrwl
argument_list|)
expr_stmt|;
name|index
operator|.
name|put
argument_list|(
name|closureID
argument_list|,
name|rrwl
argument_list|)
expr_stmt|;
block|}
name|internalLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|ReentrantReadWriteLock
name|rrwl
init|=
name|index
operator|.
name|get
argument_list|(
name|closureID
argument_list|)
decl_stmt|;
name|globalSpaceLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|rrwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.stanbol.ontologymanager.store.rest.ILockManager#releaseWriteLockFor(java.lang.String)      */
specifier|public
name|void
name|releaseWriteLockFor
parameter_list|(
name|String
name|ontologyPath
parameter_list|)
block|{
if|if
condition|(
name|ontologyPath
operator|.
name|equalsIgnoreCase
argument_list|(
name|GLOBAL_SPACE
argument_list|)
condition|)
block|{
name|globalSpaceLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|closureID
init|=
name|getClosureIDFor
argument_list|(
name|ontologyPath
argument_list|)
decl_stmt|;
name|ReentrantReadWriteLock
name|rrwl
init|=
name|index
operator|.
name|get
argument_list|(
name|closureID
argument_list|)
decl_stmt|;
name|rrwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|globalSpaceLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getClosureIDFor
parameter_list|(
name|String
name|ontologyPath
parameter_list|)
block|{
return|return
name|ontologyPath
return|;
block|}
block|}
end_class

end_unit

