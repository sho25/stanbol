begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|MockOsgiContext
operator|.
name|parser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|MockOsgiContext
operator|.
name|serializer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|MockOsgiContext
operator|.
name|tcManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|MockOsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|OfflineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|OfflineConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|clerezza
operator|.
name|ClerezzaOntologyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|RegistryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|api
operator|.
name|model
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|registry
operator|.
name|impl
operator|.
name|RegistryManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestSchemaMatchers
block|{
specifier|private
name|String
name|kbId
init|=
literal|"http://stanbol.apache.org/ontologies/explanation_testdata"
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Library
name|kps
decl_stmt|,
name|kpmappings
decl_stmt|;
specifier|private
specifier|static
name|RegistryManager
name|regman
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupLibrary
parameter_list|()
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// We need this to make sure the local meta.owl (which does not import codolight) is loaded.
name|configuration
operator|.
name|put
argument_list|(
name|OfflineConfiguration
operator|.
name|ONTOLOGY_PATHS
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/ontologies"
block|,
literal|"/schemas"
block|,
literal|"/schemas/registry"
block|}
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
name|RegistryManager
operator|.
name|REGISTRY_LOCATIONS
argument_list|,
operator|new
name|String
index|[]
block|{
name|TestSchemaMatchers
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/schemas/registry/explanation.owl"
argument_list|)
operator|.
name|toString
argument_list|()
block|,
name|TestSchemaMatchers
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/schemas/registry/explanation-mappings.owl"
argument_list|)
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|OfflineConfiguration
name|offline
init|=
operator|new
name|OfflineConfigurationImpl
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|regman
operator|=
operator|new
name|RegistryManagerImpl
argument_list|(
name|offline
argument_list|,
operator|new
name|ClerezzaOntologyProvider
argument_list|(
name|tcManager
argument_list|,
name|offline
argument_list|,
name|parser
argument_list|)
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
comment|// The model should be created by now.
comment|// for (Library lib : regman.getLibraries()) {
comment|// System.out.println(lib.getIRI() + " : " + lib.getName());
comment|// }
comment|// IRI id =
comment|// IRI.create("http://www.ontologydesignpatterns.org/registry/explanation.owl#ExplanationSchemaCatalog");
comment|// IRI[] locations = new IRI[] {};
comment|// kps = new LibraryImpl(id, "Knowledge Pattern additions",
comment|// OWLOntologyManagerFactory.createOWLOntologyManager(locations));
comment|// kps.addChild(child)
block|}
annotation|@
name|After
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|MockOsgiContext
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClerezzaMatcher
parameter_list|()
throws|throws
name|Exception
block|{
name|MGraph
name|kb
init|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|kbId
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/ontologies/explanation_testdata.owl"
argument_list|)
decl_stmt|;
comment|// get the singleton instance of Parser
name|Graph
name|deserializedGraph
init|=
name|parser
operator|.
name|parse
argument_list|(
name|inputStream
argument_list|,
literal|"application/rdf+xml"
argument_list|)
decl_stmt|;
name|kb
operator|.
name|addAll
argument_list|(
name|deserializedGraph
argument_list|)
expr_stmt|;
comment|/* DEBUG code */
comment|// UriRef fp = new UriRef("http://xmlns.com/foaf/0.1/Person");
comment|// Iterator<Triple> triples = kb.filter(null, null, fp);
comment|// while (triples.hasNext())
comment|// log.debug("{}", triples.next());
comment|// triples = kb.filter(fp, null, null);
comment|// while (triples.hasNext())
comment|// log.debug("{}", triples.next());
name|String
name|uf
init|=
name|Data
operator|.
name|URI_FANTOZZI
decl_stmt|;
name|ClerezzaSchemaMatcher
name|matcher
init|=
operator|new
name|ClerezzaSchemaMatcherImpl
argument_list|(
name|MockOsgiContext
operator|.
name|onManager
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|matcher
operator|.
name|setKnowledgeBase
argument_list|(
name|kb
operator|.
name|getGraph
argument_list|()
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|getSatisfiableSchemas
argument_list|(
name|regman
operator|.
name|getLibraries
argument_list|()
argument_list|,
operator|new
name|UriRef
argument_list|(
name|uf
argument_list|)
argument_list|)
expr_stmt|;
name|uf
operator|=
name|Data
operator|.
name|URI_RICCARDELLI
expr_stmt|;
name|matcher
operator|.
name|getSatisfiableSchemas
argument_list|(
name|regman
operator|.
name|getLibraries
argument_list|()
argument_list|,
operator|new
name|UriRef
argument_list|(
name|uf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

