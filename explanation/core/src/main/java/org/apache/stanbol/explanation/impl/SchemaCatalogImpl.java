begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|api
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|api
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|api
operator|.
name|SchemaCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ontology
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of a knowledge schema.  *   * @author alessandro  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|specVersion
operator|=
literal|"1.1"
argument_list|)
annotation|@
name|Service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SchemaCatalog
operator|.
name|ID
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SchemaCatalog
operator|.
name|LOCATION
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|SchemaCatalog
operator|.
name|CUSTOM_SCHEMAS
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|SchemaCatalogImpl
implements|implements
name|SchemaCatalog
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IRI
argument_list|,
name|Schema
argument_list|>
name|schemas
init|=
operator|new
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|Schema
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_UNARY
argument_list|)
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|public
name|SchemaCatalogImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SchemaCatalogImpl
parameter_list|(
name|String
name|id
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
comment|// Copy the id over to a hashtable
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|componentConfig
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|componentConfig
operator|.
name|put
argument_list|(
name|SchemaCatalog
operator|.
name|ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
try|try
block|{
name|activate
argument_list|(
name|componentConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to access servlet context."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ExplanationGeneratorImpl
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|id
operator|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|SchemaCatalog
operator|.
name|ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|id
operator|=
literal|"unnamed-"
operator|+
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|ONManager
name|onm
init|=
name|config
operator|.
name|getOntologyNetworkManager
argument_list|()
decl_stmt|;
comment|// Get the scope and populate the custom space with the registry ontologies.
name|String
name|registry
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|SchemaCatalog
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|OntologyScope
name|scope
init|=
name|onm
operator|.
name|getScopeRegistry
argument_list|()
operator|.
name|getScope
argument_list|(
name|config
operator|.
name|getScopeID
argument_list|()
argument_list|)
decl_stmt|;
comment|//            // TODO: to cache or not to cache?
comment|//            OntologyInputSource src = new OntologyRegistryIRISource(IRI.create(registry),
comment|//                    onm.getOwlCacheManager(), onm.getRegistryLoader());
comment|//            try {
comment|//                scope.getCustomSpace().addOntology(src);
comment|//            } catch (UnmodifiableOntologySpaceException e) {
comment|//                log.warn("Could not add registry {} to unmodifiable space {}.", registry,
comment|//                    scope.getCustomSpace());
comment|//            }
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Schema Catalog activated."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|schemas
operator|.
name|put
argument_list|(
name|schema
operator|.
name|getID
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearSchems
parameter_list|()
block|{
name|schemas
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|Schema
name|getSchema
parameter_list|(
name|IRI
name|schemaID
parameter_list|)
block|{
return|return
name|schemas
operator|.
name|get
argument_list|(
name|schemaID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Schema
argument_list|>
name|getSchemas
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|Schema
argument_list|>
argument_list|(
name|schemas
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSchema
parameter_list|(
name|IRI
name|schemaID
parameter_list|)
block|{
return|return
name|schemas
operator|.
name|containsKey
argument_list|(
name|schemaID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSchema
parameter_list|(
name|IRI
name|schemaId
parameter_list|)
block|{
name|schemas
operator|.
name|remove
argument_list|(
name|schemaId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|Schema
name|sc
init|=
name|schemas
operator|.
name|get
argument_list|(
name|schema
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
literal|null
operator|&&
name|sc
operator|.
name|equals
argument_list|(
name|schema
argument_list|)
condition|)
name|schemas
operator|.
name|remove
argument_list|(
name|schema
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

