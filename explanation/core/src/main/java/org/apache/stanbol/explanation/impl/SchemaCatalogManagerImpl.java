begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|api
operator|.
name|SchemaCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|explanation
operator|.
name|api
operator|.
name|SchemaCatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|SchemaCatalogManagerImpl
implements|implements
name|SchemaCatalogManager
block|{
specifier|private
specifier|static
specifier|final
name|String
name|_ODP_CATALOG_DEFAULT
init|=
literal|"http://www.ontologydesignpatterns.org/registry/explanation.owl"
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|SchemaCatalog
operator|.
name|class
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindSchemaCatalog"
argument_list|,
name|unbind
operator|=
literal|"unbindSchemaCatalog"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaCatalog
argument_list|>
name|catalogs
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|addCatalog
parameter_list|(
name|SchemaCatalog
name|catalog
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaCatalog
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchemaCatalog
argument_list|>
argument_list|(
name|catalogs
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|put
argument_list|(
name|catalog
operator|.
name|getId
argument_list|()
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
name|this
operator|.
name|catalogs
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invoked automatically by OSGi-DS when a new {@link SchemaCatalog} is registered. For non-DS-aware      * environments, just use the inherited interface method {@link #addCatalog(SchemaCatalog)}.      *       * @param catalog      *            the schema catalog to be bound with this manager.      */
specifier|protected
name|void
name|bindSchemaCatalog
parameter_list|(
name|SchemaCatalog
name|catalog
parameter_list|)
block|{
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Binding catalog {} to catalog manager."
argument_list|,
name|catalog
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|SchemaCatalog
argument_list|>
name|getCatalogs
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|SchemaCatalog
argument_list|>
argument_list|(
name|catalogs
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeCatalog
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaCatalog
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchemaCatalog
argument_list|>
argument_list|(
name|catalogs
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|catalogs
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invoked automatically by OSGi-DS when a {@link SchemaCatalog} is deregistered. For non-DS-aware      * environments, just use the inherited interface method {@link #removeCatalog(String)}.      *       * @param catalog      *            the schema catalog to be unbound from this manager.      */
specifier|protected
name|void
name|unbindSchemaCatalog
parameter_list|(
name|SchemaCatalog
name|catalog
parameter_list|)
block|{
if|if
condition|(
name|catalog
operator|!=
literal|null
operator|&&
name|catalogs
operator|.
name|containsKey
argument_list|(
name|catalog
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Unbinding catalog {} from catalog manager."
argument_list|,
name|catalog
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|removeCatalog
argument_list|(
name|catalog
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

