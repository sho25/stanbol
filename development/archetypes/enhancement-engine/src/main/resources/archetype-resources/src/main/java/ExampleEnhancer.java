begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
name|set
argument_list|(
name|$symbol_pound
operator|=
literal|'#'
argument_list|)
expr|#
name|set
argument_list|(
name|$symbol_dollar
operator|=
literal|'$'
argument_list|)
expr|#
name|set
argument_list|(
name|$symbol_escape
operator|=
literal|'\' )
package|package
name|$
block|{
package|package
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|DCTERMS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|EnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|InvalidContentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|ServiceProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|ContentItemHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|impl
operator|.
name|AbstractEnhancementEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
comment|//allow multiple service instances (false for a  singelton instance)
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|OPTIONAL
argument_list|,
comment|//use REQUIRE if a non default option is present
name|immediate
operator|=
literal|true
argument_list|,
comment|//activate service instances on startup
name|metatype
operator|=
literal|true
argument_list|,
name|inherit
operator|=
literal|true
argument_list|,
name|specVersion
operator|=
literal|"1.1"
argument_list|)
annotation|@
name|Service
comment|//this will register the engine as an OSGI service
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
comment|//Configuration properties included in the config form
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|EnhancementEngine
operator|.
name|PROPERTY_NAME
argument_list|,
name|value
operator|=
literal|"${artifactId}-example"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|intValue
operator|=
literal|0
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ExampleEnhancer
extends|extends
name|AbstractEnhancementEngine
argument_list|<
name|RuntimeException
argument_list|,
name|RuntimeException
argument_list|>
implements|implements
name|EnhancementEngine
implements|,
name|ServiceProperties
block|{
comment|/**      * Using slf4j for logging      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExampleEnhancer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Configuration property for option 1      */
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|ExampleEnhancer
operator|.
name|DEFAULT_OPTION1_VALUE
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|EXAMPLE_CONFIG_OPTION1
init|=
literal|"${package}.option1"
decl_stmt|;
comment|/**      * The default value for EXAMPLE_CONFIG_OPTION1      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OPTION1_VALUE
init|=
literal|"value1"
decl_stmt|;
comment|/**      * The value of option1      */
specifier|private
name|String
name|option1
decl_stmt|;
comment|/**      * TODO: change to fit your engine. See constants defined in the       * ServiceProperties class      */
specifier|protected
specifier|static
specifier|final
name|Integer
name|ENGINE_ORDERING
init|=
name|ServiceProperties
operator|.
name|ORDERING_PRE_PROCESSING
decl_stmt|;
comment|/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -       * OSGI lifecycle methods      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -       */
comment|/**      * Activate and read the properties. Configures and initialises a POSTagger for each language configured in      * CONFIG_LANGUAGES.      *      * @param ce the {@link org.osgi.service.component.ComponentContext}      */
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|ce
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|activate
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"activating {}: {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|ce
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//TODO: parse custom properties
comment|//As Example we parse EXAMPLE_CONFIG_OPTION1 form the config
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|EXAMPLE_CONFIG_OPTION1
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|option1
operator|=
name|DEFAULT_OPTION1_VALUE
expr_stmt|;
block|}
else|else
block|{
name|option1
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deactivating {}: {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: reset fields to default, close resources ...
name|option1
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|deactivate
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//call deactivate on the super class
block|}
comment|/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -       * ServiceProperties interface method      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -       */
comment|/**      * ServiceProperties are currently only used for automatic ordering of the       * execution of EnhancementEngines (e.g. by the WeightedChain implementation).      * Default ordering means that the engine is called after all engines that      * use a value< {@link ServiceProperties#ORDERING_CONTENT_EXTRACTION}      * and>= {@link ServiceProperties#ORDERING_EXTRACTION_ENHANCEMENT}.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|singletonMap
argument_list|(
name|ENHANCEMENT_ENGINE_ORDERING
argument_list|,
name|ENGINE_ORDERING
argument_list|)
argument_list|)
return|;
block|}
comment|/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -       * EnhancementEngine interface methods      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -       */
comment|/**      * @return if and how (asynchronously) we can enhance a ContentItem      */
specifier|public
name|int
name|canEnhance
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// check if a Content in the supported type is available
comment|//NOTE: you can parse multiple content types
name|Entry
argument_list|<
name|UriRef
argument_list|,
name|Blob
argument_list|>
name|textBlob
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|textBlob
operator|==
literal|null
condition|)
block|{
return|return
name|CANNOT_ENHANCE
return|;
block|}
comment|//TODO: test additional requirements for this EnhancementEngine
comment|// no reason why we should require to be executed synchronously
return|return
name|ENHANCE_ASYNC
return|;
block|}
specifier|public
name|void
name|computeEnhancements
parameter_list|(
name|ContentItem
name|ci
parameter_list|)
throws|throws
name|EngineException
block|{
comment|//(1) retrieve the required data from the ConentItem
name|String
name|content
decl_stmt|;
try|try
block|{
comment|//get the (generated or submitted) text version of the ContentItem
name|Blob
name|textBlob
init|=
name|ContentItemHelper
operator|.
name|getBlob
argument_list|(
name|ci
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//Blob provides an InputStream. Use the Utility to load the String
name|content
operator|=
name|ContentItemHelper
operator|.
name|getText
argument_list|(
name|textBlob
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception reading content item."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidContentException
argument_list|(
literal|"Exception reading content item."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|//(2) compute the enhancements
name|int
name|contentLength
init|=
name|content
operator|.
name|length
argument_list|()
decl_stmt|;
comment|//(3) write the enhancement results
comment|// get the metadata graph
name|MGraph
name|metadata
init|=
name|ci
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
comment|//NOTE: as we allow synchronous calls we need to use read/write
comment|// locks on the ContentItem
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// TODO: replace this with real enhancements
name|UriRef
name|textAnnotation
init|=
name|EnhancementEngineHelper
operator|.
name|createTextEnhancement
argument_list|(
name|ci
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|DCTERMS
operator|.
name|type
argument_list|,
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/ontology/LengthEnhancement"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|textAnnotation
argument_list|,
name|RDFS
operator|.
name|comment
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"A text of "
operator|+
name|contentLength
operator|+
literal|" charaters"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ci
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

