begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_expr_stmt
unit|#
name|set
argument_list|(
name|$symbol_pound
operator|=
literal|'#'
argument_list|)
expr|#
name|set
argument_list|(
name|$symbol_dollar
operator|=
literal|'$'
argument_list|)
expr|#
name|set
argument_list|(
name|$symbol_escape
operator|=
literal|'\' )
package|package
name|$
block|{
package|package
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|TrailingSlash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|BNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|security
operator|.
name|TcAccessController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|security
operator|.
name|TcPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|DC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|GraphNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|UnionMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|indexedgraph
operator|.
name|IndexedMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|viewable
operator|.
name|RdfViewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|model
operator|.
name|clerezza
operator|.
name|RdfValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|site
operator|.
name|SiteManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Uses the SiteManager to resolve entities. Every requested is recorded to  * a graph. The client gets information and meta-information about the resource  * and sees all previous requests for that resource.  */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Object
operator|.
name|class
argument_list|)
annotation|@
name|Property
argument_list|(
name|name
operator|=
literal|"javax.ws.rs"
argument_list|,
name|boolValue
operator|=
literal|true
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"${artifactId}"
argument_list|)
specifier|public
class|class
name|ResourceResolver
block|{
comment|/**      * Using slf4j for normal logging      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This service allows to get entities from configures sites      */
annotation|@
name|Reference
specifier|private
name|SiteManager
name|siteManager
decl_stmt|;
comment|/**      * This service allows accessing and creating persistent triple collections      */
annotation|@
name|Reference
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
comment|/**      * This is the name of the graph in which we "log" the requests      */
specifier|private
name|UriRef
name|REQUEST_LOG_GRAPH_NAME
init|=
operator|new
name|UriRef
argument_list|(
literal|"http://example.org/resource-resolver-log.graph"
argument_list|)
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The example service is being activated"
argument_list|)
expr_stmt|;
try|try
block|{
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|REQUEST_LOG_GRAPH_NAME
argument_list|)
expr_stmt|;
comment|//now make sure everybody can read from the graph
comment|//or more precisly, anybody who can read the content-graph
name|TcAccessController
name|tca
init|=
operator|new
name|TcAccessController
argument_list|(
name|tcManager
argument_list|)
decl_stmt|;
name|tca
operator|.
name|setRequiredReadPermissions
argument_list|(
name|REQUEST_LOG_GRAPH_NAME
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|(
name|Permission
operator|)
operator|new
name|TcPermission
argument_list|(
literal|"urn:x-localinstance:/content.graph"
argument_list|,
literal|"read"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The graph for the request log already exists"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The example service is being deactivated"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method return an RdfViewable, this is an RDF serviceUri with associated      * presentational information.      */
annotation|@
name|GET
specifier|public
name|RdfViewable
name|serviceEntry
parameter_list|(
annotation|@
name|Context
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"iri"
argument_list|)
specifier|final
name|UriRef
name|iri
parameter_list|,
annotation|@
name|HeaderParam
argument_list|(
literal|"user-agent"
argument_list|)
name|String
name|userAgent
parameter_list|)
throws|throws
name|Exception
block|{
comment|//this maks sure we are nt invoked with a trailing slash which would affect
comment|//relative resolution of links (e.g. css)
name|TrailingSlash
operator|.
name|enforcePresent
argument_list|(
name|uriInfo
argument_list|)
expr_stmt|;
specifier|final
name|String
name|resourcePath
init|=
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//The URI at which this service was accessed accessed, this will be the
comment|//central serviceUri in the response
specifier|final
name|UriRef
name|serviceUri
init|=
operator|new
name|UriRef
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
comment|//the in memory graph to which the triples for the response are added
specifier|final
name|MGraph
name|responseGraph
init|=
operator|new
name|IndexedMGraph
argument_list|()
decl_stmt|;
comment|//A union graph containing both the response specif triples as well
comment|//as the log-graph
specifier|final
name|UnionMGraph
name|resultGraph
init|=
operator|new
name|UnionMGraph
argument_list|(
name|responseGraph
argument_list|,
name|getRequestLogGraph
argument_list|()
argument_list|)
decl_stmt|;
comment|//This GraphNode represents the service within our result graph
specifier|final
name|GraphNode
name|node
init|=
operator|new
name|GraphNode
argument_list|(
name|serviceUri
argument_list|,
name|resultGraph
argument_list|)
decl_stmt|;
comment|//The triples will be added to the first graph of the union
comment|//i.e. to the in-memory responseGraph
name|node
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|Ontology
operator|.
name|ResourceResolver
argument_list|)
expr_stmt|;
name|node
operator|.
name|addProperty
argument_list|(
name|RDFS
operator|.
name|comment
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
literal|"A Resource Resolver"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iri
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|addProperty
argument_list|(
name|Ontology
operator|.
name|describes
argument_list|,
name|iri
argument_list|)
expr_stmt|;
name|addResourceDescription
argument_list|(
name|iri
argument_list|,
name|responseGraph
argument_list|)
expr_stmt|;
name|logRequest
argument_list|(
name|iri
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
block|}
comment|//What we return is the GraphNode we created with a template path
return|return
operator|new
name|RdfViewable
argument_list|(
literal|"ResourceResolver"
argument_list|,
name|node
argument_list|,
name|ResourceResolver
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Add the description of a serviceUri to the specified MGraph using SiteManager.      * The description includes the metadata provided by the SiteManager.      *       */
specifier|private
name|void
name|addResourceDescription
parameter_list|(
name|UriRef
name|iri
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
specifier|final
name|Entity
name|entity
init|=
name|siteManager
operator|.
name|getEntity
argument_list|(
name|iri
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RdfValueFactory
name|valueFactory
init|=
operator|new
name|RdfValueFactory
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
specifier|final
name|Representation
name|representation
init|=
name|entity
operator|.
name|getRepresentation
argument_list|()
decl_stmt|;
if|if
condition|(
name|representation
operator|!=
literal|null
condition|)
block|{
name|valueFactory
operator|.
name|toRdfRepresentation
argument_list|(
name|representation
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Representation
name|metadata
init|=
name|entity
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|valueFactory
operator|.
name|toRdfRepresentation
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Logs a request to the log-graph      */
specifier|private
name|void
name|logRequest
parameter_list|(
specifier|final
name|UriRef
name|iri
parameter_list|,
specifier|final
name|String
name|userAgent
parameter_list|)
block|{
comment|//writing to a persistent graph requires some special permission
comment|//by executing the code in a do-priviledged section
comment|//the user doesn't need this permissions, anonymous users are thus not
comment|//asked to log in
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
specifier|final
name|MGraph
name|logGraph
init|=
name|getRequestLogGraph
argument_list|()
decl_stmt|;
name|GraphNode
name|loggedRequest
init|=
operator|new
name|GraphNode
argument_list|(
operator|new
name|BNode
argument_list|()
argument_list|,
name|logGraph
argument_list|)
decl_stmt|;
name|loggedRequest
operator|.
name|addProperty
argument_list|(
name|RDF
operator|.
name|type
argument_list|,
name|Ontology
operator|.
name|LoggedRequest
argument_list|)
expr_stmt|;
name|loggedRequest
operator|.
name|addPropertyValue
argument_list|(
name|DC
operator|.
name|date
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|loggedRequest
operator|.
name|addPropertyValue
argument_list|(
name|Ontology
operator|.
name|userAgent
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
name|loggedRequest
operator|.
name|addProperty
argument_list|(
name|Ontology
operator|.
name|requestedEntity
argument_list|,
name|iri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * This returns the existing MGraph for the log .      *       * @return the MGraph to which the requests are logged      */
specifier|private
name|MGraph
name|getRequestLogGraph
parameter_list|()
block|{
return|return
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|REQUEST_LOG_GRAPH_NAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

