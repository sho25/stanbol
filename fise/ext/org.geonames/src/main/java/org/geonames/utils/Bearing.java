begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2006 Marc Wick, geonames.org  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|geonames
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|atan
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|cos
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|sin
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toRadians
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|toDegrees
import|;
end_import

begin_comment
comment|/**  * compass bearing from the first point to the second point in degrees.  *   * @author Mark Thomas  */
end_comment

begin_class
specifier|public
class|class
name|Bearing
block|{
comment|/** 	 * Returns the direction from the first point to the second point in 	 * degrees. The direction is the clockwise angle between the magnetic north 	 * and the direction from point1 to point2 	 *  	 * @param lat1 	 * @param lng1 	 * @param lat2 	 * @param lng2 	 * @return 	 */
specifier|public
specifier|static
name|double
name|calculateBearing
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lng1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lng2
parameter_list|)
block|{
specifier|final
name|double
name|x3
init|=
name|toRadians
argument_list|(
name|lat1
argument_list|)
decl_stmt|;
specifier|final
name|double
name|y3
init|=
name|toRadians
argument_list|(
name|lng1
argument_list|)
decl_stmt|;
specifier|final
name|double
name|x4
init|=
name|toRadians
argument_list|(
name|lat2
argument_list|)
decl_stmt|;
specifier|final
name|double
name|y4
init|=
name|toRadians
argument_list|(
name|lng2
argument_list|)
decl_stmt|;
name|double
name|numerator
init|=
operator|(
name|sin
argument_list|(
name|y3
argument_list|)
operator|*
name|sin
argument_list|(
name|x4
operator|-
name|x3
argument_list|)
operator|)
decl_stmt|;
name|double
name|denominator
init|=
operator|(
operator|(
name|sin
argument_list|(
name|y4
argument_list|)
operator|*
name|cos
argument_list|(
name|y3
argument_list|)
operator|)
operator|-
operator|(
name|cos
argument_list|(
name|y4
argument_list|)
operator|*
name|sin
argument_list|(
name|y3
argument_list|)
operator|*
name|cos
argument_list|(
name|x4
operator|-
name|x3
argument_list|)
operator|)
operator|)
decl_stmt|;
name|double
name|bearing
init|=
name|toDegrees
argument_list|(
name|atan
argument_list|(
name|numerator
operator|/
name|denominator
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|denominator
operator|>
literal|0
condition|)
block|{
name|bearing
operator|+=
literal|360D
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|denominator
operator|>
literal|0
condition|)
block|{
name|bearing
operator|+=
literal|180
expr_stmt|;
block|}
return|return
operator|(
name|bearing
operator|<
literal|0
condition|?
operator|(
name|bearing
operator|+
literal|360D
operator|)
else|:
name|bearing
operator|)
return|;
block|}
block|}
end_class

end_unit

