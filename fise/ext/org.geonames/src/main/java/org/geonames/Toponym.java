begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2008 Marc Wick, geonames.org  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|geonames
package|;
end_package

begin_comment
comment|/**  * a GeoNames toponym  *<p>  * NOTE (Rupert Westenthaler) added get/set for score and DEFAULT_SCORE  *   * @author marc@geonames  *   */
end_comment

begin_class
specifier|public
class|class
name|Toponym
block|{
specifier|private
name|int
name|geoNameId
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|alternateNames
decl_stmt|;
specifier|private
name|String
name|countryCode
decl_stmt|;
specifier|private
name|String
name|countryName
decl_stmt|;
specifier|private
name|Long
name|population
decl_stmt|;
specifier|private
name|Integer
name|elevation
decl_stmt|;
specifier|private
name|FeatureClass
name|featureClass
decl_stmt|;
specifier|private
name|String
name|featureClassName
decl_stmt|;
specifier|private
name|String
name|featureCode
decl_stmt|;
specifier|private
name|String
name|featureCodeName
decl_stmt|;
specifier|private
name|double
name|latitude
decl_stmt|;
specifier|private
name|double
name|longitude
decl_stmt|;
specifier|private
name|String
name|adminCode1
decl_stmt|;
specifier|private
name|String
name|adminName1
decl_stmt|;
specifier|private
name|String
name|adminCode2
decl_stmt|;
specifier|private
name|String
name|adminName2
decl_stmt|;
specifier|private
name|String
name|adminCode3
decl_stmt|;
specifier|private
name|String
name|adminCode4
decl_stmt|;
specifier|private
name|Timezone
name|timezone
decl_stmt|;
specifier|private
name|Style
name|style
decl_stmt|;
specifier|private
name|Double
name|score
decl_stmt|;
comment|/** 	 * Not all services returning toponyms provide a score. For such services 	 * (e.g. hierarchy) it is assumed, that the score is 1.0.<br> 	 * This default score is only returned if no score information is available 	 * AND ({@link Style}<code> == null</code> OR ( 	 * {@link Style} NOT<code>null</code> AND {@link Style} EQUALS  	 * {@link Style#FULL}))<br> 	 * Otherwise a {@link InsufficientStyleException} is thrown if no score 	 * information is available. 	 */
specifier|private
specifier|static
specifier|final
name|Double
name|DEFAULT_SCORE
init|=
literal|1.0
decl_stmt|;
comment|/** 	 * @return Returns the score of this result 	 * @throws InsufficientStyleException The style is only available with 	 *     {@link Style#FULL}.  	 */
specifier|public
name|Double
name|getScore
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|score
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|FULL
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"score not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|score
operator|!=
literal|null
condition|?
name|score
else|:
name|DEFAULT_SCORE
return|;
block|}
comment|/** 	 * @param score 	 *            The score of the result 	 */
specifier|public
name|void
name|setScore
parameter_list|(
name|Double
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
comment|/** 	 * @return Returns the ISO 3166-1-alpha-2 countryCode. 	 */
specifier|public
name|String
name|getCountryCode
parameter_list|()
block|{
return|return
name|countryCode
return|;
block|}
comment|/** 	 * @param countryCode 	 *            The ISO 3166-1-alpha-2 countryCode to set. 	 */
specifier|public
name|void
name|setCountryCode
parameter_list|(
name|String
name|countryCode
parameter_list|)
block|{
name|this
operator|.
name|countryCode
operator|=
name|countryCode
expr_stmt|;
block|}
comment|/** 	 * @return Returns the elevation in meter. 	 */
specifier|public
name|Integer
name|getElevation
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|elevation
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"elevation not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|elevation
return|;
block|}
comment|/** 	 * @param elevation 	 *            The elevation im meter to set. 	 */
specifier|public
name|void
name|setElevation
parameter_list|(
name|Integer
name|elevation
parameter_list|)
block|{
name|this
operator|.
name|elevation
operator|=
name|elevation
expr_stmt|;
block|}
comment|/** 	 * the feature class {@link FeatureClass} 	 *  	 * @see<a href="http://www.geonames.org/export/codes.html">GeoNames Feature 	 *      Codes</a> 	 * @return Returns the featureClass. 	 */
specifier|public
name|FeatureClass
name|getFeatureClass
parameter_list|()
block|{
return|return
name|featureClass
return|;
block|}
comment|/** 	 * @param featureClass 	 *            The featureClass to set. 	 */
specifier|public
name|void
name|setFeatureClass
parameter_list|(
name|FeatureClass
name|featureClass
parameter_list|)
block|{
name|this
operator|.
name|featureClass
operator|=
name|featureClass
expr_stmt|;
block|}
comment|/** 	 * @see<a href="http://www.geonames.org/export/codes.html">GeoNames Feature 	 *      Codes</a> 	 * @return Returns the featureCode. 	 */
specifier|public
name|String
name|getFeatureCode
parameter_list|()
block|{
return|return
name|featureCode
return|;
block|}
comment|/** 	 * @param featureCode 	 *            The featureCode to set. 	 */
specifier|public
name|void
name|setFeatureCode
parameter_list|(
name|String
name|featureCode
parameter_list|)
block|{
name|this
operator|.
name|featureCode
operator|=
name|featureCode
expr_stmt|;
block|}
comment|/** 	 * latitude in decimal degrees (wgs84) 	 *  	 * @return Returns the latitude. 	 */
specifier|public
name|double
name|getLatitude
parameter_list|()
block|{
return|return
name|latitude
return|;
block|}
comment|/** 	 * @param latitude 	 *            The latitude to set. 	 */
specifier|public
name|void
name|setLatitude
parameter_list|(
name|double
name|latitude
parameter_list|)
block|{
name|this
operator|.
name|latitude
operator|=
name|latitude
expr_stmt|;
block|}
comment|/** 	 * longitude in decimal degrees (wgs84) 	 *  	 * @return Returns the longitude. 	 */
specifier|public
name|double
name|getLongitude
parameter_list|()
block|{
return|return
name|longitude
return|;
block|}
comment|/** 	 * @param longitude 	 *            The longitude to set. 	 */
specifier|public
name|void
name|setLongitude
parameter_list|(
name|double
name|longitude
parameter_list|)
block|{
name|this
operator|.
name|longitude
operator|=
name|longitude
expr_stmt|;
block|}
comment|/** 	 * @return Returns the name. 	 */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** 	 * @param name 	 *            The name to set. 	 */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/** 	 * @return Returns the population. 	 */
specifier|public
name|Long
name|getPopulation
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|population
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"population not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|population
return|;
block|}
comment|/** 	 * @param population 	 *            The population to set. 	 */
specifier|public
name|void
name|setPopulation
parameter_list|(
name|Long
name|population
parameter_list|)
block|{
name|this
operator|.
name|population
operator|=
name|population
expr_stmt|;
block|}
comment|/** 	 * @return Returns the geoNameId. 	 */
specifier|public
name|int
name|getGeoNameId
parameter_list|()
block|{
return|return
name|geoNameId
return|;
block|}
comment|/** 	 * @param geoNameId 	 *            The geoNameId to set. 	 */
specifier|public
name|void
name|setGeoNameId
parameter_list|(
name|int
name|geonameId
parameter_list|)
block|{
name|this
operator|.
name|geoNameId
operator|=
name|geonameId
expr_stmt|;
block|}
comment|/** 	 * @return Returns the featureClassName. 	 */
specifier|public
name|String
name|getFeatureClassName
parameter_list|()
block|{
return|return
name|featureClassName
return|;
block|}
comment|/** 	 * @param featureClassName 	 *            The featureClassName to set. 	 */
specifier|public
name|void
name|setFeatureClassName
parameter_list|(
name|String
name|featureClassName
parameter_list|)
block|{
name|this
operator|.
name|featureClassName
operator|=
name|featureClassName
expr_stmt|;
block|}
comment|/** 	 * @return Returns the featureCodeName. 	 */
specifier|public
name|String
name|getFeatureCodeName
parameter_list|()
block|{
return|return
name|featureCodeName
return|;
block|}
comment|/** 	 * @param featureCodeName 	 *            The featureCodeName to set. 	 */
specifier|public
name|void
name|setFeatureCodeName
parameter_list|(
name|String
name|featureCodeName
parameter_list|)
block|{
name|this
operator|.
name|featureCodeName
operator|=
name|featureCodeName
expr_stmt|;
block|}
comment|/** 	 * @return Returns the countryName. 	 */
specifier|public
name|String
name|getCountryName
parameter_list|()
block|{
return|return
name|countryName
return|;
block|}
comment|/** 	 * @param countryName 	 *            The countryName to set. 	 */
specifier|public
name|void
name|setCountryName
parameter_list|(
name|String
name|countryName
parameter_list|)
block|{
name|this
operator|.
name|countryName
operator|=
name|countryName
expr_stmt|;
block|}
comment|/** 	 * alternate names of this place as comma separated list 	 *  	 * @return the alternateNames as comma separated list 	 */
specifier|public
name|String
name|getAlternateNames
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|alternateNames
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"alternateNames not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|alternateNames
return|;
block|}
comment|/** 	 * @param alternateNames 	 *            the alternateNames to set 	 */
specifier|public
name|void
name|setAlternateNames
parameter_list|(
name|String
name|alternateNames
parameter_list|)
block|{
name|this
operator|.
name|alternateNames
operator|=
name|alternateNames
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"geoNameId="
operator|+
name|geoNameId
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"name="
operator|+
name|name
operator|+
literal|","
argument_list|)
expr_stmt|;
if|if
condition|(
name|alternateNames
operator|!=
literal|null
condition|)
block|{
name|str
operator|.
name|append
argument_list|(
literal|"alternateNames="
operator|+
name|alternateNames
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
literal|"latitude="
operator|+
name|latitude
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"longitude="
operator|+
name|longitude
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"countryCode="
operator|+
name|countryCode
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"population="
operator|+
name|population
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"elevation="
operator|+
name|elevation
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"featureClass="
operator|+
name|featureClass
operator|+
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|"featureCode="
operator|+
name|featureCode
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * @return the adminCode1 	 */
specifier|public
name|String
name|getAdminCode1
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|adminCode1
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"adminCode1 not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|adminCode1
return|;
block|}
comment|/** 	 * @param adminCode1 	 *            the adminCode1 to set 	 */
specifier|public
name|void
name|setAdminCode1
parameter_list|(
name|String
name|adminCode1
parameter_list|)
block|{
name|this
operator|.
name|adminCode1
operator|=
name|adminCode1
expr_stmt|;
block|}
comment|/** 	 * @return the adminCode2 	 */
specifier|public
name|String
name|getAdminCode2
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|adminCode2
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"adminCode2 not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|adminCode2
return|;
block|}
comment|/** 	 * @param adminCode2 	 *            the adminCode2 to set 	 */
specifier|public
name|void
name|setAdminCode2
parameter_list|(
name|String
name|adminCode2
parameter_list|)
block|{
name|this
operator|.
name|adminCode2
operator|=
name|adminCode2
expr_stmt|;
block|}
comment|/** 	 * @return the adminCode3 	 */
specifier|public
name|String
name|getAdminCode3
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|adminCode3
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"adminCode3 not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|adminCode3
return|;
block|}
comment|/** 	 * @param adminCode3 	 *            the adminCode3 to set 	 */
specifier|public
name|void
name|setAdminCode3
parameter_list|(
name|String
name|adminCode3
parameter_list|)
block|{
name|this
operator|.
name|adminCode3
operator|=
name|adminCode3
expr_stmt|;
block|}
comment|/** 	 * @return the adminCode4 	 */
specifier|public
name|String
name|getAdminCode4
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|adminCode4
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"adminCode4 not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|adminCode4
return|;
block|}
comment|/** 	 * @param adminCode4 	 *            the adminCode4 to set 	 */
specifier|public
name|void
name|setAdminCode4
parameter_list|(
name|String
name|adminCode4
parameter_list|)
block|{
name|this
operator|.
name|adminCode4
operator|=
name|adminCode4
expr_stmt|;
block|}
comment|/** 	 * @return the timezone 	 */
specifier|public
name|Timezone
name|getTimezone
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|timezone
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"alternateNames not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|timezone
return|;
block|}
comment|/** 	 * @param timezone 	 *            the timezone to set 	 */
specifier|public
name|void
name|setTimezone
parameter_list|(
name|Timezone
name|timezone
parameter_list|)
block|{
name|this
operator|.
name|timezone
operator|=
name|timezone
expr_stmt|;
block|}
comment|/** 	 * @return the adminName1 	 */
specifier|public
name|String
name|getAdminName1
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|adminName1
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"adminName1 not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|adminName1
return|;
block|}
comment|/** 	 * @param adminName1 	 *            the adminName1 to set 	 */
specifier|public
name|void
name|setAdminName1
parameter_list|(
name|String
name|adminName1
parameter_list|)
block|{
name|this
operator|.
name|adminName1
operator|=
name|adminName1
expr_stmt|;
block|}
comment|/** 	 * @return the adminName2 	 */
specifier|public
name|String
name|getAdminName2
parameter_list|()
throws|throws
name|InsufficientStyleException
block|{
if|if
condition|(
name|adminName2
operator|==
literal|null
operator|&&
name|style
operator|!=
literal|null
operator|&&
name|Style
operator|.
name|LONG
operator|.
name|compareTo
argument_list|(
name|style
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|InsufficientStyleException
argument_list|(
literal|"adminName2 not supported by style "
operator|+
name|style
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|adminName2
return|;
block|}
comment|/** 	 * @param adminName2 	 *            the adminName2 to set 	 */
specifier|public
name|void
name|setAdminName2
parameter_list|(
name|String
name|adminName2
parameter_list|)
block|{
name|this
operator|.
name|adminName2
operator|=
name|adminName2
expr_stmt|;
block|}
comment|/** 	 * @return the style used when calling the web service that returned this 	 *         toponym. 	 */
specifier|public
name|Style
name|getStyle
parameter_list|()
block|{
return|return
name|style
return|;
block|}
comment|/** 	 * @param style 	 *            the style to set 	 */
specifier|public
name|void
name|setStyle
parameter_list|(
name|Style
name|style
parameter_list|)
block|{
name|this
operator|.
name|style
operator|=
name|style
expr_stmt|;
block|}
block|}
end_class

end_unit

