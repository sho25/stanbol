begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2007 Marc Wick, geonames.org  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|geonames
operator|.
name|wikipedia
package|;
end_package

begin_comment
comment|/**  * @author marc  *   */
end_comment

begin_class
specifier|public
class|class
name|TextSummaryExtractor
block|{
comment|/** 	 * extract a text summary from a wikipedia article. The wikipedia markup is 	 * removed. The length of the summary is equal or lower the length of the 	 * parameter. The extractor tries to end the summary at a fullstop. 	 *  	 * @param pText 	 * @param length 	 * @return 	 */
specifier|public
specifier|static
name|String
name|extractSummary
parameter_list|(
name|String
name|pText
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|pText
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// remove all wikipedia markup (paragraphs are kept)
comment|//
name|StringBuilder
name|summary
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// loop over all characters in input string
while|while
condition|(
name|idx
operator|>
operator|-
literal|1
operator|&&
operator|(
name|summary
operator|.
name|length
argument_list|()
operator|<
name|length
operator|||
name|length
operator|==
literal|0
operator|)
operator|&&
name|idx
operator|<
name|pText
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// get next chacter
name|char
name|c
init|=
name|pText
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
comment|// skip template and set idx to end of template
name|idx
operator|=
name|skipTemplate
argument_list|(
name|pText
argument_list|,
name|idx
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
block|{
comment|// is it a html comment
if|if
condition|(
name|pText
operator|.
name|length
argument_list|()
operator|>
name|idx
operator|+
literal|1
operator|&&
name|pText
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|==
literal|'!'
condition|)
block|{
comment|// skip html comment
name|idx
operator|=
name|skipHTMLComment
argument_list|(
name|pText
argument_list|,
name|idx
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
comment|// html element starts here, skip it, set idx to end of html
comment|// element
name|idx
operator|=
name|skipHTMLElement
argument_list|(
name|pText
argument_list|,
name|idx
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'['
condition|)
block|{
comment|// look ahead to see whether we have a link
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|==
literal|'['
condition|)
block|{
comment|// we have two square brackets "[[" (link)
comment|// get the end of the double square bracket
name|int
name|endOfLink
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"]]"
argument_list|,
name|idx
argument_list|)
decl_stmt|;
comment|// image link ?
name|int
name|colon
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>
operator|-
literal|1
operator|&&
name|colon
operator|<
name|endOfLink
condition|)
block|{
comment|// image link contains a caption which might contain
comment|// a link within the link
name|idx
operator|=
name|findEndOfLink
argument_list|(
name|pText
argument_list|,
name|idx
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|beginAnchor
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"|"
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|beginAnchor
operator|>
operator|-
literal|1
operator|&&
name|beginAnchor
operator|<
name|endOfLink
condition|)
block|{
name|idx
operator|=
name|beginAnchor
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|idx
operator|=
name|idx
operator|+
literal|2
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
comment|// next character is not a square brackets and thus a
comment|// reference link to be removed
comment|// get the end of the square bracket
name|int
name|endOfLink
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOfLink
operator|>
operator|-
literal|1
condition|)
block|{
name|idx
operator|=
name|endOfLink
operator|+
literal|1
expr_stmt|;
continue|continue;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|']'
condition|)
block|{
comment|// look ahead
if|if
condition|(
name|idx
operator|+
literal|1
operator|<
name|pText
operator|.
name|length
argument_list|()
operator|&&
name|pText
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|==
literal|']'
condition|)
block|{
name|idx
operator|=
name|idx
operator|+
literal|2
expr_stmt|;
continue|continue;
block|}
block|}
name|summary
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|String
name|textString
init|=
name|removeIndentAtBeginning
argument_list|(
name|summary
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|textString
operator|=
name|removeWhiteSpace
argument_list|(
name|textString
operator|.
name|replaceAll
argument_list|(
literal|"\r"
argument_list|,
literal|" "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\t"
argument_list|,
literal|" "
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|textString
operator|=
name|removeBold
argument_list|(
name|textString
argument_list|)
expr_stmt|;
name|textString
operator|=
name|removeItalic
argument_list|(
name|textString
argument_list|)
expr_stmt|;
comment|// convert 'non breaking html spaces' into blanks. But preserve them
comment|// (don't remove white space)
name|textString
operator|=
name|textString
operator|.
name|replaceAll
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// find full stop near length of text
comment|// only look at first paragraph for summary
name|int
name|endOfTextIdx
init|=
name|textString
operator|.
name|indexOf
argument_list|(
literal|"=="
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOfTextIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|endOfTextIdx
operator|=
name|length
expr_stmt|;
block|}
comment|//
if|if
condition|(
name|endOfTextIdx
argument_list|<
literal|20
operator|||
name|endOfTextIdx
argument_list|>
name|length
condition|)
block|{
name|endOfTextIdx
operator|=
name|textString
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|endOfTextIdx
operator|<
literal|0.7
operator|*
name|length
condition|)
block|{
name|endOfTextIdx
operator|=
name|textString
operator|.
name|lastIndexOf
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add elipsis if we have shortened the article
if|if
condition|(
name|endOfTextIdx
operator|>
operator|-
literal|1
operator|&&
name|endOfTextIdx
operator|<
name|textString
operator|.
name|length
argument_list|()
condition|)
block|{
name|textString
operator|=
name|textString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endOfTextIdx
argument_list|)
operator|+
literal|" (...)"
expr_stmt|;
block|}
comment|// trim trailing spaces and return
return|return
name|textString
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/** 	 * skips templates in wikipedia markup. Templates are enclosed within braces 	 * {}. There might be nested templates within an other template. 	 *  	 * @param pText 	 *            : the wikipedia text with templates 	 * @param pIdx 	 *            , pos in text to start with, MUST be a { 	 * @return the idx into the text where the template ends, or the last 	 *         character in the text if it does not properly end. 	 */
specifier|static
name|int
name|skipTemplate
parameter_list|(
name|String
name|pText
parameter_list|,
name|int
name|pIdx
parameter_list|)
block|{
comment|// make sure we start with opening braces
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|pIdx
argument_list|)
operator|!=
literal|'{'
condition|)
block|{
return|return
name|pIdx
return|;
block|}
comment|// counter for the braces we have opened, braces might be recursive
comment|// we use an iterative implementation, since it is a tiny little bit
comment|// faster
name|int
name|numOpenings
init|=
literal|1
decl_stmt|;
comment|// start with the next character
name|int
name|idx
init|=
name|pIdx
operator|+
literal|1
decl_stmt|;
comment|// loop over the text starting from the next character till the end of
comment|// the template or the end of the text
while|while
condition|(
name|numOpenings
operator|>
literal|0
operator|&&
name|pText
operator|.
name|length
argument_list|()
operator|>
name|idx
condition|)
block|{
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'{'
condition|)
block|{
name|numOpenings
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'}'
condition|)
block|{
name|numOpenings
operator|--
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
comment|/** 	 * @param pText 	 * @param pIdx 	 *            , pos in text to start with, MUST be a { 	 * @return 	 */
specifier|static
name|int
name|skipHTMLElement
parameter_list|(
name|String
name|pText
parameter_list|,
name|int
name|pIdx
parameter_list|)
block|{
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|pIdx
argument_list|)
operator|!=
literal|'<'
condition|)
block|{
return|return
name|pIdx
return|;
block|}
name|int
name|numOpenings
init|=
literal|1
decl_stmt|;
name|int
name|idx
init|=
name|pIdx
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|numOpenings
operator|>
literal|0
operator|&&
name|pText
operator|.
name|length
argument_list|()
operator|>
name|idx
condition|)
block|{
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'<'
condition|)
block|{
name|numOpenings
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'>'
condition|)
block|{
name|numOpenings
operator|--
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
comment|/** 	 * @param pText 	 * @param pIdx, 	 *            pos in text to start with, MUST be a '<' 	 * @return 	 */
specifier|static
name|int
name|skipHTMLComment
parameter_list|(
name|String
name|pText
parameter_list|,
name|int
name|pIdx
parameter_list|)
block|{
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|pIdx
argument_list|)
operator|!=
literal|'<'
operator|&&
name|pText
operator|.
name|charAt
argument_list|(
name|pIdx
operator|+
literal|1
argument_list|)
operator|!=
literal|'!'
condition|)
block|{
return|return
name|pIdx
return|;
block|}
name|int
name|idx
init|=
name|pIdx
decl_stmt|;
while|while
condition|(
operator|(
name|idx
operator|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|,
name|idx
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|pText
operator|.
name|length
argument_list|()
operator|<
name|idx
operator|+
literal|2
condition|)
block|{
return|return
name|pText
operator|.
name|length
argument_list|()
return|;
block|}
if|if
condition|(
name|pText
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'-'
operator|&&
name|pText
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|==
literal|'-'
operator|&&
name|pText
operator|.
name|charAt
argument_list|(
name|idx
operator|+
literal|2
argument_list|)
operator|==
literal|'>'
condition|)
block|{
return|return
name|idx
operator|+
literal|3
return|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
specifier|private
specifier|static
name|String
name|removeIndentAtBeginning
parameter_list|(
name|String
name|pText
parameter_list|)
block|{
name|pText
operator|=
name|pText
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|pText
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|int
name|lineFeed
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineFeed
operator|>
operator|-
literal|1
condition|)
block|{
name|pText
operator|=
name|pText
operator|.
name|substring
argument_list|(
name|lineFeed
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we may already have removed the linefeed
comment|// check for italics
if|if
condition|(
name|pText
operator|.
name|startsWith
argument_list|(
literal|":''"
argument_list|)
condition|)
block|{
name|int
name|italic
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"''"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|italic
operator|>
operator|-
literal|1
condition|)
block|{
name|pText
operator|=
name|pText
operator|.
name|substring
argument_list|(
name|italic
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|pText
return|;
block|}
specifier|private
specifier|static
name|int
name|findEndOfLink
parameter_list|(
name|String
name|pText
parameter_list|,
name|int
name|pIdx
parameter_list|)
block|{
name|int
name|end
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"]]"
argument_list|,
name|pIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|pIdx
return|;
block|}
name|int
name|idx
init|=
name|pIdx
decl_stmt|;
name|int
name|openingIdx
init|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"[["
argument_list|,
name|idx
operator|+
literal|2
argument_list|)
decl_stmt|;
while|while
condition|(
name|openingIdx
operator|>
operator|-
literal|1
operator|&&
name|openingIdx
operator|<
name|end
condition|)
block|{
name|idx
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"]]"
argument_list|,
name|end
operator|+
literal|2
argument_list|)
expr_stmt|;
name|openingIdx
operator|=
name|pText
operator|.
name|indexOf
argument_list|(
literal|"[["
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|!=
operator|-
literal|1
condition|)
block|{
name|idx
operator|=
name|end
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
comment|/** 	 * Removes sequences of whitespace and keeps only one whitespace character. 	 */
specifier|public
specifier|static
name|String
name|removeWhiteSpace
parameter_list|(
name|String
name|pString
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|pString
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
if|if
condition|(
name|c
operator|==
literal|' '
condition|)
block|{
if|if
condition|(
name|counter
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|removeBold
parameter_list|(
name|String
name|pString
parameter_list|)
block|{
return|return
name|pString
operator|.
name|replaceAll
argument_list|(
literal|"'''"
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|removeItalic
parameter_list|(
name|String
name|pString
parameter_list|)
block|{
return|return
name|pString
operator|.
name|replaceAll
argument_list|(
literal|"''"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

