begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2008-2010 Marc Wick, geonames.org  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|geonames
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|SAXBuilder
import|;
end_import

begin_comment
comment|/**  * provides static methods to access the<a  * href="http://www.geonames.org/export/ws-overview.html">GeoNames web  * services</a>.  *<p>  * Note : values for some fields are only returned with sufficient {@link Style}  * . Accessing these fields (admin codes and admin names, elevation,population)  * will throw an {@link InsufficientStyleException} if the {@link Style} was not  * sufficient.<p>  *  * NOTE (Rupert Westenthaler) added parsing of score in method  *<code>Toponym getToponymFromElement(Element toponymElement)</code>  * @author marc@geonames  *  */
end_comment

begin_class
specifier|public
class|class
name|WebService
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.geonames"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|USER_AGENT
init|=
literal|"geonames-webservice-client-1.0.4"
decl_stmt|;
specifier|private
specifier|static
name|String
name|geoNamesServer
init|=
literal|"http://ws.geonames.org"
decl_stmt|;
specifier|private
specifier|static
name|String
name|geoNamesServerFailover
init|=
literal|"http://ws.geonames.org"
decl_stmt|;
specifier|private
specifier|static
name|long
name|timeOfLastFailureMainServer
decl_stmt|;
specifier|private
specifier|static
name|Style
name|defaultStyle
init|=
name|Style
operator|.
name|MEDIUM
decl_stmt|;
specifier|private
specifier|static
name|int
name|readTimeOut
init|=
literal|120000
decl_stmt|;
specifier|private
specifier|static
name|int
name|connectTimeOut
init|=
literal|10000
decl_stmt|;
comment|/**      * user name to pass to commercial web services for authentication and      * authorization      */
specifier|private
specifier|static
name|String
name|userName
decl_stmt|;
comment|/**      * token to pass to as optional authentication parameter to the commercial      * web services.      */
specifier|private
specifier|static
name|String
name|token
decl_stmt|;
comment|/**      * adds the username stored in a static variable to the url. It also adds a      * token if one has been set with the static setter previously.      *      * @param url      * @return url with the username appended      */
specifier|private
specifier|static
name|String
name|addUserName
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&username="
operator|+
name|userName
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&token="
operator|+
name|token
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
comment|/**      * adds the default style to the url. The default style can be set with the      * static setter. It is 'MEDIUM' if not set.      *      * @param url      * @return url with the style parameter appended      */
specifier|private
specifier|static
name|String
name|addDefaultStyle
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|defaultStyle
operator|!=
name|Style
operator|.
name|MEDIUM
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&style="
operator|+
name|defaultStyle
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
comment|/**      * returns the currently active server. Normally this is the main server, if      * the main server recently failed then the failover server is returned. If      * the main server is not available we don't want to try with every request      * whether it is available again. We switch to the failover server and try      * from time to time whether the main server is again accessible.      *      * @return      */
specifier|private
specifier|static
name|String
name|getCurrentlyActiveServer
parameter_list|()
block|{
if|if
condition|(
name|timeOfLastFailureMainServer
operator|==
literal|0
condition|)
block|{
comment|// no problems with main server
return|return
name|geoNamesServer
return|;
block|}
comment|// we had problems with main server
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeOfLastFailureMainServer
operator|>
literal|1000l
operator|*
literal|60l
operator|*
literal|10l
condition|)
block|{
comment|// but is was some time ago and we switch back to the main server to
comment|// retry. The problem may have been solved in the mean time.
name|timeOfLastFailureMainServer
operator|=
literal|0
expr_stmt|;
return|return
name|geoNamesServer
return|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeOfLastFailureMainServer
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"time of last failure cannot be in future."
argument_list|)
throw|;
block|}
comment|// the problems have been very recent and we continue with failover
comment|// server
if|if
condition|(
name|geoNamesServerFailover
operator|!=
literal|null
condition|)
block|{
return|return
name|geoNamesServerFailover
return|;
block|}
return|return
name|geoNamesServer
return|;
block|}
comment|/**      * opens the connection to the url and sets the user agent. In case of an      * IOException it checks whether a failover server is set and connects to      * the failover server if it has been defined and if it is different from      * the normal server.      *      * @param url      *            the url to connect to      * @return returns the inputstream for the connection      * @throws IOException      */
specifier|private
specifier|static
name|InputStream
name|connect
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|currentlyActiveServer
init|=
name|getCurrentlyActiveServer
argument_list|()
decl_stmt|;
try|try
block|{
name|URLConnection
name|conn
init|=
operator|new
name|URL
argument_list|(
name|currentlyActiveServer
operator|+
name|url
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setConnectTimeout
argument_list|(
name|connectTimeOut
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setReadTimeout
argument_list|(
name|readTimeOut
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
name|USER_AGENT
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
return|return
name|in
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// we cannot reach the server
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"problems connecting to geonames server "
operator|+
name|geoNamesServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// is a failover server defined?
if|if
condition|(
name|geoNamesServerFailover
operator|==
literal|null
comment|// is it different from the one we are using?
operator|||
name|currentlyActiveServer
operator|.
name|equals
argument_list|(
name|geoNamesServerFailover
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|timeOfLastFailureMainServer
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"trying to connect to failover server "
operator|+
name|geoNamesServerFailover
argument_list|)
expr_stmt|;
comment|// try failover server
name|URLConnection
name|conn
init|=
operator|new
name|URL
argument_list|(
name|geoNamesServerFailover
operator|+
name|url
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
name|USER_AGENT
operator|+
literal|" failover from "
operator|+
name|geoNamesServer
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
return|return
name|in
return|;
block|}
block|}
specifier|private
specifier|static
name|Toponym
name|getToponymFromElement
parameter_list|(
name|Element
name|toponymElement
parameter_list|)
block|{
name|Toponym
name|toponym
init|=
operator|new
name|Toponym
argument_list|()
decl_stmt|;
name|toponym
operator|.
name|setName
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setAlternateNames
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"alternateNames"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setLatitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setLongitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"lng"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|geonameId
init|=
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"geonameId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|geonameId
operator|!=
literal|null
condition|)
block|{
name|toponym
operator|.
name|setGeoNameId
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|geonameId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|toponym
operator|.
name|setCountryCode
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"countryCode"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setCountryName
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"countryName"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setFeatureClass
argument_list|(
name|FeatureClass
operator|.
name|fromValue
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"fcl"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setFeatureCode
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"fcode"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setFeatureClassName
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"fclName"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setFeatureCodeName
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"fCodeName"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|population
init|=
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"population"
argument_list|)
decl_stmt|;
if|if
condition|(
name|population
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|population
argument_list|)
condition|)
block|{
name|toponym
operator|.
name|setPopulation
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|population
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|elevation
init|=
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"elevation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elevation
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|elevation
argument_list|)
condition|)
block|{
name|toponym
operator|.
name|setElevation
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|elevation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|toponym
operator|.
name|setAdminCode1
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode1"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setAdminName1
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"adminName1"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setAdminCode2
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode2"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setAdminName2
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"adminName2"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setAdminCode3
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode3"
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setAdminCode4
argument_list|(
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode4"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|timezoneElement
init|=
name|toponymElement
operator|.
name|getChild
argument_list|(
literal|"timezone"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timezoneElement
operator|!=
literal|null
condition|)
block|{
name|Timezone
name|timezone
init|=
operator|new
name|Timezone
argument_list|()
decl_stmt|;
name|timezone
operator|.
name|setTimezoneId
argument_list|(
name|timezoneElement
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|timezone
operator|.
name|setDstOffset
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|timezoneElement
operator|.
name|getAttributeValue
argument_list|(
literal|"dstOffset"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timezone
operator|.
name|setGmtOffset
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|timezoneElement
operator|.
name|getAttributeValue
argument_list|(
literal|"gmtOffset"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toponym
operator|.
name|setTimezone
argument_list|(
name|timezone
argument_list|)
expr_stmt|;
block|}
name|String
name|score
init|=
name|toponymElement
operator|.
name|getChildText
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
if|if
condition|(
name|score
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|toponym
operator|.
name|setScore
argument_list|(
operator|new
name|Double
argument_list|(
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//unable to parse ... ignore score
block|}
block|}
return|return
name|toponym
return|;
block|}
specifier|private
specifier|static
name|WikipediaArticle
name|getWikipediaArticleFromElement
parameter_list|(
name|Element
name|wikipediaArticleElement
parameter_list|)
block|{
name|WikipediaArticle
name|wikipediaArticle
init|=
operator|new
name|WikipediaArticle
argument_list|()
decl_stmt|;
name|wikipediaArticle
operator|.
name|setLanguage
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"lang"
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setTitle
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setSummary
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"summary"
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setFeature
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"feature"
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setWikipediaUrl
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"wikipediaUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setThumbnailImg
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"thumbnailImg"
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setLatitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wikipediaArticle
operator|.
name|setLongitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"lng"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|population
init|=
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"population"
argument_list|)
decl_stmt|;
if|if
condition|(
name|population
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|population
argument_list|)
condition|)
block|{
name|wikipediaArticle
operator|.
name|setPopulation
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|population
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|elevation
init|=
name|wikipediaArticleElement
operator|.
name|getChildText
argument_list|(
literal|"altitude"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elevation
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|elevation
argument_list|)
condition|)
block|{
name|wikipediaArticle
operator|.
name|setElevation
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|elevation
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wikipediaArticle
return|;
block|}
comment|/**      * returns a list of postal codes for the given parameters. This method is      * for convenience.      *      * @param postalCode      * @param placeName      * @param countryCode      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|PostalCode
argument_list|>
name|postalCodeSearch
parameter_list|(
name|String
name|postalCode
parameter_list|,
name|String
name|placeName
parameter_list|,
name|String
name|countryCode
parameter_list|)
throws|throws
name|Exception
block|{
name|PostalCodeSearchCriteria
name|postalCodeSearchCriteria
init|=
operator|new
name|PostalCodeSearchCriteria
argument_list|()
decl_stmt|;
name|postalCodeSearchCriteria
operator|.
name|setPostalCode
argument_list|(
name|postalCode
argument_list|)
expr_stmt|;
name|postalCodeSearchCriteria
operator|.
name|setPlaceName
argument_list|(
name|placeName
argument_list|)
expr_stmt|;
name|postalCodeSearchCriteria
operator|.
name|setCountryCode
argument_list|(
name|countryCode
argument_list|)
expr_stmt|;
return|return
name|postalCodeSearch
argument_list|(
name|postalCodeSearchCriteria
argument_list|)
return|;
block|}
comment|/**      * returns a list of postal codes for the given search criteria matching a      * full text search on the GeoNames postal codes database.      *      * @param postalCodeSearchCriteria      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|PostalCode
argument_list|>
name|postalCodeSearch
parameter_list|(
name|PostalCodeSearchCriteria
name|postalCodeSearchCriteria
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|PostalCode
argument_list|>
name|postalCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|PostalCode
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/postalCodeSearch?"
decl_stmt|;
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getPostalCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"postalcode="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|postalCodeSearchCriteria
operator|.
name|getPostalCode
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getPlaceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"&"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&"
expr_stmt|;
block|}
name|url
operator|=
name|url
operator|+
literal|"placename="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|postalCodeSearchCriteria
operator|.
name|getPlaceName
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getAdminCode1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&adminCode1="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|postalCodeSearchCriteria
operator|.
name|getAdminCode1
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getCountryCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"&"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&"
expr_stmt|;
block|}
name|url
operator|=
name|url
operator|+
literal|"country="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getCountryCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getCountryBias
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"&"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&"
expr_stmt|;
block|}
name|url
operator|=
name|url
operator|+
literal|"countryBias="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getCountryBias
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getMaxRows
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&maxRows="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getMaxRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getStartRow
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&startRow="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|isOROperator
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&operator=OR"
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"code"
argument_list|)
control|)
block|{
name|Element
name|codeElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|PostalCode
name|code
init|=
operator|new
name|PostalCode
argument_list|()
decl_stmt|;
name|code
operator|.
name|setPostalCode
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"postalcode"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setPlaceName
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setCountryCode
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"countryCode"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminCode1
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode1"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminCode2
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode2"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminName1
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminName1"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminName2
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminName2"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setLatitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setLongitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"lng"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|postalCodes
operator|.
name|add
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
return|return
name|postalCodes
return|;
block|}
comment|/**      * returns a list of postal codes      *      * @param postalCodeSearchCriteria      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|PostalCode
argument_list|>
name|findNearbyPostalCodes
parameter_list|(
name|PostalCodeSearchCriteria
name|postalCodeSearchCriteria
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|PostalCode
argument_list|>
name|postalCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|PostalCode
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/findNearbyPostalCodes?"
decl_stmt|;
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getPostalCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&postalcode="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|postalCodeSearchCriteria
operator|.
name|getPostalCode
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getPlaceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&placename="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|postalCodeSearchCriteria
operator|.
name|getPlaceName
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getCountryCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&country="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getCountryCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getLatitude
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lat="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getLatitude
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getLongitude
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getLongitude
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&style="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getStyle
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getMaxRows
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&maxRows="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getMaxRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|postalCodeSearchCriteria
operator|.
name|getRadius
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&radius="
operator|+
name|postalCodeSearchCriteria
operator|.
name|getRadius
argument_list|()
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"code"
argument_list|)
control|)
block|{
name|Element
name|codeElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|PostalCode
name|code
init|=
operator|new
name|PostalCode
argument_list|()
decl_stmt|;
name|code
operator|.
name|setPostalCode
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"postalcode"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setPlaceName
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setCountryCode
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"countryCode"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setLatitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setLongitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"lng"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminName1
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminName1"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminCode1
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode1"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminName2
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminName2"
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|setAdminCode2
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode2"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"distance"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|code
operator|.
name|setDistance
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"distance"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|postalCodes
operator|.
name|add
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
return|return
name|postalCodes
return|;
block|}
comment|/**      * convenience method for      * {@link #findNearbyPlaceName(double,double,double,int)}      *      * @param latitude      * @param longitude      * @return      * @throws IOException      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|Toponym
argument_list|>
name|findNearbyPlaceName
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
return|return
name|findNearbyPlaceName
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Toponym
argument_list|>
name|findNearbyPlaceName
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radius
parameter_list|,
name|int
name|maxRows
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|Toponym
argument_list|>
name|places
init|=
operator|new
name|ArrayList
argument_list|<
name|Toponym
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/findNearbyPlaceName?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
if|if
condition|(
name|radius
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&radius="
operator|+
name|radius
expr_stmt|;
block|}
if|if
condition|(
name|maxRows
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&maxRows="
operator|+
name|maxRows
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|url
operator|=
name|addDefaultStyle
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"geoname"
argument_list|)
control|)
block|{
name|Element
name|toponymElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Toponym
name|toponym
init|=
name|getToponymFromElement
argument_list|(
name|toponymElement
argument_list|)
decl_stmt|;
name|places
operator|.
name|add
argument_list|(
name|toponym
argument_list|)
expr_stmt|;
block|}
return|return
name|places
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Toponym
argument_list|>
name|findNearby
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|FeatureClass
name|featureClass
parameter_list|,
name|String
index|[]
name|featureCodes
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
return|return
name|findNearby
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
literal|0
argument_list|,
name|featureClass
argument_list|,
name|featureCodes
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/* Overload function to allow backward compatibility */
comment|/**      * Based on the following inforamtion: Webservice Type : REST      * ws.geonames.org/findNearbyWikipedia? Parameters : lang : language code      * (around 240 languages) (default = en) lat,lng, radius (in km), maxRows      * (default = 10) featureClass featureCode Example:      * http://ws.geonames.org/findNearby?lat=47.3&lng=9      *      * @param: latitude      * @param: longitude      * @param: radius      * @param: feature Class      * @param: feature Codes      * @param: language      * @param: maxRows      * @return: list of wikipedia articles      * @throws: Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|Toponym
argument_list|>
name|findNearby
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radius
parameter_list|,
name|FeatureClass
name|featureClass
parameter_list|,
name|String
index|[]
name|featureCodes
parameter_list|,
name|String
name|language
parameter_list|,
name|int
name|maxRows
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|List
argument_list|<
name|Toponym
argument_list|>
name|places
init|=
operator|new
name|ArrayList
argument_list|<
name|Toponym
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/findNearby?"
decl_stmt|;
name|url
operator|+=
literal|"&lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|+=
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
if|if
condition|(
name|radius
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&radius="
operator|+
name|radius
expr_stmt|;
block|}
if|if
condition|(
name|maxRows
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&maxRows="
operator|+
name|maxRows
expr_stmt|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
if|if
condition|(
name|featureClass
operator|!=
literal|null
condition|)
block|{
name|url
operator|+=
literal|"&featureClass="
operator|+
name|featureClass
expr_stmt|;
block|}
if|if
condition|(
name|featureCodes
operator|!=
literal|null
operator|&&
name|featureCodes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|featureCode
range|:
name|featureCodes
control|)
block|{
name|url
operator|+=
literal|"&featureCode="
operator|+
name|featureCode
expr_stmt|;
block|}
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|url
operator|=
name|addDefaultStyle
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"geoname"
argument_list|)
control|)
block|{
name|Element
name|toponymElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Toponym
name|toponym
init|=
name|getToponymFromElement
argument_list|(
name|toponymElement
argument_list|)
decl_stmt|;
name|places
operator|.
name|add
argument_list|(
name|toponym
argument_list|)
expr_stmt|;
block|}
return|return
name|places
return|;
block|}
specifier|public
specifier|static
name|Address
name|findNearestAddress
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|String
name|url
init|=
literal|"/findNearestAddress?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"address"
argument_list|)
control|)
block|{
name|Element
name|codeElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Address
name|address
init|=
operator|new
name|Address
argument_list|()
decl_stmt|;
name|address
operator|.
name|setStreet
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"street"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setStreetNumber
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"streetNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setPostalCode
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"postalcode"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setPlaceName
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"placename"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setCountryCode
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"countryCode"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setLatitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setLongitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"lng"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setAdminName1
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminName1"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setAdminCode1
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode1"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setAdminName2
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminName2"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setAdminCode2
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"adminCode2"
argument_list|)
argument_list|)
expr_stmt|;
name|address
operator|.
name|setDistance
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"distance"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|address
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Intersection
name|findNearestIntersection
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|findNearestIntersection
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Intersection
name|findNearestIntersection
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radius
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"/findNearestIntersection?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
if|if
condition|(
name|radius
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&radius="
operator|+
name|radius
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"intersection"
argument_list|)
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Intersection
name|intersection
init|=
operator|new
name|Intersection
argument_list|()
decl_stmt|;
name|intersection
operator|.
name|setStreet1
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"street1"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setStreet2
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"street2"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setLatitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"lat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setLongitude
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"lng"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setDistance
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"distance"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setPostalCode
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"postalcode"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setPlaceName
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"placename"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setCountryCode
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"countryCode"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setAdminName2
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"adminName2"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setAdminCode1
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"adminCode1"
argument_list|)
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|setAdminName1
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"adminName1"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|intersection
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *      * @see<a * href="http://www.geonames.org/maps/reverse-geocoder.html#findNearbyStreets"> web service documentation</a>      *      * @param latitude      * @param longitude      * @param radius      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|StreetSegment
argument_list|>
name|findNearbyStreets
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radius
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"/findNearbyStreets?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
if|if
condition|(
name|radius
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&radius="
operator|+
name|radius
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StreetSegment
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<
name|StreetSegment
argument_list|>
argument_list|()
decl_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"streetSegment"
argument_list|)
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|StreetSegment
name|streetSegment
init|=
operator|new
name|StreetSegment
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|e
operator|.
name|getChildText
argument_list|(
literal|"line"
argument_list|)
decl_stmt|;
name|String
index|[]
name|points
init|=
name|line
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|double
index|[]
name|latArray
init|=
operator|new
name|double
index|[
name|points
operator|.
name|length
index|]
decl_stmt|;
name|double
index|[]
name|lngArray
init|=
operator|new
name|double
index|[
name|points
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|points
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|coords
init|=
name|points
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|lngArray
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|coords
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|latArray
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|coords
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|streetSegment
operator|.
name|setCfcc
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"cfcc"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setName
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setFraddl
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"fraddl"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setFraddr
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"fraddr"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setToaddl
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"toaddl"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setToaddr
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"toaddr"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setPostalCode
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"postalcode"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setPlaceName
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"placename"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setCountryCode
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"countryCode"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setAdminName2
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"adminName2"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setAdminCode1
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"adminCode1"
argument_list|)
argument_list|)
expr_stmt|;
name|streetSegment
operator|.
name|setAdminName1
argument_list|(
name|e
operator|.
name|getChildText
argument_list|(
literal|"adminName1"
argument_list|)
argument_list|)
expr_stmt|;
name|segments
operator|.
name|add
argument_list|(
name|streetSegment
argument_list|)
expr_stmt|;
block|}
return|return
name|segments
return|;
block|}
comment|/**      * convenience method for {@link #search(ToponymSearchCriteria)}      *      * @see<a href="http://www.geonames.org/export/geonames-search.html">search      *  web service documentation</a>      *      * @param q      * @param countryCode      * @param name      * @param featureCodes      * @param startRow      * @return      * @throws Exception      */
specifier|public
specifier|static
name|ToponymSearchResult
name|search
parameter_list|(
name|String
name|q
parameter_list|,
name|String
name|countryCode
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|featureCodes
parameter_list|,
name|int
name|startRow
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|search
argument_list|(
name|q
argument_list|,
name|countryCode
argument_list|,
name|name
argument_list|,
name|featureCodes
argument_list|,
name|startRow
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * convenience method for {@link #search(ToponymSearchCriteria)}      *      * The string fields will be transparently utf8 encoded within the call.      *      * @see<a href="http://www.geonames.org/export/geonames-search.html">search      *  web service documentation</a>      *      * @param q      *            search over all fields      * @param countryCode      * @param name      *            search over name only      * @param featureCodes      * @param startRow      * @param language      * @param style      * @param exactName      * @return      * @throws Exception      */
specifier|public
specifier|static
name|ToponymSearchResult
name|search
parameter_list|(
name|String
name|q
parameter_list|,
name|String
name|countryCode
parameter_list|,
name|String
name|name
parameter_list|,
name|String
index|[]
name|featureCodes
parameter_list|,
name|int
name|startRow
parameter_list|,
name|String
name|language
parameter_list|,
name|Style
name|style
parameter_list|,
name|String
name|exactName
parameter_list|)
throws|throws
name|Exception
block|{
name|ToponymSearchCriteria
name|searchCriteria
init|=
operator|new
name|ToponymSearchCriteria
argument_list|()
decl_stmt|;
name|searchCriteria
operator|.
name|setQ
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setCountryCode
argument_list|(
name|countryCode
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setFeatureCodes
argument_list|(
name|featureCodes
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setLanguage
argument_list|(
name|language
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|searchCriteria
operator|.
name|setNameEquals
argument_list|(
name|exactName
argument_list|)
expr_stmt|;
return|return
name|search
argument_list|(
name|searchCriteria
argument_list|)
return|;
block|}
comment|/**      * full text search on the GeoNames database.      *      * This service gets the number of toponyms defined by the 'maxRows'      * parameter. The parameter 'style' determines which fields are returned by      * the service.      *      * @see<a href="http://www.geonames.org/export/geonames-search.html">search      *  web service documentation</a>      *      *<br>      *      *<pre>      * ToponymSearchCriteria searchCriteria = new ToponymSearchCriteria();      * searchCriteria.setQ(&quot;z&uuml;rich&quot;);      * ToponymSearchResult searchResult = WebService.search(searchCriteria);      * for (Toponym toponym : searchResult.toponyms) {      *     System.out.println(toponym.getName() +&quot;&quot; + toponym.getCountryName());      * }      *</pre>      *      *      * @param searchCriteria      * @return      * @throws Exception      */
specifier|public
specifier|static
name|ToponymSearchResult
name|search
parameter_list|(
name|ToponymSearchCriteria
name|searchCriteria
parameter_list|)
throws|throws
name|Exception
block|{
name|ToponymSearchResult
name|searchResult
init|=
operator|new
name|ToponymSearchResult
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/search?"
decl_stmt|;
if|if
condition|(
name|searchCriteria
operator|.
name|getQ
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"q="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getQ
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getNameEquals
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&name_equals="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getNameEquals
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getNameStartsWith
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&name_startsWith="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getNameStartsWith
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&name="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getName
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getTag
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&tag="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getTag
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getCountryCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&country="
operator|+
name|searchCriteria
operator|.
name|getCountryCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getContinentCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&continentCode="
operator|+
name|searchCriteria
operator|.
name|getContinentCode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getAdminCode1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&adminCode1="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getAdminCode1
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getAdminCode2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&adminCode2="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getAdminCode2
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getAdminCode3
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&adminCode3="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getAdminCode3
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getAdminCode4
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&adminCode4="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|searchCriteria
operator|.
name|getAdminCode4
argument_list|()
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getLanguage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|searchCriteria
operator|.
name|getLanguage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getFeatureClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&featureClass="
operator|+
name|searchCriteria
operator|.
name|getFeatureClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getFeatureCodes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|featureCode
range|:
name|searchCriteria
operator|.
name|getFeatureCodes
argument_list|()
control|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&fcode="
operator|+
name|featureCode
expr_stmt|;
block|}
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getMaxRows
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&maxRows="
operator|+
name|searchCriteria
operator|.
name|getMaxRows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getStartRow
argument_list|()
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&startRow="
operator|+
name|searchCriteria
operator|.
name|getStartRow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|searchCriteria
operator|.
name|getStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&style="
operator|+
name|searchCriteria
operator|.
name|getStyle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
name|addDefaultStyle
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|checkException
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|totalResultsCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|getChildText
argument_list|(
literal|"totalResultsCount"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|setStyle
argument_list|(
name|Style
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|getAttributeValue
argument_list|(
literal|"style"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"geoname"
argument_list|)
control|)
block|{
name|Element
name|toponymElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Toponym
name|toponym
init|=
name|getToponymFromElement
argument_list|(
name|toponymElement
argument_list|)
decl_stmt|;
name|toponym
operator|.
name|setStyle
argument_list|(
name|searchResult
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|toponyms
operator|.
name|add
argument_list|(
name|toponym
argument_list|)
expr_stmt|;
block|}
return|return
name|searchResult
return|;
block|}
comment|/**      * returns the children in the administrative hierarchy of a toponym.      *      * @param geonameId      * @param language      * @param style      * @return      * @throws Exception      */
specifier|public
specifier|static
name|ToponymSearchResult
name|children
parameter_list|(
name|int
name|geonameId
parameter_list|,
name|String
name|language
parameter_list|,
name|Style
name|style
parameter_list|)
throws|throws
name|Exception
block|{
name|ToponymSearchResult
name|searchResult
init|=
operator|new
name|ToponymSearchResult
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/children?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"geonameId="
operator|+
name|geonameId
expr_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&style="
operator|+
name|style
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
name|addDefaultStyle
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|checkException
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|totalResultsCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|getChildText
argument_list|(
literal|"totalResultsCount"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|setStyle
argument_list|(
name|Style
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|getAttributeValue
argument_list|(
literal|"style"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"geoname"
argument_list|)
control|)
block|{
name|Element
name|toponymElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Toponym
name|toponym
init|=
name|getToponymFromElement
argument_list|(
name|toponymElement
argument_list|)
decl_stmt|;
name|searchResult
operator|.
name|toponyms
operator|.
name|add
argument_list|(
name|toponym
argument_list|)
expr_stmt|;
block|}
return|return
name|searchResult
return|;
block|}
comment|/**      * returns the neighbours of a toponym.      *      * @param geonameId      * @param language      * @param style      * @return      * @throws Exception      */
specifier|public
specifier|static
name|ToponymSearchResult
name|neighbours
parameter_list|(
name|int
name|geonameId
parameter_list|,
name|String
name|language
parameter_list|,
name|Style
name|style
parameter_list|)
throws|throws
name|Exception
block|{
name|ToponymSearchResult
name|searchResult
init|=
operator|new
name|ToponymSearchResult
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/neighbours?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"geonameId="
operator|+
name|geonameId
expr_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&style="
operator|+
name|style
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
name|addDefaultStyle
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|checkException
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|totalResultsCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|root
operator|.
name|getChildText
argument_list|(
literal|"totalResultsCount"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|setStyle
argument_list|(
name|Style
operator|.
name|valueOf
argument_list|(
name|root
operator|.
name|getAttributeValue
argument_list|(
literal|"style"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"geoname"
argument_list|)
control|)
block|{
name|Element
name|toponymElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Toponym
name|toponym
init|=
name|getToponymFromElement
argument_list|(
name|toponymElement
argument_list|)
decl_stmt|;
name|searchResult
operator|.
name|toponyms
operator|.
name|add
argument_list|(
name|toponym
argument_list|)
expr_stmt|;
block|}
return|return
name|searchResult
return|;
block|}
comment|/**      * returns the hierarchy for a geonameId      *      * @see<a      *      href="http://www.geonames.org/export/place-hierarchy.html#hierarchy">Hierarchy      *      service description</a>      *      * @param geonameId      * @param language      * @param style      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|Toponym
argument_list|>
name|hierarchy
parameter_list|(
name|int
name|geonameId
parameter_list|,
name|String
name|language
parameter_list|,
name|Style
name|style
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
literal|"/hierarchy?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"geonameId="
operator|+
name|geonameId
expr_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&style="
operator|+
name|style
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
name|addDefaultStyle
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|checkException
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Toponym
argument_list|>
name|toponyms
init|=
operator|new
name|ArrayList
argument_list|<
name|Toponym
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"geoname"
argument_list|)
control|)
block|{
name|Element
name|toponymElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Toponym
name|toponym
init|=
name|getToponymFromElement
argument_list|(
name|toponymElement
argument_list|)
decl_stmt|;
name|toponyms
operator|.
name|add
argument_list|(
name|toponym
argument_list|)
expr_stmt|;
block|}
return|return
name|toponyms
return|;
block|}
specifier|public
specifier|static
name|void
name|saveTags
parameter_list|(
name|String
index|[]
name|tags
parameter_list|,
name|Toponym
name|toponym
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|toponym
operator|.
name|getGeoNameId
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"no geonameid specified"
argument_list|)
throw|;
block|}
comment|// FIXME proper url
name|String
name|url
init|=
literal|"/servlet/geonames?srv=61"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&geonameId="
operator|+
name|toponym
operator|.
name|getGeoNameId
argument_list|()
expr_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|StringBuilder
name|tagsCommaseparated
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
name|tagsCommaseparated
operator|.
name|append
argument_list|(
name|tag
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
name|url
operator|+
literal|"&tag="
operator|+
name|tagsCommaseparated
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|checkException
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkException
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|message
init|=
name|root
operator|.
name|getChild
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|message
operator|.
name|getAttributeValue
argument_list|(
literal|"message"
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * full text search on geolocated wikipedia articles.      *      * @param q      * @param language      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|wikipediaSearch
parameter_list|(
name|String
name|q
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|articles
init|=
operator|new
name|ArrayList
argument_list|<
name|WikipediaArticle
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/wikipediaSearch?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"q="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|q
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"entry"
argument_list|)
control|)
block|{
name|Element
name|wikipediaArticleElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|WikipediaArticle
name|wikipediaArticle
init|=
name|getWikipediaArticleFromElement
argument_list|(
name|wikipediaArticleElement
argument_list|)
decl_stmt|;
name|articles
operator|.
name|add
argument_list|(
name|wikipediaArticle
argument_list|)
expr_stmt|;
block|}
return|return
name|articles
return|;
block|}
comment|/**      * full text search on geolocated wikipedia articles.      *      * @param title      * @param language      * @return      * @throws Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|wikipediaSearchForTitle
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|articles
init|=
operator|new
name|ArrayList
argument_list|<
name|WikipediaArticle
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/wikipediaSearch?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"title="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|title
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"entry"
argument_list|)
control|)
block|{
name|Element
name|wikipediaArticleElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|WikipediaArticle
name|wikipediaArticle
init|=
name|getWikipediaArticleFromElement
argument_list|(
name|wikipediaArticleElement
argument_list|)
decl_stmt|;
name|articles
operator|.
name|add
argument_list|(
name|wikipediaArticle
argument_list|)
expr_stmt|;
block|}
return|return
name|articles
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|findNearbyWikipedia
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|findNearbyWikipedia
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
literal|0
argument_list|,
name|language
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/* Overload function to allow backward compatibility */
comment|/**      * Based on the following inform: Webservice Type : REST      * ws.geonames.org/findNearbyWikipedia? Parameters : lang : language code      * (around 240 languages) (default = en) lat,lng, radius (in km), maxRows      * (default = 5) Example:      * http://ws.geonames.org/findNearbyWikipedia?lat=47&lng=9      *      * @param: latitude      * @param: longitude      * @param: radius      * @param: language      * @param: maxRows      * @return: list of wikipedia articles      * @throws: Exception      */
specifier|public
specifier|static
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|findNearbyWikipedia
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radius
parameter_list|,
name|String
name|language
parameter_list|,
name|int
name|maxRows
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WikipediaArticle
argument_list|>
name|articles
init|=
operator|new
name|ArrayList
argument_list|<
name|WikipediaArticle
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"/findNearbyWikipedia?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
if|if
condition|(
name|radius
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&radius="
operator|+
name|radius
expr_stmt|;
block|}
if|if
condition|(
name|maxRows
operator|>
literal|0
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&maxRows="
operator|+
name|maxRows
expr_stmt|;
block|}
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"&lang="
operator|+
name|language
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"entry"
argument_list|)
control|)
block|{
name|Element
name|wikipediaArticleElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|WikipediaArticle
name|wikipediaArticle
init|=
name|getWikipediaArticleFromElement
argument_list|(
name|wikipediaArticleElement
argument_list|)
decl_stmt|;
name|articles
operator|.
name|add
argument_list|(
name|wikipediaArticle
argument_list|)
expr_stmt|;
block|}
return|return
name|articles
return|;
block|}
comment|/**      * GTOPO30 is a global digital elevation model (DEM) with a horizontal grid      * spacing of 30 arc seconds (approximately 1 kilometer). GTOPO30 was      * derived from several raster and vector sources of topographic      * information.      *      * @param latitude      * @param longitude      * @return a single number giving the elevation in meters according to      *         gtopo30, ocean areas have been masked as "no data" and have been      *         assigned a value of -9999      * @throws IOException      */
specifier|public
specifier|static
name|int
name|gtopo30
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
literal|"/gtopo30?lat="
operator|+
name|latitude
operator|+
literal|"&lng="
operator|+
name|longitude
decl_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|gtopo30
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|gtopo30
argument_list|)
return|;
block|}
comment|/**      * Shuttle Radar Topography Mission (SRTM) elevation data. SRTM consisted of      * a specially modified radar system that flew onboard the Space Shuttle      * Endeavour during an 11-day mission in February of 2000. The dataset      * covers land areas between 60 degrees north and 56 degrees south. This web      * service is using SRTM3 data with data points located every 3-arc-second      * (approximately 90 meters) on a latitude/longitude grid.      *      * @param latitude      * @param longitude      * @return elevation or -32768 if unknown      * @throws IOException      */
specifier|public
specifier|static
name|int
name|srtm3
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
literal|"/srtm3?lat="
operator|+
name|latitude
operator|+
literal|"&lng="
operator|+
name|longitude
decl_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|srtm3
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|srtm3
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
index|[]
name|srtm3
parameter_list|(
name|double
index|[]
name|latitude
parameter_list|,
name|double
index|[]
name|longitude
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|latitude
operator|.
name|length
operator|!=
name|longitude
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"number of lats and longs must be equal"
argument_list|)
throw|;
block|}
name|int
index|[]
name|elevation
init|=
operator|new
name|int
index|[
name|latitude
operator|.
name|length
index|]
decl_stmt|;
name|String
name|lats
init|=
literal|""
decl_stmt|;
name|String
name|lngs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elevation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lats
operator|+=
name|latitude
index|[
name|i
index|]
operator|+
literal|","
expr_stmt|;
name|lngs
operator|+=
name|longitude
index|[
name|i
index|]
operator|+
literal|","
expr_stmt|;
block|}
name|String
name|url
init|=
literal|"/srtm3?lats="
operator|+
name|lats
operator|+
literal|"&lngs="
operator|+
name|lngs
decl_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elevation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|srtm3
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|elevation
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|srtm3
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|elevation
return|;
block|}
specifier|public
specifier|static
name|int
name|astergdem
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
literal|"/astergdem?lat="
operator|+
name|latitude
operator|+
literal|"&lng="
operator|+
name|longitude
decl_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|astergdem
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|astergdem
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
index|[]
name|astergdem
parameter_list|(
name|double
index|[]
name|latitude
parameter_list|,
name|double
index|[]
name|longitude
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|latitude
operator|.
name|length
operator|!=
name|longitude
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"number of lats and longs must be equal"
argument_list|)
throw|;
block|}
name|int
index|[]
name|elevation
init|=
operator|new
name|int
index|[
name|latitude
operator|.
name|length
index|]
decl_stmt|;
name|String
name|lats
init|=
literal|""
decl_stmt|;
name|String
name|lngs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elevation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lats
operator|+=
name|latitude
index|[
name|i
index|]
operator|+
literal|","
expr_stmt|;
name|lngs
operator|+=
name|longitude
index|[
name|i
index|]
operator|+
literal|","
expr_stmt|;
block|}
name|String
name|url
init|=
literal|"/astergdem?lats="
operator|+
name|lats
operator|+
literal|"&lngs="
operator|+
name|lngs
decl_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elevation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|astergdem
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|elevation
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|astergdem
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|elevation
return|;
block|}
comment|/**      * The iso country code of any given point. It is calling      * {@link #countryCode(double, double, double)} with radius=0.0      *      * @param latitude      * @param longitude      * @return      * @throws IOException      */
specifier|public
specifier|static
name|String
name|countryCode
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|countryCode
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * The iso country code of any given point with radius for coastal areas.      *      * @param latitude      * @param longitude      * @param radius      *      * @return iso country code for the given latitude/longitude      * @throws IOException      */
specifier|public
specifier|static
name|String
name|countryCode
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radius
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|url
init|=
literal|"/countrycode?lat="
operator|+
name|latitude
operator|+
literal|"&lng="
operator|+
name|longitude
decl_stmt|;
if|if
condition|(
name|radius
operator|!=
literal|0
condition|)
block|{
name|url
operator|+=
literal|"&radius="
operator|+
name|radius
expr_stmt|;
block|}
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cc
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cc
operator|!=
literal|null
operator|&&
name|cc
operator|.
name|length
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
name|cc
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * get the timezone for a given location      *      * @param latitude      * @param longitude      * @return timezone at the given location      * @throws IOException      * @throws Exception      */
specifier|public
specifier|static
name|Timezone
name|timezone
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|String
name|url
init|=
literal|"/timezone?"
decl_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lat="
operator|+
name|latitude
expr_stmt|;
name|url
operator|=
name|url
operator|+
literal|"&lng="
operator|+
name|longitude
expr_stmt|;
name|url
operator|=
name|addUserName
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|SAXBuilder
name|parser
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|build
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|root
operator|.
name|getChildren
argument_list|(
literal|"timezone"
argument_list|)
control|)
block|{
name|Element
name|codeElement
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|Timezone
name|timezone
init|=
operator|new
name|Timezone
argument_list|()
decl_stmt|;
name|timezone
operator|.
name|setTimezoneId
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"timezoneId"
argument_list|)
argument_list|)
expr_stmt|;
name|timezone
operator|.
name|setGmtOffset
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"gmtOffset"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timezone
operator|.
name|setDstOffset
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|codeElement
operator|.
name|getChildText
argument_list|(
literal|"dstOffset"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|timezone
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @return the geoNamesServer, default is http://ws.geonames.org      */
specifier|public
specifier|static
name|String
name|getGeoNamesServer
parameter_list|()
block|{
return|return
name|geoNamesServer
return|;
block|}
comment|/**      * @return the geoNamesServerFailover      */
specifier|public
specifier|static
name|String
name|getGeoNamesServerFailover
parameter_list|()
block|{
return|return
name|geoNamesServerFailover
return|;
block|}
comment|/**      * sets the server name for the GeoNames server to be used for the requests.      * Default is ws.geonames.org      *      * @param geoNamesServer      *            the geonamesServer to set      */
specifier|public
specifier|static
name|void
name|setGeoNamesServer
parameter_list|(
name|String
name|pGeoNamesServer
parameter_list|)
block|{
if|if
condition|(
name|pGeoNamesServer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|()
throw|;
block|}
name|pGeoNamesServer
operator|=
name|pGeoNamesServer
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// add default http protocol if it is missing
if|if
condition|(
operator|!
name|pGeoNamesServer
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|&&
operator|!
name|pGeoNamesServer
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
condition|)
block|{
name|pGeoNamesServer
operator|=
literal|"http://"
operator|+
name|pGeoNamesServer
expr_stmt|;
block|}
name|WebService
operator|.
name|geoNamesServer
operator|=
name|pGeoNamesServer
expr_stmt|;
block|}
comment|/**      * sets the default failover server for requests in case the main server is      * not accessible. Default is ws.geonames.org<br>      * The failover server is only called if it is different from the main      * server.<br>      * The failover server is used for commercial GeoNames web service users.      *      * @param geoNamesServerFailover      *            the geoNamesServerFailover to set      */
specifier|public
specifier|static
name|void
name|setGeoNamesServerFailover
parameter_list|(
name|String
name|geoNamesServerFailover
parameter_list|)
block|{
if|if
condition|(
name|geoNamesServerFailover
operator|!=
literal|null
condition|)
block|{
name|geoNamesServerFailover
operator|=
name|geoNamesServerFailover
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|geoNamesServerFailover
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
condition|)
block|{
name|geoNamesServerFailover
operator|=
literal|"http://"
operator|+
name|geoNamesServerFailover
expr_stmt|;
block|}
block|}
name|WebService
operator|.
name|geoNamesServerFailover
operator|=
name|geoNamesServerFailover
expr_stmt|;
block|}
comment|/**      * @return the userName      */
specifier|public
specifier|static
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**      * Sets the user name to be used for the requests. Needed to access the      * commercial GeoNames web services.      *      * @param userName      *            the userName to set      */
specifier|public
specifier|static
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|WebService
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
comment|/**      * @return the token      */
specifier|public
specifier|static
name|String
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
comment|/**      * sets the token to be used to authenticate the requests. This is an      * optional parameter for the commercial version of the GeoNames web      * services.      *      * @param token      *            the token to set      */
specifier|public
specifier|static
name|void
name|setToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|WebService
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
comment|/**      * @return the defaultStyle      */
specifier|public
specifier|static
name|Style
name|getDefaultStyle
parameter_list|()
block|{
return|return
name|defaultStyle
return|;
block|}
comment|/**      * @param defaultStyle      *            the defaultStyle to set      */
specifier|public
specifier|static
name|void
name|setDefaultStyle
parameter_list|(
name|Style
name|defaultStyle
parameter_list|)
block|{
name|WebService
operator|.
name|defaultStyle
operator|=
name|defaultStyle
expr_stmt|;
block|}
comment|/**      * @return the readTimeOut      */
specifier|public
specifier|static
name|int
name|getReadTimeOut
parameter_list|()
block|{
return|return
name|readTimeOut
return|;
block|}
comment|/**      * @param readTimeOut      *            the readTimeOut to set      */
specifier|public
specifier|static
name|void
name|setReadTimeOut
parameter_list|(
name|int
name|readTimeOut
parameter_list|)
block|{
name|WebService
operator|.
name|readTimeOut
operator|=
name|readTimeOut
expr_stmt|;
block|}
comment|/**      * @return the connectTimeOut      */
specifier|public
specifier|static
name|int
name|getConnectTimeOut
parameter_list|()
block|{
return|return
name|connectTimeOut
return|;
block|}
comment|/**      * @param connectTimeOut      *            the connectTimeOut to set      */
specifier|public
specifier|static
name|void
name|setConnectTimeOut
parameter_list|(
name|int
name|connectTimeOut
parameter_list|)
block|{
name|WebService
operator|.
name|connectTimeOut
operator|=
name|connectTimeOut
expr_stmt|;
block|}
block|}
end_class

end_unit

