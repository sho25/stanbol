begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2006 Marc Wick, geonames.org  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|geonames
operator|.
name|utils
package|;
end_package

begin_comment
comment|/**  * Distance calculations.  *  * @author marc@geonames  *  */
end_comment

begin_class
specifier|public
class|class
name|Distance
block|{
comment|/**      * mean radius = 6372.0      *      * The Earth's equatorial radius = 6335.437 km.      *      * The Earth's polar radius = 6399.592 km.      *      *      */
specifier|public
specifier|static
specifier|final
name|double
name|EARTH_RADIUS_KM
init|=
literal|6372.0
decl_stmt|;
comment|/**      * statute miles      */
specifier|public
specifier|static
specifier|final
name|double
name|EARTH_RADIUS_MILES
init|=
literal|3963.0
decl_stmt|;
comment|/**      * http://mathworld.wolfram.com/GreatCircle.html      *      * and      *      * http://www.mathforum.com/library/drmath/view/51711.html      *      * @return      */
specifier|public
specifier|static
name|double
name|distance
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lng1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lng2
parameter_list|,
name|char
name|unit
parameter_list|)
block|{
name|double
name|a1
init|=
name|Math
operator|.
name|toRadians
argument_list|(
name|lat1
argument_list|)
decl_stmt|;
name|double
name|b1
init|=
name|Math
operator|.
name|toRadians
argument_list|(
name|lng1
argument_list|)
decl_stmt|;
name|double
name|a2
init|=
name|Math
operator|.
name|toRadians
argument_list|(
name|lat2
argument_list|)
decl_stmt|;
name|double
name|b2
init|=
name|Math
operator|.
name|toRadians
argument_list|(
name|lng2
argument_list|)
decl_stmt|;
name|double
name|d
init|=
name|Math
operator|.
name|acos
argument_list|(
name|Math
operator|.
name|cos
argument_list|(
name|a1
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|b1
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|a2
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|b2
argument_list|)
operator|+
name|Math
operator|.
name|cos
argument_list|(
name|a1
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|b1
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|a2
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|b2
argument_list|)
operator|+
name|Math
operator|.
name|sin
argument_list|(
name|a1
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|a2
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|dist
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|unit
operator|==
literal|'M'
condition|)
block|{
name|dist
operator|=
name|d
operator|*
name|EARTH_RADIUS_MILES
expr_stmt|;
block|}
else|else
block|{
name|dist
operator|=
name|d
operator|*
name|EARTH_RADIUS_KM
expr_stmt|;
block|}
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|dist
argument_list|)
condition|)
block|{
comment|// use pytagoras for very small distances,
name|dist
operator|=
name|Math
operator|.
name|sqrt
argument_list|(
name|Math
operator|.
name|pow
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|lat1
operator|-
name|lat2
argument_list|)
argument_list|,
literal|2
argument_list|)
operator|+
name|Math
operator|.
name|pow
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|lng1
operator|-
name|lng2
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// as rule of thumb multiply with 110km =1 degree
if|if
condition|(
name|unit
operator|==
literal|'M'
condition|)
block|{
name|dist
operator|*=
literal|69
expr_stmt|;
block|}
else|else
block|{
name|dist
operator|*=
literal|110
expr_stmt|;
block|}
block|}
return|return
name|dist
return|;
block|}
specifier|public
specifier|static
name|double
name|distanceKM
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lng1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lng2
parameter_list|)
block|{
return|return
name|distance
argument_list|(
name|lat1
argument_list|,
name|lng1
argument_list|,
name|lat2
argument_list|,
name|lng2
argument_list|,
literal|'K'
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|double
name|distanceMiles
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lng1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lng2
parameter_list|)
block|{
return|return
name|distance
argument_list|(
name|lat1
argument_list|,
name|lng1
argument_list|,
name|lat2
argument_list|,
name|lng2
argument_list|,
literal|'M'
argument_list|)
return|;
block|}
block|}
end_class

end_unit

