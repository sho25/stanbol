begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|speech
package|;
end_package

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *   *     http://www.dfki.de/web/forschung/iui  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *     http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *   * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|Start
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|PlaybackAudioEvent
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|RecognizedSpeechEvent
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|RecordedAudioEvent
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|TtsEvent
import|;
end_import

begin_class
specifier|public
class|class
name|SpeechServer
implements|implements
name|EventListener
block|{
specifier|private
name|Asr
name|asr
decl_stmt|;
specifier|private
name|Tts
name|tts
decl_stmt|;
specifier|public
name|SpeechServer
parameter_list|()
block|{
name|ExecutorService
name|es
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Asr
argument_list|>
name|asrRunner
init|=
operator|new
name|Callable
argument_list|<
name|Asr
argument_list|>
argument_list|()
block|{
specifier|public
name|Asr
name|call
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|Asr
argument_list|(
literal|"resource/sphinx4_config.xml"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Callable
argument_list|<
name|Tts
argument_list|>
name|ttsRunner
init|=
operator|new
name|Callable
argument_list|<
name|Tts
argument_list|>
argument_list|()
block|{
specifier|public
name|Tts
name|call
parameter_list|()
block|{
if|if
condition|(
name|Start
operator|.
name|USE_TTS
condition|)
block|{
try|try
block|{
return|return
operator|new
name|Tts
argument_list|(
literal|"localhost"
argument_list|,
literal|59125
argument_list|,
literal|"/Applications/MARYTTS/"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Future
argument_list|<
name|Asr
argument_list|>
name|futureASR
init|=
name|es
operator|.
name|submit
argument_list|(
name|asrRunner
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Tts
argument_list|>
name|futureTTS
init|=
name|es
operator|.
name|submit
argument_list|(
name|ttsRunner
argument_list|)
decl_stmt|;
try|try
block|{
name|asr
operator|=
name|futureASR
operator|.
name|get
argument_list|()
expr_stmt|;
name|tts
operator|=
name|futureTTS
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//			e.printStackTrace();
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|//			e.printStackTrace();
block|}
block|}
specifier|public
name|void
name|eventOccurred
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RecordedAudioEvent
condition|)
block|{
name|RecordedAudioEvent
name|rae
init|=
operator|(
name|RecordedAudioEvent
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|asr
operator|!=
literal|null
condition|)
block|{
name|String
name|recognizedSpeech
init|=
name|asr
operator|.
name|recognizeSpeech
argument_list|(
name|rae
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|recognizedSpeech
operator|==
literal|null
operator|||
name|recognizedSpeech
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|recognizedSpeech
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RECOGNIZED SPEECH: '"
operator|+
name|recognizedSpeech
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|RecognizedSpeechEvent
name|rse
init|=
operator|new
name|RecognizedSpeechEvent
argument_list|(
name|recognizedSpeech
argument_list|)
decl_stmt|;
name|EventManager
operator|.
name|eventOccurred
argument_list|(
name|rse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No ASR available!"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TtsEvent
condition|)
block|{
name|TtsEvent
name|te
init|=
operator|(
name|TtsEvent
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|tts
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|audioData
init|=
name|tts
operator|.
name|doTextToSpeech
argument_list|(
name|te
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|PlaybackAudioEvent
name|pae
init|=
operator|new
name|PlaybackAudioEvent
argument_list|(
name|audioData
argument_list|)
decl_stmt|;
name|EventManager
operator|.
name|eventOccurred
argument_list|(
name|pae
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No Mary TTS available!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

