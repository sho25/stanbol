begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|speech
package|;
end_package

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *   *     http://www.dfki.de/web/forschung/iui  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *     http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *   * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|NotUnderstoodEvent
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|RecognizedSpeechEvent
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
operator|.
name|SparqlEvent
import|;
end_import

begin_class
specifier|public
class|class
name|NL2Sparql
implements|implements
name|EventListener
block|{
comment|/*  SELECT ?tag ?content WHERE {    ?content<http://rdfs.org/sioc/ns#related_to> ?tag .    ?tag<http://www.w3.org/2000/01/rdf-schema#label> ?label     FILTER REGEX(?label,".*Jimi Hendrix.*") . } 	 */
specifier|private
name|String
name|nl2Sparql
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|//extract last two words!
name|String
name|person
init|=
name|text
operator|.
name|replaceFirst
argument_list|(
literal|".*? (\\w+ \\w+)\\W*$"
argument_list|,
literal|"$1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|person
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|person
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
comment|// DEBUG //
return|return
literal|"TODO: not a 'correct' sentence"
return|;
block|}
else|else
block|{
return|return
literal|"SELECT ?content ?tag\n"
operator|+
literal|"WHERE {\n"
operator|+
literal|"   ?content<http://rdfs.org/sioc/ns#related_to> ?tag .\n"
operator|+
literal|"   ?tag<http://www.w3.org/2000/01/rdf-schema#label> ?label\n"
operator|+
literal|"   FILTER REGEX(?label,\".*"
operator|+
name|person
operator|+
literal|".*\") .\n"
operator|+
literal|"}"
return|;
block|}
block|}
specifier|private
name|String
name|sparql2Text
parameter_list|(
name|String
name|sparqlQuery
parameter_list|)
block|{
comment|/*if (sparqlQuery.matches("SELECT ?content ?tag ?type\n" + 				"WHERE {\n" + 				"   ?content<http://rdfs.org/sioc/ns#related_to> ?tag.\n" + 				"   ?tag<http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type.\n" + 				"   ?tag<http://www.w3.org/2000/01/rdf-schema#label> ?label\n" + 				"   REGEX(?label,\"[a-zA-Z ]?\")\n" + 				"}")) { 			String person = sparqlQuery.replaceAll("SELECT ?content ?tag ?type\n" + 				"WHERE {\n" + 				"   ?content<http://rdfs.org/sioc/ns#related_to> ?tag.\n" + 				"   ?tag<http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type.\n" + 				"   ?tag<http://www.w3.org/2000/01/rdf-schema#label> ?label\n" + 				"   REGEX\\(?label,\"([a-zA-Z ]?)\"\\)\n" + 				"}", "$1"); 			return "Show me information regarding " + person + "!"; 		}*/
return|return
literal|"TODO: SPARQL2TEXT"
return|;
block|}
specifier|public
name|void
name|eventOccurred
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RecognizedSpeechEvent
condition|)
block|{
name|RecognizedSpeechEvent
name|rse
init|=
operator|(
name|RecognizedSpeechEvent
operator|)
name|e
decl_stmt|;
name|String
name|speechText
init|=
name|rse
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|speechText
operator|==
literal|null
condition|)
block|{
name|EventManager
operator|.
name|eventOccurred
argument_list|(
operator|new
name|NotUnderstoodEvent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|sparqlQuery
init|=
name|nl2Sparql
argument_list|(
name|speechText
argument_list|)
decl_stmt|;
name|QueryEvent
name|qe
init|=
operator|new
name|QueryEvent
argument_list|(
name|sparqlQuery
argument_list|,
name|speechText
argument_list|)
decl_stmt|;
name|EventManager
operator|.
name|eventOccurred
argument_list|(
name|qe
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|SparqlEvent
condition|)
block|{
name|SparqlEvent
name|se
init|=
operator|(
name|SparqlEvent
operator|)
name|e
decl_stmt|;
name|String
name|sparqlQuery
init|=
name|se
operator|.
name|getData
argument_list|()
decl_stmt|;
name|String
name|speechText
init|=
name|sparql2Text
argument_list|(
name|sparqlQuery
argument_list|)
decl_stmt|;
name|QueryEvent
name|qe
init|=
operator|new
name|QueryEvent
argument_list|(
name|sparqlQuery
argument_list|,
name|speechText
argument_list|)
decl_stmt|;
name|EventManager
operator|.
name|eventOccurred
argument_list|(
name|qe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

