begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|speech
package|;
end_package

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *   *     http://www.dfki.de/web/forschung/iui  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *     http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *   * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|AudioFormat
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|AudioSystem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|DataLine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|LineUnavailableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|TargetDataLine
import|;
end_import

begin_class
specifier|public
class|class
name|Recording
block|{
specifier|private
name|AudioFormat
name|audioFormat
decl_stmt|;
specifier|private
name|Boolean
name|stopRecording
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|recordingInProgress
init|=
literal|false
decl_stmt|;
specifier|public
name|Recording
parameter_list|()
block|{
name|this
argument_list|(
literal|16000
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Recording
parameter_list|(
name|AudioFormat
name|af
parameter_list|)
block|{
name|this
argument_list|(
name|af
operator|.
name|getSampleRate
argument_list|()
argument_list|,
name|af
operator|.
name|getSampleSizeInBits
argument_list|()
argument_list|,
name|af
operator|.
name|getChannels
argument_list|()
argument_list|,
operator|!
name|af
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unsigned"
argument_list|)
argument_list|,
name|af
operator|.
name|isBigEndian
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Recording
parameter_list|(
name|float
name|sampleRate
parameter_list|,
name|int
name|sampleSizeInBits
parameter_list|,
name|int
name|channels
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|bigEndian
parameter_list|)
block|{
name|audioFormat
operator|=
operator|new
name|AudioFormat
argument_list|(
name|sampleRate
argument_list|,
name|sampleSizeInBits
argument_list|,
name|channels
argument_list|,
name|signed
argument_list|,
name|bigEndian
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AudioFormat
name|getAudioFormat
parameter_list|()
block|{
return|return
name|audioFormat
return|;
block|}
specifier|public
name|boolean
name|isRecording
parameter_list|()
block|{
return|return
name|recordingInProgress
return|;
block|}
specifier|public
name|void
name|setAudioFormat
parameter_list|(
name|AudioFormat
name|af
parameter_list|)
throws|throws
name|RecordingInProgressException
block|{
synchronized|synchronized
init|(
name|recordingInProgress
init|)
block|{
if|if
condition|(
name|recordingInProgress
condition|)
block|{
throw|throw
operator|new
name|RecordingInProgressException
argument_list|()
throw|;
block|}
name|audioFormat
operator|=
name|af
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopRecording
parameter_list|()
block|{
synchronized|synchronized
init|(
name|stopRecording
init|)
block|{
name|stopRecording
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|startRecording
parameter_list|()
throws|throws
name|RecordingInProgressException
block|{
synchronized|synchronized
init|(
name|recordingInProgress
init|)
block|{
if|if
condition|(
name|recordingInProgress
condition|)
block|{
throw|throw
operator|new
name|RecordingInProgressException
argument_list|()
throw|;
block|}
else|else
name|recordingInProgress
operator|=
literal|true
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|stopRecording
init|)
block|{
name|stopRecording
operator|=
literal|false
expr_stmt|;
block|}
name|Callable
argument_list|<
name|byte
index|[]
argument_list|>
name|runner
init|=
operator|new
name|Callable
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|byte
index|[]
name|call
parameter_list|()
block|{
try|try
block|{
name|int
name|bufferSize
init|=
operator|(
name|int
operator|)
name|audioFormat
operator|.
name|getSampleRate
argument_list|()
operator|*
name|audioFormat
operator|.
name|getFrameSize
argument_list|()
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|DataLine
operator|.
name|Info
name|info
init|=
operator|new
name|DataLine
operator|.
name|Info
argument_list|(
name|TargetDataLine
operator|.
name|class
argument_list|,
name|audioFormat
argument_list|)
decl_stmt|;
name|TargetDataLine
name|line
init|=
operator|(
name|TargetDataLine
operator|)
name|AudioSystem
operator|.
name|getLine
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|line
operator|.
name|open
argument_list|(
name|audioFormat
argument_list|)
expr_stmt|;
name|line
operator|.
name|start
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
do|do
block|{
name|int
name|count
init|=
name|line
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|stopRecording
init|)
block|{
if|if
condition|(
name|stopRecording
condition|)
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|stopRecording
condition|)
do|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|line
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
name|out
operator|.
name|toByteArray
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"I/O problems: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|LineUnavailableException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|recordingInProgress
init|)
block|{
name|recordingInProgress
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
return|return
name|executor
operator|.
name|submit
argument_list|(
name|runner
argument_list|)
return|;
block|}
block|}
end_class

end_unit

