begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|speech
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|marytts
operator|.
name|client
operator|.
name|MaryClient
import|;
end_import

begin_import
import|import
name|marytts
operator|.
name|client
operator|.
name|http
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|marytts
operator|.
name|server
operator|.
name|Mary
import|;
end_import

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *  *     http://www.dfki.de/web/forschung/iui  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_class
specifier|public
class|class
name|Tts
block|{
specifier|private
name|MaryClient
name|mary
decl_stmt|;
specifier|public
name|Tts
parameter_list|(
name|String
name|serverHost
parameter_list|,
name|int
name|serverPort
parameter_list|,
name|String
name|maryTtsInstallDir
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|startClient
init|=
literal|false
decl_stmt|;
comment|//start server
if|if
condition|(
name|maryTtsInstallDir
operator|==
literal|null
condition|)
block|{
comment|//            we assume that a server is already started elsewhere (<serverHost>:<serverPort>)
name|startClient
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"mary.base"
argument_list|,
name|maryTtsInstallDir
argument_list|)
expr_stmt|;
name|Mary
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|//start client and connect to Mary TTS server
if|if
condition|(
name|startClient
condition|)
block|{
name|mary
operator|=
name|MaryClient
operator|.
name|getMaryClient
argument_list|(
operator|new
name|Address
argument_list|(
name|serverHost
argument_list|,
name|serverPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not start Mary TTS server!"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|doTextToSpeech
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|mary
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No Mary Client started!"
argument_list|)
expr_stmt|;
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|mary
operator|.
name|process
argument_list|(
name|text
argument_list|,
literal|"TEXT"
argument_list|,
literal|"AUDIO"
argument_list|,
literal|"en-GB"
argument_list|,
literal|"WAVE"
argument_list|,
literal|"dfki-obadiah"
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

