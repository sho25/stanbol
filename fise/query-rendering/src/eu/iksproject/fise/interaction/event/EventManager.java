begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|interaction
operator|.
name|event
package|;
end_package

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *   *     http://www.dfki.de/web/forschung/iui  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *     http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *   * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|EventManager
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|EventListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|EventListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|eventOccurred
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
for|for
control|(
name|EventListener
name|el
range|:
name|listeners
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Send event "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|el
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|eventOccurred
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|addEventListener
parameter_list|(
name|EventListener
name|el
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|removeEventListener
parameter_list|(
name|EventListener
name|el
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

