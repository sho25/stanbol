begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
package|;
end_package

begin_comment
comment|/*  * Copyright 2010  * German Research Center for Artificial Intelligence (DFKI)  * Department of Intelligent User Interfaces  * Germany  *  *     http://www.dfki.de/web/forschung/iui  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  * Authors:  *     Sebastian Germesin  *     Massimo Romanelli  *     Tilman Becker  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|ClerezzaResultEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|ClerezzaServerInfoChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|event
operator|.
name|UploadFileEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|interaction
operator|.
name|util
operator|.
name|ClientHttpRequest
import|;
end_import

begin_class
specifier|public
class|class
name|QueryManager
implements|implements
name|EventListener
block|{
specifier|private
name|String
name|serverHost
decl_stmt|;
specifier|private
name|int
name|serverPort
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|public
name|QueryManager
parameter_list|(
name|String
name|serverHost
parameter_list|,
name|int
name|serverPort
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|serverHost
operator|=
name|serverHost
expr_stmt|;
name|this
operator|.
name|serverPort
operator|=
name|serverPort
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|void
name|eventOccurred
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|QueryEvent
condition|)
block|{
name|QueryEvent
name|qe
init|=
operator|(
name|QueryEvent
operator|)
name|e
decl_stmt|;
name|String
name|clerezzaResult
init|=
name|postData
argument_list|(
name|qe
operator|.
name|getSparqlQuery
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clerezzaResult
operator|!=
literal|null
condition|)
block|{
name|ClerezzaResultEvent
name|cre
init|=
operator|new
name|ClerezzaResultEvent
argument_list|(
name|clerezzaResult
argument_list|)
decl_stmt|;
name|EventManager
operator|.
name|eventOccurred
argument_list|(
name|cre
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UploadFileEvent
condition|)
block|{
name|UploadFileEvent
name|ufe
init|=
operator|(
name|UploadFileEvent
operator|)
name|e
decl_stmt|;
name|uploadFile
argument_list|(
name|ufe
operator|.
name|getFilename
argument_list|()
argument_list|,
name|ufe
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|ClerezzaServerInfoChangedEvent
condition|)
block|{
name|ClerezzaServerInfoChangedEvent
name|csice
init|=
operator|(
name|ClerezzaServerInfoChangedEvent
operator|)
name|e
decl_stmt|;
name|this
operator|.
name|serverHost
operator|=
name|csice
operator|.
name|getServerHost
argument_list|()
expr_stmt|;
name|this
operator|.
name|serverPort
operator|=
name|csice
operator|.
name|getServerPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|csice
operator|.
name|getUsername
argument_list|()
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|csice
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|uploadFile
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|serverHost
operator|+
literal|":"
operator|+
name|serverPort
operator|+
literal|"/content"
argument_list|)
decl_stmt|;
name|URLConnection
name|conn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|ClientHttpRequest
name|chr
init|=
operator|new
name|ClientHttpRequest
argument_list|(
name|conn
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|chr
operator|.
name|setParameter
argument_list|(
literal|"uri"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|chr
operator|.
name|setParameter
argument_list|(
literal|"content"
argument_list|,
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resultText
init|=
literal|""
decl_stmt|;
comment|// Get the response
name|BufferedReader
name|rd
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|chr
operator|.
name|post
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|rd
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// Process line...
name|resultText
operator|+=
name|line
expr_stmt|;
block|}
name|rd
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|resultText
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|postData
parameter_list|(
name|String
name|query
parameter_list|)
block|{
try|try
block|{
name|String
name|resultText
init|=
literal|""
decl_stmt|;
comment|// Construct data
name|String
name|data
init|=
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"query"
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|query
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|// Send data
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|serverHost
operator|+
literal|":"
operator|+
name|serverPort
operator|+
literal|"/fise"
argument_list|)
decl_stmt|;
name|URLConnection
name|conn
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OutputStreamWriter
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|wr
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Get the response
name|BufferedReader
name|rd
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|rd
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// Process line...
name|resultText
operator|+=
name|line
expr_stmt|;
block|}
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
name|rd
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|resultText
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytesFromFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// Get the size of the file
name|long
name|length
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// You cannot create an array using a long type.
comment|// It needs to be an int type.
comment|// Before converting to an int type, check
comment|// to ensure that file is not larger than Integer.MAX_VALUE.
if|if
condition|(
name|length
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// File is too large
block|}
comment|// Create the byte array to hold the data
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
comment|// Read in the bytes
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|numRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|bytes
operator|.
name|length
operator|&&
operator|(
name|numRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|offset
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|offset
operator|+=
name|numRead
expr_stmt|;
block|}
comment|// Ensure all the bytes have been read in
if|if
condition|(
name|offset
operator|<
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not completely read file "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Close the input stream and return bytes
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

