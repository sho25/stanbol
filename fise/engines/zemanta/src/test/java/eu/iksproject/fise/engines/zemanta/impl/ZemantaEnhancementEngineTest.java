begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|engines
operator|.
name|zemanta
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|serializer
operator|.
name|JenaSerializerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|servicesapi
operator|.
name|ContentItem
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|EnhancementEngineHelper
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|TechnicalClasses
import|;
end_import

begin_class
specifier|public
class|class
name|ZemantaEnhancementEngineTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZemantaEnhancementEngineTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** 	 * This key was generated to support testing only. Please do only use it 	 * for testing. For real usages of the engine you need to create your own 	 * key! 	 */
specifier|private
specifier|static
specifier|final
name|String
name|ZEMANTA_FISE_TEST_APPLICATION_KEY
init|=
literal|"2qsvcvkut8rhnqbhm35znn76"
decl_stmt|;
comment|/** 	 * found on this Blog {@linkplain http://bcbio.wordpress.com/2009/01/04/extracting-keywords-from-biological-text-using-zemanta/} 	 */
specifier|public
specifier|static
specifier|final
name|String
name|BIO_DOMAIN_TEXT
init|=
literal|"glh-2 encodes a putative DEAD-box RNA "
operator|+
literal|"helicase that contains six CCHC zinc fingers and is homologous to Drosophila VASA, "
operator|+
literal|"a germ-line-specific, ATP-dependent, RNA helicase; GLH-2 activity may also be required "
operator|+
literal|"for the wild-type morphology of P granules and for localization of several protein "
operator|+
literal|"components, but not accumulation of P granule mRNA components; GLH-2 interacts in "
operator|+
literal|"vitro with itself and with KGB-1, a JNK-like MAP kinase; GLH-2 is a constitutive P "
operator|+
literal|"granule component and thus, with the exception of mature sperm, is expressed in germ "
operator|+
literal|"cells at all stages of development; GLH-2 is cytoplasmic in oocytes and the early "
operator|+
literal|"embryo, while perinuclear in all later developmental stages as well as in the distal "
operator|+
literal|"and medial regions of the hermaphrodite gonad; GLH-2 is expressed at barely detectable "
operator|+
literal|"levels in males"
decl_stmt|;
specifier|static
name|ZemantaEnhancementEngine
name|zemantaEngine
init|=
operator|new
name|ZemantaEnhancementEngine
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpServices
parameter_list|()
throws|throws
name|IOException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|ZemantaEnhancementEngine
operator|.
name|API_KEY_PROPERTY
argument_list|,
name|ZEMANTA_FISE_TEST_APPLICATION_KEY
argument_list|)
expr_stmt|;
name|MockComponentContext
name|context
init|=
operator|new
name|MockComponentContext
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|zemantaEngine
operator|.
name|activate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdownServices
parameter_list|()
block|{
name|zemantaEngine
operator|.
name|deactivate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ContentItem
name|wrapAsContentItem
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|ContentItem
argument_list|()
block|{
name|SimpleMGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|"urn:eu.iksproject.fise:test:engines.zemanta:content-item-"
operator|+
name|EnhancementEngineHelper
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|public
name|InputStream
name|getStream
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
literal|"text/plain"
return|;
block|}
specifier|public
name|MGraph
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tesetBioText
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentItem
name|ci
init|=
name|wrapAsContentItem
argument_list|(
name|BIO_DOMAIN_TEXT
argument_list|)
decl_stmt|;
name|zemantaEngine
operator|.
name|computeEnhancements
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|JenaSerializerProvider
name|serializer
init|=
operator|new
name|JenaSerializerProvider
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|TURTLE
argument_list|)
expr_stmt|;
name|int
name|textAnnoNum
init|=
name|checkAllTextAnnotations
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|BIO_DOMAIN_TEXT
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|textAnnoNum
operator|+
literal|" TextAnnotations found ..."
argument_list|)
expr_stmt|;
name|int
name|entityAnnoNum
init|=
name|checkAllEntityAnnotations
argument_list|(
name|ci
operator|.
name|getMetadata
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|textAnnoNum
operator|+
literal|" EntityAnnotations found ..."
argument_list|)
expr_stmt|;
block|}
comment|/*      * -----------------------------------------------------------------------      * Helper Methods to check Text and EntityAnnotations      * -----------------------------------------------------------------------      */
comment|/**      * @param g      * @return      */
specifier|private
name|int
name|checkAllEntityAnnotations
parameter_list|(
name|MGraph
name|g
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entityAnnotationIterator
init|=
name|g
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|FISE_ENTITYANNOTATION
argument_list|)
decl_stmt|;
name|int
name|entityAnnotationCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|entityAnnotationIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|entityAnnotation
init|=
operator|(
name|UriRef
operator|)
name|entityAnnotationIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|// test if selected Text is added
name|checkEntityAnnotation
argument_list|(
name|g
argument_list|,
name|entityAnnotation
argument_list|)
expr_stmt|;
name|entityAnnotationCount
operator|++
expr_stmt|;
block|}
return|return
name|entityAnnotationCount
return|;
block|}
comment|/**      * Checks if an entity annotation is valid      *      * @param g      * @param textAnnotation      */
specifier|private
name|void
name|checkEntityAnnotation
parameter_list|(
name|MGraph
name|g
parameter_list|,
name|UriRef
name|entityAnnotation
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|relationIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|DC_RELATION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|requiresIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|DC_REQUIRES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|dcTypeCategory
init|=
name|g
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|DC_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|FISE_CATEGORY
argument_list|)
decl_stmt|;
comment|// check if the relation or an requires annotation set
comment|// also include the DC_TYPE FISE_CATEGORY, because such entityEnhancements
comment|// do not need to have any values for DC_RELATION nor DC_REQUIRES
name|assertTrue
argument_list|(
name|relationIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|requiresIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|dcTypeCategory
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|relationIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// test if the referred annotations are text annotations
name|UriRef
name|referredTextAnnotation
init|=
operator|(
name|UriRef
operator|)
name|relationIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|filter
argument_list|(
name|referredTextAnnotation
argument_list|,
name|Properties
operator|.
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|FISE_TEXTANNOTATION
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test if an entity is referred
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entityReferenceIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|FISE_ENTITY_REFERENCE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entityReferenceIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test if the reference is an URI
name|assertTrue
argument_list|(
name|entityReferenceIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
operator|instanceof
name|UriRef
argument_list|)
expr_stmt|;
comment|// test if there is only one entity referred
comment|//NOTE: The Zemanta Engine referrs several entities if they are marked as
comment|//      owl:sameAs by Zemanta
comment|//assertFalse(entityReferenceIterator.hasNext());
comment|// finally test if the entity label is set
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|entityLabelIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|entityAnnotation
argument_list|,
name|Properties
operator|.
name|FISE_ENTITY_LABEL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entityLabelIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param g      * @return      */
specifier|private
name|int
name|checkAllTextAnnotations
parameter_list|(
name|MGraph
name|g
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|textAnnotationIterator
init|=
name|g
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Properties
operator|.
name|RDF_TYPE
argument_list|,
name|TechnicalClasses
operator|.
name|FISE_TEXTANNOTATION
argument_list|)
decl_stmt|;
comment|// test if a textAnnotation is present
name|assertTrue
argument_list|(
name|textAnnotationIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|textAnnotationCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|textAnnotationIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|textAnnotation
init|=
operator|(
name|UriRef
operator|)
name|textAnnotationIterator
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
comment|// test if selected Text is added
name|checkTextAnnotation
argument_list|(
name|g
argument_list|,
name|textAnnotation
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|textAnnotationCount
operator|++
expr_stmt|;
block|}
return|return
name|textAnnotationCount
return|;
block|}
comment|/**      * Checks if a text annotation is valid      *      * @param g      * @param textAnnotation      */
specifier|private
name|void
name|checkTextAnnotation
parameter_list|(
name|MGraph
name|g
parameter_list|,
name|UriRef
name|textAnnotation
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|selectedTextIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|FISE_SELECTED_TEXT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// check if the selected text is added
name|assertTrue
argument_list|(
name|selectedTextIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test if the selected text is part of the TEXT_TO_TEST
name|Resource
name|object
init|=
name|selectedTextIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Literal
argument_list|)
expr_stmt|;
name|Literal
name|selectedText
init|=
operator|(
name|Literal
operator|)
name|object
decl_stmt|;
name|object
operator|=
literal|null
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|indexOf
argument_list|(
name|selectedText
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// test if context is added
comment|//context not present for Zemanta
comment|//        Iterator<Triple> selectionContextIterator = g.filter(textAnnotation,
comment|//                Properties.FISE_SELECTION_CONTEXT, null);
comment|//        assertTrue(selectionContextIterator.hasNext());
comment|//        // test if the selected text is part of the TEXT_TO_TEST
comment|//        object = selectionContextIterator.next().getObject();
comment|//        assertTrue(object instanceof Literal);
comment|//        assertTrue(content.indexOf(((Literal)object).getLexicalForm())>= 0);
comment|//        object = null;
comment|//test start/end if present
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|startPosIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|FISE_START
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|endPosIterator
init|=
name|g
operator|.
name|filter
argument_list|(
name|textAnnotation
argument_list|,
name|Properties
operator|.
name|FISE_END
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//start end is optional, but if start is present, that also end needs to be set
if|if
condition|(
name|startPosIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|resource
init|=
name|startPosIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|//only a single start position is supported
name|assertTrue
argument_list|(
operator|!
name|startPosIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resource
operator|instanceof
name|TypedLiteral
argument_list|)
expr_stmt|;
name|TypedLiteral
name|startPosLiteral
init|=
operator|(
name|TypedLiteral
operator|)
name|resource
decl_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
name|int
name|start
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|startPosLiteral
argument_list|)
decl_stmt|;
name|startPosLiteral
operator|=
literal|null
expr_stmt|;
comment|//now get the end
comment|//end must be defined if start is present
name|assertTrue
argument_list|(
name|endPosIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|=
name|endPosIterator
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
comment|//only a single end position is supported
name|assertTrue
argument_list|(
operator|!
name|endPosIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resource
operator|instanceof
name|TypedLiteral
argument_list|)
expr_stmt|;
name|TypedLiteral
name|endPosLiteral
init|=
operator|(
name|TypedLiteral
operator|)
name|resource
decl_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
name|int
name|end
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|endPosLiteral
argument_list|)
decl_stmt|;
name|endPosLiteral
operator|=
literal|null
expr_stmt|;
comment|//check for equality of the selected text and the text on the selected position in the content
comment|//System.out.println("TA ["+start+"|"+end+"]"+selectedText.getLexicalForm()+"<->"+content.substring(start,end));
name|assertTrue
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|equals
argument_list|(
name|selectedText
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if no start position is present, there must also be no end position defined
name|assertTrue
argument_list|(
operator|!
name|endPosIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ZemantaEnhancementEngineTest
name|test
init|=
operator|new
name|ZemantaEnhancementEngineTest
argument_list|()
decl_stmt|;
name|test
operator|.
name|setUpServices
argument_list|()
expr_stmt|;
name|test
operator|.
name|tesetBioText
argument_list|()
expr_stmt|;
name|test
operator|.
name|shutdownServices
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

