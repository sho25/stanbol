begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|engines
operator|.
name|zemanta
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Enumeration that contains all property definitions for the Zemanta  * Web Service. This contains also properties such as required default  * configurations as well as possible values. There are also utility  * methods to check parsed parameters  * @author Rupert Westenthaler  *  */
end_comment

begin_enum
specifier|public
enum|enum
name|ZemantaPropertyEnum
block|{
comment|/** 	 * the request type to be used e.g. 'zemanta.suggest' 	 */
name|method
argument_list|(
literal|"zemanta.suggest"
argument_list|,
literal|"zemanta.suggest"
argument_list|)
block|,
comment|/** 	 * the format used to encode results. Zemanta supports "xml", "json",  	 * "wnjson" and "rdfxml" but this implementation only allows rdfxml! 	 */
name|format
argument_list|(
literal|"rdfxml"
argument_list|,
literal|"rdfxml"
argument_list|)
block|,
comment|/** 	 * enable/disable URIs of Linking Open Data entities 	 */
name|return_rdf_links
argument_list|(
literal|"1"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
block|,
comment|/** 	 * if set to 'demoz' suggested dmoz categories are returned. Set this 	 * parameter to '0' to deactivate this feature 	 */
name|return_categories
argument_list|(
literal|"dmoz"
argument_list|,
literal|"dmoz"
argument_list|,
literal|"0"
argument_list|)
block|,
comment|/** 	 * enable/disable links to images 	 */
name|return_images
argument_list|(
literal|"0"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
block|,
comment|/** 	 * enable/disable personalised search (based on the api_key) 	 */
name|personal_scope
argument_list|(
literal|"0"
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|)
block|,
comment|/** 	 * Number of in-text links. the default depending on the number of input 	 * words, 1 per each 10 words, and it maxes out at 10 	 */
name|markup_limit
argument_list|(
literal|false
argument_list|)
block|,
comment|/** 	 * The api_key needed to use the service (required) 	 */
name|api_key
argument_list|(
literal|true
argument_list|)
block|,
comment|/** 	 * The text to analyse use UTF-8 encoding (required) 	 */
name|text
argument_list|(
literal|true
argument_list|)
block|, 	;
specifier|private
name|boolean
name|required
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|valueList
decl_stmt|;
specifier|private
name|String
name|toString
decl_stmt|;
comment|/** 	 * A required property with no default configuration and no value list 	 */
name|ZemantaPropertyEnum
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a new property without an default value or a value list 	 * @param optional if the property is required or optional 	 */
name|ZemantaPropertyEnum
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
name|this
argument_list|(
name|optional
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * A optional property with a default configuration and a list of allowed values 	 * @param defaultValue the value used if this parameter is not parsed. 	 *<code>null</code> indicates no default configuration. This does not 	 * mean, that Zemanta does not use an default value for requests that 	 * do not contain this parameter 	 * @param valueList the list of allowed values for this parameter. 	 *<code>null</code> or an empty array indicate that there are no 	 * restrictions on possible values. Note that this list only contains 	 * values supported by this API Wrapper. This may exclude some options 	 * that would be supported by Zemanta! 	 */
name|ZemantaPropertyEnum
parameter_list|(
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|valueList
parameter_list|)
block|{
name|this
argument_list|(
literal|false
argument_list|,
name|defaultValue
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * A general property definition 	 * @param required defines if the property is optional or required 	 * @param defaultValue the value used if this parameter is not parsed. 	 *<code>null</code> indicates no default configuration. This does not 	 * mean, that Zemanta does not use an default value for requests that 	 * do not contain this parameter 	 * @param valueList the list of allowed values for this parameter. 	 *<code>null</code> or an empty array indicate that there are no 	 * restrictions on possible values. Note that this list only contains 	 * values supported by this API Wrapper. This may exclude some options 	 * that would be supported by Zemanta! 	 */
name|ZemantaPropertyEnum
parameter_list|(
name|boolean
name|required
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|valueList
parameter_list|)
block|{
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
if|if
condition|(
name|valueList
operator|!=
literal|null
operator|&&
name|valueList
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|valueList
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|valueList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|(
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
name|required
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"optional"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"required"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|",default='"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|this
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|valueList
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", valueList="
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|this
operator|.
name|valueList
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|this
operator|.
name|toString
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasDefault
parameter_list|()
block|{
return|return
name|defaultValue
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|defaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|boolean
name|hasValueList
parameter_list|()
block|{
return|return
name|valueList
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|allowedValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|//if no value list is defined
if|if
condition|(
name|valueList
operator|==
literal|null
condition|)
block|{
comment|// return only false if NOT optional and value == null
return|return
operator|!
operator|(
name|value
operator|==
literal|null
operator|&&
operator|!
name|required
operator|)
return|;
block|}
else|else
block|{
comment|//check if the value is in the value list
return|return
name|valueList
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getValueList
parameter_list|()
block|{
return|return
name|valueList
return|;
block|}
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|required
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
operator|!
name|required
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
return|;
block|}
block|}
end_enum

end_unit

