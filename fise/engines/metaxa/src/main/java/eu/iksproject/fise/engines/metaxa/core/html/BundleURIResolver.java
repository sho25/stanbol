begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|engines
operator|.
name|metaxa
operator|.
name|core
operator|.
name|html
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * BundleURIResolver.java  *  * @author<a href="mailto:kasper@dfki.de">Walter Kasper</a>  */
end_comment

begin_class
specifier|public
class|class
name|BundleURIResolver
implements|implements
name|URIResolver
block|{
specifier|public
specifier|static
name|Bundle
name|BUNDLE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BundleURIResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Source
name|resolve
parameter_list|(
name|String
name|href
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
comment|//base contains the importing/including script, href the imported/included script
comment|//it is assumed here that href is a relative path
comment|//TODO href specifying an absolute URI
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No base given for: "
operator|+
name|href
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|resource
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"base: "
operator|+
name|base
operator|+
literal|"\n"
operator|+
literal|"href: "
operator|+
name|href
argument_list|)
expr_stmt|;
name|URL
name|newUrl
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|startsWith
argument_list|(
literal|"bundle:"
argument_list|)
condition|)
block|{
name|URI
name|baseURI
init|=
operator|new
name|URI
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|baseURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|resource
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|href
expr_stmt|;
name|newUrl
operator|=
name|BUNDLE
operator|.
name|getEntry
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource: "
operator|+
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|newUrl
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|newUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|newUrl
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// for non-bundles assume that we have a normal URL as base
name|resource
operator|=
name|base
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|base
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|href
expr_stmt|;
name|newUrl
operator|=
operator|new
name|URL
argument_list|(
name|resource
argument_list|)
expr_stmt|;
return|return
operator|new
name|StreamSource
argument_list|(
name|newUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|newUrl
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"BundleURIResolver failed: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

