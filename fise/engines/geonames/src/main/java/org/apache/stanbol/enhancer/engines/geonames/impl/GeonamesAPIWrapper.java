begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|engines
operator|.
name|geonames
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|GeonamesAPIWrapper
block|{
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GeonamesAPIWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * URI of the geonames.orf web services. This URI is used for the free as      * well as premium accounts without an own sub domain.      */
specifier|public
specifier|static
specifier|final
name|String
name|GEONAMES_ORG_WEBSERVICE_URL
init|=
literal|"http://ws.geonames.org/"
decl_stmt|;
comment|/**      * Relative path to the search service      */
specifier|public
specifier|static
specifier|final
name|String
name|SEARCH_SERVICE_PATH
init|=
literal|"search"
decl_stmt|;
comment|/**      * Relative path to the hierarchy service      */
specifier|public
specifier|static
specifier|final
name|String
name|HIERARCHY_SERVICE_PATH
init|=
literal|"hierarchy"
decl_stmt|;
comment|/**      * The access url for the search service. As default       * {@link #GEONAMES_ORG_WEBSERVICE_URL}+{@link #SEARCH_SERVICE_PATH}      * ({@value #GEONAMES_ORG_WEBSERVICE_URL}{@value #SEARCH_SERVICE_PATH})       * is used. Users with a premium account including an own sub domain       * might need to change this.      */
specifier|protected
name|String
name|searchServiceUrl
decl_stmt|;
comment|/**      * The access url for the hierarchy service. As default       * {@link #GEONAMES_ORG_WEBSERVICE_URL}+{@link #HIERARCHY_SERVICE_PATH}      * ({@value #GEONAMES_ORG_WEBSERVICE_URL}{@value #HIERARCHY_SERVICE_PATH})       * is used. Users with a premium account including an own sub domain       * might need to change this.      */
specifier|protected
name|String
name|hierarchyServiceUrl
decl_stmt|;
comment|/**      * The username. Only set if used in combination with a premium account      */
specifier|private
name|String
name|userName
decl_stmt|;
comment|/**      * The token. Only set if used in combination with a premium account      */
specifier|private
name|String
name|token
decl_stmt|;
comment|/**      * Enumeration that contains the property definitions used by the LocationEnhancementEngine. This enum      * does not define all properties defined by geonames.org      *       * @author Rupert Westenthaler      */
specifier|public
specifier|static
enum|enum
name|SearchRequestPropertyEnum
block|{
comment|/**          * search Toponyms by name          */
name|name
argument_list|(
literal|true
argument_list|)
block|,
comment|//this two properties are not used
comment|//        /**
comment|//         * search toponyms by full text search over all properties
comment|//         */
comment|//        q,
comment|//        /**
comment|//         * enable/disable URIs of Linking Open Data entities
comment|//         */
comment|//        name_equals,
comment|/**          * the maximum number of results (must be< 1000). Default is set to 5          */
name|maxRows
argument_list|(
literal|"5"
argument_list|)
block|,
comment|/**          * the index of the first result returned          */
name|startRow
block|,
comment|/**          * the ISO 3166 code of countries to restrict the search          */
name|country
block|,
comment|/**          * Restrict search to an continent          */
name|continentCode
argument_list|(
literal|null
argument_list|,
literal|"AF"
argument_list|,
literal|"AS"
argument_list|,
literal|"EU"
argument_list|,
literal|"NA"
argument_list|,
literal|"OC"
argument_list|,
literal|"SA"
argument_list|,
literal|"AN"
argument_list|)
block|,
comment|/**          * level1 admin code to restrict the search          */
name|adminCode1
block|,
comment|/**          * level2 admin code to restrict the search          */
name|adminCode2
block|,
comment|/**          * level3 admin code to restrict the search          */
name|adminCode3
block|,
comment|/**          * Feature Class of searched entities (multiple possible)          */
name|featureClass
argument_list|(
literal|null
argument_list|,
literal|"A"
argument_list|,
literal|"H"
argument_list|,
literal|"L"
argument_list|,
literal|"P"
argument_list|,
literal|"R"
argument_list|,
literal|"S"
argument_list|,
literal|"T"
argument_list|,
literal|"U"
argument_list|,
literal|"V"
argument_list|)
block|,
comment|/**          * Restrict search to one or more specific feature codes          */
name|featureCode
block|,
comment|/**          * The language of the parsed name. Also will use this language for the          * returned name of found toponyms          */
name|lang
block|,
comment|/**          * The encoding of the results. Default is set to json. Geonames.org          * would use XML as default if this parameter is not defined          */
name|type
argument_list|(
literal|"json"
argument_list|,
literal|"string"
argument_list|,
literal|"xml"
argument_list|,
literal|"json"
argument_list|,
literal|"rdf"
argument_list|)
block|,
comment|/**          * The detail level of the response. Default is set to FULL, because          * the score of results is only present with this mode.          */
name|style
argument_list|(
literal|"FULL"
argument_list|,
literal|"SHORT"
argument_list|,
literal|"MEDIUM"
argument_list|,
literal|"LONG"
argument_list|,
literal|"FULL"
argument_list|)
block|,
comment|/**          * Can be used to parse the user name needed for premium accounts          */
name|username
block|,
comment|/**          * The token required for requests of premium accounts          */
name|token
block|;
specifier|private
name|RequestProperty
name|property
decl_stmt|;
comment|/**          * An optional property with no default configuration and no value list          */
name|SearchRequestPropertyEnum
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * a required or optional property          * @param required<code>true</code> if the property is a required one          * or<code>false</code> for an optional property (in this case one can          * also use the default constructor)          */
name|SearchRequestPropertyEnum
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|this
argument_list|(
name|required
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**          * A optional property with a default configuration and a list of           * allowed values          * @param defaultValue the value used if this parameter is not parsed or          *<code>null</code> if there is no default value.          * @param valueListthe list of allowed values for this parameter.          */
name|SearchRequestPropertyEnum
parameter_list|(
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|valueList
parameter_list|)
block|{
name|this
argument_list|(
literal|false
argument_list|,
name|defaultValue
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
name|SearchRequestPropertyEnum
parameter_list|(
name|boolean
name|required
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|valueList
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
operator|new
name|RequestProperty
argument_list|(
name|name
argument_list|()
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RequestProperty
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|property
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|HierarchyRequestPorpertyEnum
block|{
comment|/**          * The ID of the Toponym the hierarchy is requested for          */
name|geonameId
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * The encoding of the results. Default is set to "json". geonames.org          * would set the default to xml if this property is not defined          */
name|type
argument_list|(
literal|"json"
argument_list|,
literal|"xml"
argument_list|,
literal|"json"
argument_list|)
block|,
comment|/**          * Even not documented also the hierarchy service does support the          * style parameter as documented for the search service.          * Parse "FULL" to get all the alternate labels          */
name|style
argument_list|(
literal|"FULL"
argument_list|,
literal|"SHORT"
argument_list|,
literal|"MEDIUM"
argument_list|,
literal|"LONG"
argument_list|,
literal|"FULL"
argument_list|)
block|,
comment|/**          * Also not documented but supported is that the hierarchy service          * supports the language attribute. This is especially interesting          * because the name property of results will use the label in the parsed          * language. The toponymName property will provide the preferred name!          */
name|lang
block|,
comment|/**          * Can be used to parse the user name needed for premium accounts          */
name|username
block|,
comment|/**          * The token required for requests of premium accounts          */
name|token
block|;
specifier|private
name|RequestProperty
name|property
decl_stmt|;
comment|/**          * An optional property with no default configuration and no value list          */
name|HierarchyRequestPorpertyEnum
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * A required or optional property          * @param required<code>true</code> if the property is a required one          * or<code>false</code> for an optional property (in this case one can          * also use the default constructor)          */
name|HierarchyRequestPorpertyEnum
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|this
argument_list|(
name|required
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**          * A optional property with a default configuration and a list of           * allowed values          * @param defaultValue the value used if this parameter is not parsed or          *<code>null</code> if there is no default value.          * @param valueListthe list of allowed values for this parameter.          */
name|HierarchyRequestPorpertyEnum
parameter_list|(
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|valueList
parameter_list|)
block|{
name|this
argument_list|(
literal|false
argument_list|,
name|defaultValue
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
name|HierarchyRequestPorpertyEnum
parameter_list|(
name|boolean
name|required
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|String
modifier|...
name|valueList
parameter_list|)
block|{
name|this
operator|.
name|property
operator|=
operator|new
name|RequestProperty
argument_list|(
name|name
argument_list|()
argument_list|,
name|required
argument_list|,
name|defaultValue
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RequestProperty
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|property
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Initialises a the geonames API wrapper as used for the free service      */
specifier|public
name|GeonamesAPIWrapper
parameter_list|()
block|{
name|this
argument_list|(
name|GEONAMES_ORG_WEBSERVICE_URL
operator|+
name|SEARCH_SERVICE_PATH
argument_list|,
name|GEONAMES_ORG_WEBSERVICE_URL
operator|+
name|HIERARCHY_SERVICE_PATH
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialise the geonames API wrapper for a given server, username and      * token. Parsing<code>null</code> for any of the parameter will use the      * default values. If an empty string is parsed as user name it will be      * ignored. Token is only accepted if a valid user name is prased.      * @param serverURL The url of the geonames server to use or<code>null</code>      * to use the default      * @param userName The user name to use or<code>null</code> to use the      * default. The user name MUST NOT be empty.      * @param token The token to use or<code>null</code> to use the default.      * If no valid user name is parsed the token will be ignored.      */
specifier|public
name|GeonamesAPIWrapper
parameter_list|(
name|String
name|serverURL
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|token
parameter_list|)
block|{
comment|//if serverURL is null parse null to use the default
comment|//if one is parsed add the tailing "/" if missing
name|this
argument_list|(
name|serverURL
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|serverURL
operator|+
operator|(
name|serverURL
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|SEARCH_SERVICE_PATH
operator|)
argument_list|,
name|serverURL
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|serverURL
operator|+
operator|(
name|serverURL
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|)
operator|+
name|HIERARCHY_SERVICE_PATH
operator|)
argument_list|,
name|userName
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialise the geonames API wrapper for a given search and hierarchy      * service, username and token. Parsing<code>null</code> for any of the       * parameter will use the default values. If an empty string is parsed as       * user name it will be ignored. Token is only accepted if a valid user name      * is prased.<br>      * The parsed user name and token will be used for both the search and the      * hierarchy service.      * @param searchService The url of the search service to use or<code>null</code>      * to use the default      * @param hierarchyService The url of the hierarchy service to use or       *<code>null</code> to use the default      * @param userName The user name to use or<code>null</code> to use the      * default. The user name MUST NOT be empty.      * @param token The token to use or<code>null</code> to use the default.      * If no valid user name is parsed the token will be ignored.      */
specifier|public
name|GeonamesAPIWrapper
parameter_list|(
name|String
name|searchService
parameter_list|,
name|String
name|hierarchyService
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|searchServiceUrl
operator|=
name|GEONAMES_ORG_WEBSERVICE_URL
operator|+
name|SEARCH_SERVICE_PATH
expr_stmt|;
name|this
operator|.
name|hierarchyServiceUrl
operator|=
name|GEONAMES_ORG_WEBSERVICE_URL
operator|+
name|HIERARCHY_SERVICE_PATH
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
operator|==
literal|null
operator|||
name|userName
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|userName
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|this
operator|.
name|userName
operator|==
literal|null
condition|?
literal|null
else|:
name|token
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Toponym
argument_list|>
name|searchToponyms
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|searchToponyms
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|SearchRequestPropertyEnum
operator|.
name|name
argument_list|,
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|Arrays
operator|.
name|asList
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Toponym
argument_list|>
name|searchToponyms
parameter_list|(
name|Map
argument_list|<
name|SearchRequestPropertyEnum
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|parsedParameter
parameter_list|)
throws|throws
name|IOException
block|{
comment|//create a new map because we should not change the parsed map!
name|Map
argument_list|<
name|SearchRequestPropertyEnum
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|requestProperties
init|=
operator|new
name|EnumMap
argument_list|<
name|SearchRequestPropertyEnum
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|SearchRequestPropertyEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|requestProperties
operator|.
name|putAll
argument_list|(
name|parsedParameter
argument_list|)
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
operator|&&
operator|!
name|requestProperties
operator|.
name|containsKey
argument_list|(
name|SearchRequestPropertyEnum
operator|.
name|username
argument_list|)
condition|)
block|{
name|requestProperties
operator|.
name|put
argument_list|(
name|SearchRequestPropertyEnum
operator|.
name|username
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
comment|//add the token only if also the user name was added
comment|// ... we would not like to use the token of an other user name
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|requestProperties
operator|.
name|put
argument_list|(
name|SearchRequestPropertyEnum
operator|.
name|token
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuilder
name|requestString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|requestString
operator|.
name|append
argument_list|(
name|searchServiceUrl
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SearchRequestPropertyEnum
name|entry
range|:
name|SearchRequestPropertyEnum
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getProperty
argument_list|()
operator|.
name|encode
argument_list|(
name|requestString
argument_list|,
name|first
argument_list|,
name|requestProperties
operator|.
name|get
argument_list|(
name|entry
argument_list|)
argument_list|)
operator|&&
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
comment|// if the first parameter is added set first to false
block|}
block|}
name|URL
name|requestUrl
decl_stmt|;
try|try
block|{
name|requestUrl
operator|=
operator|new
name|URL
argument_list|(
name|requestString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build valid request URL for "
operator|+
name|requestString
argument_list|)
throw|;
block|}
name|String
name|result
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|requestUrl
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|has
argument_list|(
literal|"totalResultsCount"
argument_list|)
condition|)
block|{
name|long
name|resultCount
init|=
name|root
operator|.
name|getLong
argument_list|(
literal|"totalResultsCount"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultCount
operator|<
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|root
operator|.
name|has
argument_list|(
literal|"geonames"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Toponym
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Toponym
argument_list|>
argument_list|()
decl_stmt|;
name|JSONArray
name|resultList
init|=
name|root
operator|.
name|getJSONArray
argument_list|(
literal|"geonames"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultList
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|Toponym
argument_list|(
name|resultList
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Result of Query for Toponyms with %s (resultCount=%s) does not contain any Toponym data"
argument_list|,
name|requestProperties
argument_list|,
name|resultCount
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// illegal Response throw exception
comment|// test if we can get the error by parsing the status field
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|has
argument_list|(
literal|"status"
argument_list|)
condition|)
block|{
name|JSONObject
name|status
init|=
name|root
operator|.
name|getJSONObject
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|has
argument_list|(
literal|"message"
argument_list|)
condition|)
block|{
name|msg
operator|=
name|status
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
literal|"Unable to parse results form Response "
operator|+
name|root
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to parse Response for Request "
operator|+
name|requestUrl
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"ResponseData: \n"
operator|+
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse JSON from Results for Request "
operator|+
name|requestUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Toponym
argument_list|>
name|getHierarchy
parameter_list|(
name|int
name|geonameId
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|requestString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|requestString
operator|.
name|append
argument_list|(
name|hierarchyServiceUrl
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|HierarchyRequestPorpertyEnum
name|entry
range|:
name|HierarchyRequestPorpertyEnum
operator|.
name|values
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
switch|switch
condition|(
name|entry
condition|)
block|{
comment|//add values for geonameId, username and token
case|case
name|geonameId
case|:
name|values
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|geonameId
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|username
case|:
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
case|case
name|token
case|:
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
default|default:
name|values
operator|=
literal|null
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|entry
operator|.
name|getProperty
argument_list|()
operator|.
name|encode
argument_list|(
name|requestString
argument_list|,
name|first
argument_list|,
name|values
argument_list|)
operator|&&
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
comment|// if the first parameter is added set first to false
block|}
block|}
name|URL
name|requestUrl
decl_stmt|;
try|try
block|{
name|requestUrl
operator|=
operator|new
name|URL
argument_list|(
name|requestString
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build valid request URL for "
operator|+
name|requestString
argument_list|)
throw|;
block|}
name|String
name|result
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|requestUrl
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|JSONObject
name|root
init|=
operator|new
name|JSONObject
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|has
argument_list|(
literal|"geonames"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Toponym
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Toponym
argument_list|>
argument_list|()
decl_stmt|;
name|JSONArray
name|resultList
init|=
name|root
operator|.
name|getJSONArray
argument_list|(
literal|"geonames"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultList
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|Toponym
argument_list|(
name|resultList
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
else|else
block|{
comment|// illegal Response throw exception
comment|// test if we can get the error by parsing the status field
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|has
argument_list|(
literal|"status"
argument_list|)
condition|)
block|{
name|JSONObject
name|status
init|=
name|root
operator|.
name|getJSONObject
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|has
argument_list|(
literal|"message"
argument_list|)
condition|)
block|{
name|msg
operator|=
name|status
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
literal|"Unable to parse results form Response "
operator|+
name|root
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to parse Response for Request "
operator|+
name|requestUrl
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"ResponseData: \n"
operator|+
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse JSON from Results for Request "
operator|+
name|requestUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

