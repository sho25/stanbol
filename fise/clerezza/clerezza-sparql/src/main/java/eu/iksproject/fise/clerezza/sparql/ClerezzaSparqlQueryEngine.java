begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|clerezza
operator|.
name|sparql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|SolutionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|UnionMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|servicesapi
operator|.
name|SparqlQueryEngine
import|;
end_import

begin_comment
comment|/** SPARQL query engine using Clerezza components  *  * @deprecated use the TcManager / Store API directly instead  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|SparqlQueryEngine
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClerezzaSparqlQueryEngine
implements|implements
name|SparqlQueryEngine
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClerezzaSparqlQueryEngine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|TcManager
name|tcManager
decl_stmt|;
specifier|public
name|ResultSet
name|executeQuery
parameter_list|(
name|String
name|sparqlQuery
parameter_list|)
throws|throws
name|SparqlQueryEngineException
block|{
comment|// This code was copied from FiseHandler - refactored to make
comment|// it reusable
name|log
operator|.
name|debug
argument_list|(
literal|"execute query"
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
comment|// TODO QueryParser should be a @reference??
name|SelectQuery
name|query
init|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|sparqlQuery
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|UriRef
argument_list|>
name|graphUris
init|=
name|tcManager
operator|.
name|listTripleCollections
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TripleCollection
argument_list|>
name|tripleCollections
init|=
operator|new
name|ArrayList
argument_list|<
name|TripleCollection
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|uriRef
range|:
name|graphUris
control|)
block|{
try|try
block|{
name|tripleCollections
operator|.
name|add
argument_list|(
name|tcManager
operator|.
name|getTriples
argument_list|(
name|uriRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|ex
parameter_list|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|tripleCollections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EmptyResultSet
operator|.
name|getInstance
argument_list|()
return|;
block|}
name|MGraph
name|unionGraph
init|=
operator|new
name|UnionMGraph
argument_list|(
name|tripleCollections
operator|.
name|toArray
argument_list|(
operator|new
name|TripleCollection
index|[
name|tripleCollections
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|preperation
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|query
argument_list|,
name|unionGraph
argument_list|)
decl_stmt|;
name|long
name|done
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// RW: added this logging to check if building the unionGraph is not
comment|// a performance hook!
name|log
operator|.
name|info
argument_list|(
literal|"Querytime "
operator|+
operator|(
name|done
operator|-
name|start
operator|)
operator|+
literal|"ms (preperation="
operator|+
operator|(
name|preperation
operator|-
name|start
operator|)
operator|+
literal|"|query="
operator|+
name|query
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|resultSet
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SparqlQueryEngineException
argument_list|(
literal|"Exception processing query ["
operator|+
name|sparqlQuery
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EmptyResultSet
implements|implements
name|ResultSet
block|{
specifier|private
specifier|static
name|EmptyResultSet
name|instance
init|=
operator|new
name|EmptyResultSet
argument_list|()
decl_stmt|;
specifier|public
name|void
name|remove
parameter_list|()
block|{         }
specifier|public
specifier|static
name|EmptyResultSet
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
specifier|public
name|SolutionMapping
name|next
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

