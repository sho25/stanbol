begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|eu
operator|.
name|iksproject
operator|.
name|fise
operator|.
name|jsonld
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * @author Fabian Christ  *  */
end_comment

begin_class
specifier|public
class|class
name|JsonLd
block|{
comment|// Map Namespace -> Prefix
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Map Subject -> Resource
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JsonLdResource
argument_list|>
name|resourceMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|JsonLdResource
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Flag to control whether the namespace prefix map should be used      * to shorten IRIs to prefix notation during serialization. Default      * value is<code>true</code>.<br />      *<br />      * If you already put values into this JSON-LD instance with prefix      * notation, you should set this to<code>false</code> before starting      * the serialization.      */
specifier|private
name|boolean
name|applyNamespaces
init|=
literal|true
decl_stmt|;
comment|/**      * Flag to control whether the serialized JSON-LD output will use      * joint or disjoint graphs for subjects and namespaces.  Default      * value is<code>true</code>.      */
specifier|private
name|boolean
name|useJointGraphs
init|=
literal|true
decl_stmt|;
comment|/**      * Add the given resource to this JsonLd object using the resourceId      * as key.      *      * @param resourceId      * @param resource      */
specifier|public
name|void
name|put
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|JsonLdResource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resourceMap
operator|.
name|put
argument_list|(
name|resourceId
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|useJointGraphs
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|createJointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|json
init|=
name|createDisjointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
if|if
condition|(
name|useJointGraphs
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|createJointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|,
name|indent
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|json
init|=
name|createDisjointGraph
argument_list|()
decl_stmt|;
return|return
name|JsonSerializer
operator|.
name|toString
argument_list|(
name|json
argument_list|,
name|indent
argument_list|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|createDisjointGraph
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|json
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|resourceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|subject
range|:
name|resourceMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subjectObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// put the namespaces
if|if
condition|(
operator|!
name|namespacePrefixMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nsObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|nsObject
operator|.
name|put
argument_list|(
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
name|subjectObject
operator|.
name|put
argument_list|(
literal|"#"
argument_list|,
name|nsObject
argument_list|)
expr_stmt|;
block|}
name|JsonLdResource
name|resource
init|=
name|resourceMap
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
comment|// put subject
if|if
condition|(
name|resource
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
literal|"@"
argument_list|,
name|resource
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// put types
name|putTypes
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// put properties = objects
name|putProperties
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// add to list of subjects
name|json
operator|.
name|add
argument_list|(
name|subjectObject
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|json
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createJointGraph
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resourceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|subjects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|subject
range|:
name|resourceMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// put subject
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subjectObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
name|JsonLdResource
name|resource
init|=
name|resourceMap
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
comment|// put subject
if|if
condition|(
name|resource
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
literal|"@"
argument_list|,
name|resource
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// put types
name|putTypes
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// put properties = objects
name|putProperties
argument_list|(
name|subjectObject
argument_list|,
name|resource
argument_list|)
expr_stmt|;
comment|// add to list of subjects
name|subjects
operator|.
name|add
argument_list|(
name|subjectObject
argument_list|)
expr_stmt|;
block|}
comment|// put subjects
if|if
condition|(
operator|!
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|subjects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|json
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|subjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|.
name|put
argument_list|(
literal|"@"
argument_list|,
name|subjects
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// put the namespaces
if|if
condition|(
operator|!
name|namespacePrefixMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nsObject
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
operator|new
name|JsonComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|nsObject
operator|.
name|put
argument_list|(
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|put
argument_list|(
literal|"#"
argument_list|,
name|nsObject
argument_list|)
expr_stmt|;
block|}
return|return
name|json
return|;
block|}
specifier|private
name|void
name|putTypes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subjectObject
parameter_list|,
name|JsonLdResource
name|resource
parameter_list|)
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|getTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|resource
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|applyNamespace
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|subjectObject
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|types
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|types
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
block|{
return|return
name|arg0
operator|.
name|compareTo
argument_list|(
name|arg1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|subjectObject
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|putProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonObject
parameter_list|,
name|JsonLdResource
name|resource
parameter_list|)
block|{
for|for
control|(
name|String
name|property
range|:
name|resource
operator|.
name|getPropertyMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|resource
operator|.
name|getPropertyMap
argument_list|()
operator|.
name|get
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|value
operator|=
name|applyNamespace
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
name|jsonObject
operator|.
name|put
argument_list|(
name|applyNamespace
argument_list|(
name|property
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|String
index|[]
name|stringArray
init|=
operator|(
name|String
index|[]
operator|)
name|value
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|stringArray
control|)
block|{
name|valueList
operator|.
name|add
argument_list|(
name|applyNamespace
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|jsonArray
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|valueList
argument_list|)
decl_stmt|;
name|jsonObject
operator|.
name|put
argument_list|(
name|applyNamespace
argument_list|(
name|property
argument_list|)
argument_list|,
name|jsonArray
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|Object
index|[]
name|objectArray
init|=
operator|(
name|Object
index|[]
operator|)
name|value
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|jsonArray
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objectArray
control|)
block|{
name|jsonArray
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|jsonObject
operator|.
name|put
argument_list|(
name|applyNamespace
argument_list|(
name|property
argument_list|)
argument_list|,
name|jsonArray
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jsonObject
operator|.
name|put
argument_list|(
name|applyNamespace
argument_list|(
name|property
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|applyNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|applyNamespaces
condition|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|namespacePrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|namespacePrefixMap
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|+
literal|":"
decl_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|uri
return|;
block|}
comment|/**      * Return the JSON-LD Resource for the given subject.      */
specifier|public
name|JsonLdResource
name|getResource
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
return|return
name|resourceMap
operator|.
name|get
argument_list|(
name|subject
argument_list|)
return|;
block|}
comment|/**      * Get the known namespace to prefix mapping.      *      * @return A {@link Map} from namespace String to prefix String.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespacePrefixMap
parameter_list|()
block|{
return|return
name|namespacePrefixMap
return|;
block|}
comment|/**      * Sets the known namespaces for the serializer.      *      * @param namespacePrefixMap      *            A {@link Map} from namespace String to prefix      *            String.      */
specifier|public
name|void
name|setNamespacePrefixMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePrefixMap
parameter_list|)
block|{
name|this
operator|.
name|namespacePrefixMap
operator|=
name|namespacePrefixMap
expr_stmt|;
block|}
comment|/**      * Adds a new namespace and its prefix to the list of used namespaces for this      * JSON-LD instance.      *      * @param namespace A namespace IRI.      * @param prefix A prefix to use and identify this namespace in serialized JSON-LD.      */
specifier|public
name|void
name|addNamespacePrefix
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|namespacePrefixMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determine whether currently joint or disjoint graphs are serialized with this JSON-LD instance.      *      * @return<code>True</code> if joint graphs are used,<code>False</code>otherwise.      */
specifier|public
name|boolean
name|isUseJointGraphs
parameter_list|()
block|{
return|return
name|useJointGraphs
return|;
block|}
comment|/**      * Set to<code>true</code> if you want to use joint graphs (default) or<code>false</code> otherwise.      *      * @param useJointGraphs      */
specifier|public
name|void
name|setUseJointGraphs
parameter_list|(
name|boolean
name|useJointGraphs
parameter_list|)
block|{
name|this
operator|.
name|useJointGraphs
operator|=
name|useJointGraphs
expr_stmt|;
block|}
comment|/**      * Flag to control whether the namespace prefix map should be used      * to shorten IRIs to prefix notation during serialization. Default      * value is<code>true</code>.      *<p>      * If you already put values into this JSON-LD instance with prefix      * notation, you should set this to<code>false</code> before starting      * the serialization.      *      * @return<code>True</code> if namespaces are applied during serialization,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|isApplyNamespaces
parameter_list|()
block|{
return|return
name|applyNamespaces
return|;
block|}
comment|/**      * Control whether namespaces from the namespace prefix map are      * applied to URLs during serialization.      *<p>      * Set this to<code>false</code> if you already have shortened IRIs      * with prefixes.      *      * @param applyNamespaces      */
specifier|public
name|void
name|setApplyNamespaces
parameter_list|(
name|boolean
name|applyNamespaces
parameter_list|)
block|{
name|this
operator|.
name|applyNamespaces
operator|=
name|applyNamespaces
expr_stmt|;
block|}
block|}
end_class

end_unit

