begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|sparql
operator|.
name|JenaSparqlEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|simple
operator|.
name|storage
operator|.
name|SimpleTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|JenaToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|clerezza
operator|.
name|ClerezzaAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|impl
operator|.
name|RuleAdaptersFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|impl
operator|.
name|RuleAdaptersManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|AlreadyExistingRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeEliminationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapterManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdaptersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|ClerezzaRuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|impl
operator|.
name|RefactorerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_comment
comment|/**  *   * @author anuzzolese  *   */
end_comment

begin_class
specifier|public
class|class
name|RefactoringTest
block|{
specifier|private
specifier|static
name|Refactorer
name|refactorer
decl_stmt|;
specifier|private
specifier|static
name|TcManager
name|tcm
decl_stmt|;
specifier|private
specifier|static
name|RuleStore
name|store
decl_stmt|;
specifier|private
name|Graph
name|tripleCollection
decl_stmt|;
specifier|private
name|String
name|rule
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// recipeIRI = IRI.create("http://kres.iks-project.eu/ontology/meta/rmi_config.owl#MyTestRecipe");
class|class
name|SpecialTcManager
extends|extends
name|TcManager
block|{
specifier|public
name|SpecialTcManager
parameter_list|(
name|QueryEngine
name|qe
parameter_list|,
name|WeightedTcProvider
name|wtcp
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|bindQueryEngine
argument_list|(
name|qe
argument_list|)
expr_stmt|;
name|bindWeightedTcProvider
argument_list|(
name|wtcp
argument_list|)
expr_stmt|;
block|}
block|}
name|QueryEngine
name|qe
init|=
operator|new
name|JenaSparqlEngine
argument_list|()
decl_stmt|;
name|WeightedTcProvider
name|wtcp
init|=
operator|new
name|SimpleTcProvider
argument_list|()
decl_stmt|;
name|tcm
operator|=
operator|new
name|SpecialTcManager
argument_list|(
name|qe
argument_list|,
name|wtcp
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|store
operator|=
operator|new
name|ClerezzaRuleStore
argument_list|(
name|configuration
argument_list|,
name|tcm
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration2
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|RuleAdaptersFactory
name|ruleAdaptersFactory
init|=
operator|new
name|RuleAdaptersFactoryImpl
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration3
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|ClerezzaAdapter
argument_list|(
name|configuration3
argument_list|,
name|store
argument_list|,
name|ruleAdaptersFactory
argument_list|)
expr_stmt|;
name|RuleAdapterManager
name|ruleAdapterManager
init|=
operator|new
name|RuleAdaptersManagerImpl
argument_list|(
name|configuration2
argument_list|,
name|ruleAdaptersFactory
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration4
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|refactorer
operator|=
operator|new
name|RefactorerImpl
argument_list|(
name|wtcp
argument_list|,
name|tcm
argument_list|,
name|store
argument_list|,
name|ruleAdapterManager
argument_list|,
name|configuration4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
literal|null
expr_stmt|;
name|tcm
operator|=
literal|null
expr_stmt|;
name|refactorer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|rule
operator|=
literal|"kres =<http://kres.iks-project.eu/ontology.owl#> . "
operator|+
name|separator
operator|+
literal|"foaf =<http://xmlns.com/foaf/0.1/> . "
operator|+
name|separator
operator|+
literal|"rule1[ is(kres:Person, ?x) . endsWith(str(?x), \"Person\") -> is(foaf:Person, ?x) ]"
expr_stmt|;
name|InputStream
name|inputStream
init|=
name|RefactoringTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/META-INF/test/testKReSOnt.owl"
argument_list|)
decl_stmt|;
name|Model
name|jenaModel
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
name|jenaModel
operator|=
name|jenaModel
operator|.
name|read
argument_list|(
name|inputStream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tripleCollection
operator|=
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaGraph
argument_list|(
name|jenaModel
argument_list|)
expr_stmt|;
name|Graph
name|mGraph
init|=
name|tcm
operator|.
name|createGraph
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/graph"
argument_list|)
argument_list|)
decl_stmt|;
name|mGraph
operator|.
name|addAll
argument_list|(
name|tripleCollection
argument_list|)
expr_stmt|;
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|store
operator|.
name|createRecipe
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|,
literal|"Recipe for testing the Refactor."
argument_list|)
expr_stmt|;
name|recipe
operator|=
name|store
operator|.
name|addRulesToRecipe
argument_list|(
name|recipe
argument_list|,
name|rule
argument_list|,
literal|"Test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistingRecipeException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|tcm
operator|.
name|deleteGraph
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/graph"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|removeRecipe
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeEliminationException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|refactoringTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Recipe
name|recipe
init|=
name|store
operator|.
name|getRecipe
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|)
decl_stmt|;
name|Graph
name|tc
init|=
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/graph"
argument_list|)
argument_list|,
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|easyRefactoringTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Recipe
name|recipe
init|=
name|store
operator|.
name|getRecipe
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Graph
name|tc
init|=
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
name|tripleCollection
argument_list|,
name|recipe
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error while refactoring."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|refactoringWithNonExistentRecipeTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/refactoredGraph"
argument_list|)
argument_list|,
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/graph"
argument_list|)
argument_list|,
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|refactoringWithARecipeWithNotSupportedAtoms
parameter_list|()
block|{
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|// the localname atom is not supported by the clerezza adapter and should throw an exception.
name|String
name|rule
init|=
literal|"kres =<http://kres.iks-project.eu/ontology.owl#> . "
operator|+
name|separator
operator|+
literal|"foaf =<http://xmlns.com/foaf/0.1/> . "
operator|+
name|separator
operator|+
literal|"rule2[ is(kres:Person, ?x) . same(localname(?y), \"text\") -> is(foaf:Person, ?x) ]"
decl_stmt|;
try|try
block|{
name|Recipe
name|recipe
init|=
name|store
operator|.
name|getRecipe
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|)
decl_stmt|;
name|recipe
operator|=
name|store
operator|.
name|addRulesToRecipe
argument_list|(
name|recipe
argument_list|,
name|rule
argument_list|,
literal|"Test"
argument_list|)
expr_stmt|;
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/refactoredGraph"
argument_list|)
argument_list|,
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/graph"
argument_list|)
argument_list|,
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|persistentRefactoringTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/refactoredGraph"
argument_list|)
argument_list|,
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/graph"
argument_list|)
argument_list|,
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/recipeA"
argument_list|)
argument_list|)
expr_stmt|;
name|Graph
name|tc
init|=
name|tcm
operator|.
name|getGraph
argument_list|(
operator|new
name|IRI
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/test/refactoredGraph"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error while refactoring."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|brokenRecipeTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// broken recipe
name|String
name|recipe
init|=
literal|"rule[is(<http://kres.iks-project.eu/ontology.owl#Person>) -> is(<http://xmlns.com/foaf/0.1/Person>, ?x)]"
decl_stmt|;
try|try
block|{
name|RuleParserImpl
operator|.
name|parse
argument_list|(
literal|"http://kres.iks-project.eu/ontology.owl#"
argument_list|,
name|recipe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

