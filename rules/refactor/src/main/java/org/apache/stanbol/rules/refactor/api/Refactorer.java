begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_comment
comment|/**  * A SemionReengineer provides methods for performing ontology refactorings. Refactoring are performed using  * recipes that contain sets of rules that describe the refactoring to do. Rules are expressed using the both  * the SWRL model and the KReS rules language.  *   * @author andrea.nuzzolese  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|Refactorer
block|{
comment|/**      * Fetch the mgraph with the selected uri from the storage.      *       * @param uriRef      *            {@link UriRef}      * @return the {@link MGraph}.      */
name|MGraph
name|getRefactoredDataSet
parameter_list|(
name|UriRef
name|uriRef
parameter_list|)
function_decl|;
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI}      * is the {@link IRI} of an IKS ontology and the {@code recipe} is the recipe that needs to be applied to      * ontology in order to perform the refactoring.      *       * @param refactoredDataSetURI      *            {@link IRI}      * @param datasetURI      *            {@link IRI}      * @param recipeIRI      *            {@link IRI}      */
name|void
name|ontologyRefactoring
parameter_list|(
name|IRI
name|refactoredDataSetURI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
function_decl|;
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI}      * is the URI of an RDF graph in KReS and the {@code recipe} is the recipe that needs to be applied to RDF      * graph in order to obtain the refactoring.      *       * @param datasetURI      *            {@link UriRef}      * @param recipe      *            {@link UriRef}      * @return the refactored {@link MGraph}      * @throws RefactoringException      * @throws NoSuchRecipeException      */
name|OWLOntology
name|ontologyRefactoring
parameter_list|(
name|OWLOntology
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
function_decl|;
comment|/** 	 * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI} is the URI 	 * of an RDF graph in KReS and the {@code recipe} is the recipe that needs to be applied to RDF graph in order to obtain the refactoring.  	 *  	 * @param datasetURI {@link UriRef}  	 * @param recipe {@link Recipe} 	 * @return the refactored {@link MGraph} 	 * @throws SemionRefactoringException 	 * @throws NoSuchRecipeException 	 */
specifier|public
name|OWLOntology
name|ontologyRefactoring
parameter_list|(
name|OWLOntology
name|datasetURI
parameter_list|,
name|Recipe
name|recipe
parameter_list|)
throws|throws
name|RefactoringException
function_decl|;
block|}
end_interface

end_unit

