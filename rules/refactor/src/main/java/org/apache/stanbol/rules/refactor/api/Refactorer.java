begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_comment
comment|/**  * The refactorer provides methods for performing ontology refactorings. Refactoring are performed using  * recipes that contain sets of rules that describe the refactoring to do.  *   * @author anuzzolese  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|Refactorer
block|{
comment|/**      * Fetch the mgraph with the selected uri from the storage.      *       * @param uriRef      *            {@link UriRef}      * @return the {@link MGraph}.      */
name|MGraph
name|getRefactoredDataSet
parameter_list|(
name|UriRef
name|uriRef
parameter_list|)
function_decl|;
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetID}      * identifies dataset to which apply the refactoring. {@code refactoredDataSetID} identifies the new      * refactored dataset in the store. {@code recipeID} identifies the ID of the recipe in the      * {@link RuleStore},      *       * @param refactoredDataSetID      *            {@link UriRef}      * @param datasetID      *            {@link UriRef}      * @param recipeIRI      *            {@link UriRef}      */
name|void
name|graphRefactoring
parameter_list|(
name|UriRef
name|refactoredOntologyID
parameter_list|,
name|UriRef
name|datasetID
parameter_list|,
name|UriRef
name|recipeID
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
function_decl|;
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI}      * is the URI of an RDF graph in KReS and the {@code recipe} is the recipe that needs to be applied to RDF      * graph in order to obtain the refactoring.      *       * @param datasetURI      *            {@link UriRef}      * @param recipe      *            {@link UriRef}      * @return the refactored {@link MGraph}      * @throws RefactoringException      * @throws NoSuchRecipeException      */
name|TripleCollection
name|graphRefactoring
parameter_list|(
name|UriRef
name|datasetID
parameter_list|,
name|UriRef
name|recipeID
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
function_decl|;
comment|/**      * The refactoring is perfomed by the {@code Refactorer} by invoking this method. The {@code datasetURI}      * is the URI of an RDF graph in KReS and the {@code recipe} is the recipe that needs to be applied to RDF      * graph in order to obtain the refactoring.      *       * @param datasetID      *            {@link TripleCollection}      * @param recipe      *            {@link Recipe}      * @return the refactored {@link TripleCollection}      * @throws SemionRefactoringException      * @throws NoSuchRecipeException      */
name|TripleCollection
name|graphRefactoring
parameter_list|(
name|TripleCollection
name|dataset
parameter_list|,
name|Recipe
name|recipe
parameter_list|)
throws|throws
name|RefactoringException
function_decl|;
block|}
end_interface

end_unit

