begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|JenaToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|JenaToOwlConvert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|util
operator|.
name|OWLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|scope
operator|.
name|OntologyScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreatePropertyURIStringFromLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreateStandardLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreateURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|util
operator|.
name|URIGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|io
operator|.
name|RDFXMLOntologyFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyStorageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLOntologyMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Syntax
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|Reasoner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|function
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|pfunction
operator|.
name|PropertyFunctionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|update
operator|.
name|UpdateAction
import|;
end_import

begin_class
class|class
name|ForwardChainingRefactoringGraph
block|{
specifier|private
name|MGraph
name|inputGraph
decl_stmt|;
specifier|private
name|Graph
name|outputGraph
decl_stmt|;
specifier|public
name|ForwardChainingRefactoringGraph
parameter_list|(
name|MGraph
name|inputGraph
parameter_list|,
name|Graph
name|outputGraph
parameter_list|)
block|{
name|this
operator|.
name|inputGraph
operator|=
name|inputGraph
expr_stmt|;
name|this
operator|.
name|outputGraph
operator|=
name|outputGraph
expr_stmt|;
block|}
specifier|public
name|MGraph
name|getInputGraph
parameter_list|()
block|{
return|return
name|inputGraph
return|;
block|}
specifier|public
name|Graph
name|getOutputGraph
parameter_list|()
block|{
return|return
name|outputGraph
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * The RefactorerImpl is the concrete implementation of the Refactorer interface defined in the KReS APIs. A  * SemionRefacter is able to perform ontology refactorings and mappings.  *   * @author andrea.nuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|Refactorer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RefactorerImpl
implements|implements
name|Refactorer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|TcManager
name|tcManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|WeightedTcProvider
name|weightedTcProvider
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the RefactorerImpl instances do need to be configured! YOU      * NEED TO USE      * {@link #RefactorerImpl(WeightedTcProvider, Serializer, TcManager, ONManager, SemionManager, RuleStore, Reasoner, Dictionary)}      * or its overloads, to parse the configuration and then initialise the rule store if running outside a      * OSGI environment.      */
specifier|public
name|RefactorerImpl
parameter_list|()
block|{      }
comment|/**      * Basic constructor to be used if outside of an OSGi environment. Invokes default constructor.      *       * @param weightedTcProvider      * @param serializer      * @param tcManager      * @param onManager      * @param semionManager      * @param ruleStore      * @param kReSReasoner      * @param configuration      */
specifier|public
name|RefactorerImpl
parameter_list|(
name|WeightedTcProvider
name|weightedTcProvider
parameter_list|,
name|Serializer
name|serializer
parameter_list|,
name|TcManager
name|tcManager
parameter_list|,
name|RuleStore
name|ruleStore
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|weightedTcProvider
operator|=
name|weightedTcProvider
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
name|this
operator|.
name|ruleStore
operator|=
name|ruleStore
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|getClass
argument_list|()
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|PropertyFunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#createURI"
argument_list|,
name|CreateURI
operator|.
name|class
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#createLabel"
argument_list|,
name|CreateStandardLabel
operator|.
name|class
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#propString"
argument_list|,
name|CreatePropertyURIStringFromLabel
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|Refactorer
operator|.
name|class
operator|+
literal|"activated."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|getClass
argument_list|()
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|weightedTcProvider
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|serializer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ruleStore
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|ForwardChainingRefactoringGraph
name|forwardChainingOperation
parameter_list|(
name|String
name|query
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
name|Graph
name|graph
init|=
name|kReSCoreOperation
argument_list|(
name|query
argument_list|,
name|mGraph
argument_list|)
decl_stmt|;
name|mGraph
operator|.
name|addAll
argument_list|(
name|graph
argument_list|)
expr_stmt|;
return|return
operator|new
name|ForwardChainingRefactoringGraph
argument_list|(
name|mGraph
argument_list|,
name|graph
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|getRefactoredDataSet
parameter_list|(
name|UriRef
name|uriRef
parameter_list|)
block|{
return|return
name|weightedTcProvider
operator|.
name|getMGraph
argument_list|(
name|uriRef
argument_list|)
return|;
block|}
specifier|private
name|Graph
name|kReSCoreOperation
parameter_list|(
name|String
name|query
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
comment|/*          *           * Graph constructedGraph = null; try { ConstructQuery constructQuery = (ConstructQuery)          * QueryParser.getInstance() .parse(query); constructedGraph = tcManager.executeSparqlQuery(          * constructQuery, mGraph);          *           * } catch (ParseException e) { log.error(e.getMessage()); } catch (NoQueryEngineException e) {          * log.error(e.getMessage()); }          *           * return constructedGraph;          */
name|Model
name|model
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
name|Query
name|sparqlQuery
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|Syntax
operator|.
name|syntaxARQ
argument_list|)
decl_stmt|;
name|QueryExecution
name|qexec
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|sparqlQuery
argument_list|,
name|model
argument_list|)
decl_stmt|;
return|return
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
name|qexec
operator|.
name|execConstruct
argument_list|()
argument_list|)
operator|.
name|getGraph
argument_list|()
return|;
block|}
comment|/**      * Method borrowed from the old ontonet ClerezzaStorage      *       * @param sparql      * @param datasetURI      * @return      */
specifier|private
name|OWLOntology
name|sparqlConstruct
parameter_list|(
name|String
name|sparql
parameter_list|,
name|String
name|datasetURI
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|Query
name|query
decl_stmt|;
name|MGraph
name|mGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
try|try
block|{
name|query
operator|=
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|sparql
argument_list|)
expr_stmt|;
name|UriRef
name|datasetUriRef
init|=
operator|new
name|UriRef
argument_list|(
name|datasetURI
argument_list|)
decl_stmt|;
name|MGraph
name|dataset
init|=
name|weightedTcProvider
operator|.
name|getMGraph
argument_list|(
name|datasetUriRef
argument_list|)
decl_stmt|;
name|mGraph
operator|.
name|addAll
argument_list|(
operator|(
name|SimpleGraph
operator|)
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|query
argument_list|,
name|dataset
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to execute SPARQL. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Model
name|om
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
name|JenaToOwlConvert
name|converter
init|=
operator|new
name|JenaToOwlConvert
argument_list|()
decl_stmt|;
return|return
name|converter
operator|.
name|ModelJenaToOwlConvert
argument_list|(
name|om
argument_list|,
literal|"RDF/XML"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ontologyRefactoring
parameter_list|(
name|IRI
name|refactoredOntologyIRI
parameter_list|,
name|IRI
name|datasetURI
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
comment|// ClerezzaOntologyStorage ontologyStorage = onManager.getOntologyStore();
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|RuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|OWLOntologyManager
name|ontologyManager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|String
name|fingerPrint
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|OWLOntology
name|refactoredDataSet
init|=
comment|/* ontologyStorage */
name|this
operator|.
name|sparqlConstruct
argument_list|(
name|sparql
argument_list|,
name|datasetURI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|saveOntology
argument_list|(
name|refactoredDataSet
argument_list|,
operator|new
name|RDFXMLOntologyFormat
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|fpOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|fingerPrint
operator|+=
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|""
argument_list|,
name|fpOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OWLOntologyStorageException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ontologyManager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refactoredOntologyIRI
operator|==
literal|null
condition|)
block|{
name|refactoredOntologyIRI
operator|=
name|IRI
operator|.
name|create
argument_list|(
name|URIGenerator
operator|.
name|createID
argument_list|(
literal|"urn://"
argument_list|,
name|fingerPrint
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OWLOntologyMerger
name|merger
init|=
operator|new
name|OWLOntologyMerger
argument_list|(
name|ontologyManager
argument_list|)
decl_stmt|;
try|try
block|{
name|refactoredOntology
operator|=
name|merger
operator|.
name|createMergedOntology
argument_list|(
name|ontologyManager
argument_list|,
name|refactoredOntologyIRI
argument_list|)
expr_stmt|;
comment|/* ontologyStorage. */
name|store
argument_list|(
name|refactoredOntology
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
block|}
comment|/**      * Method borrowed from the old ontonet ClerezzaStorage      *       * @param o      */
specifier|private
name|void
name|store
parameter_list|(
name|OWLOntology
name|o
parameter_list|)
block|{
comment|// // Why was it using two converters earlier?
comment|// JenaToOwlConvert converter = new JenaToOwlConvert();
comment|// OntModel om = converter.ModelOwlToJenaConvert(o, "RDF/XML");
comment|// MGraph mg = JenaToClerezzaConverter.jenaModelToClerezzaMGraph(om);
name|TripleCollection
name|mg
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|MGraph
name|mg2
init|=
literal|null
decl_stmt|;
name|IRI
name|iri
init|=
name|OWLUtils
operator|.
name|guessOntologyIdentifier
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|UriRef
name|ref
init|=
operator|new
name|UriRef
argument_list|(
name|iri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|mg2
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Entity "
operator|+
name|ref
operator|+
literal|" already exists in store. Replacing..."
argument_list|)
expr_stmt|;
name|mg2
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
name|mg2
operator|.
name|addAll
argument_list|(
name|mg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|ontologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|IRI
name|recipeIRI
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
comment|// JenaToOwlConvert jenaToOwlConvert = new JenaToOwlConvert();
comment|// OntModel ontModel =
comment|// jenaToOwlConvert.ModelOwlToJenaConvert(inputOntology, "RDF/XML");
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeIRI
argument_list|)
expr_stmt|;
name|RuleList
name|kReSRuleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"RULE LIST SIZE : "
operator|+
name|kReSRuleList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MGraph
name|unionMGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|TripleCollection
name|mGraph
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|inputOntology
argument_list|)
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|kReSRuleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SPARQL : "
operator|+
name|sparql
argument_list|)
expr_stmt|;
name|Graph
name|constructedGraph
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|kReSRule
operator|.
name|getExpressiveness
argument_list|()
condition|)
block|{
case|case
name|KReSCore
case|:
if|if
condition|(
name|mGraph
operator|instanceof
name|MGraph
condition|)
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
operator|(
name|MGraph
operator|)
name|mGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|ForwardChaining
case|:
if|if
condition|(
name|mGraph
operator|instanceof
name|MGraph
condition|)
block|{
name|ForwardChainingRefactoringGraph
name|forwardChainingRefactoringGraph
init|=
name|forwardChainingOperation
argument_list|(
name|sparql
argument_list|,
operator|(
name|MGraph
operator|)
name|mGraph
argument_list|)
decl_stmt|;
name|constructedGraph
operator|=
name|forwardChainingRefactoringGraph
operator|.
name|getOutputGraph
argument_list|()
expr_stmt|;
name|mGraph
operator|=
name|forwardChainingRefactoringGraph
operator|.
name|getInputGraph
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|Reflexive
case|:
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLConstruct
case|:
if|if
condition|(
name|mGraph
operator|instanceof
name|MGraph
condition|)
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
operator|(
name|MGraph
operator|)
name|mGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLDelete
case|:
name|constructedGraph
operator|=
name|sparqlUpdateOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLDeleteData
case|:
name|constructedGraph
operator|=
name|sparqlUpdateOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|constructedGraph
operator|!=
literal|null
condition|)
block|{
name|unionMGraph
operator|.
name|addAll
argument_list|(
name|constructedGraph
argument_list|)
expr_stmt|;
block|}
block|}
name|refactoredOntology
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|unionMGraph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"SemionRefactorer : No Such recipe in the KReS Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|refactoredOntology
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OWLOntology
name|ontologyRefactoring
parameter_list|(
name|OWLOntology
name|inputOntology
parameter_list|,
name|Recipe
name|recipe
parameter_list|)
throws|throws
name|RefactoringException
block|{
name|OWLOntology
name|refactoredOntology
init|=
literal|null
decl_stmt|;
comment|// JenaToOwlConvert jenaToOwlConvert = new JenaToOwlConvert();
comment|// OntModel ontModel =
comment|// jenaToOwlConvert.ModelOwlToJenaConvert(inputOntology, "RDF/XML");
comment|// OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
name|RuleList
name|ruleList
init|=
name|recipe
operator|.
name|getkReSRuleList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"RULE LIST SIZE : "
operator|+
name|ruleList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// OWLOntologyManager ontologyManager = OWLManager.createOWLOntologyManager();
comment|// OWLOntologyManager ontologyManager2 = OWLManager.createOWLOntologyManager();
name|MGraph
name|unionMGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|TripleCollection
name|mGraph
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|inputOntology
argument_list|)
decl_stmt|;
for|for
control|(
name|Rule
name|kReSRule
range|:
name|ruleList
control|)
block|{
name|String
name|sparql
init|=
name|kReSRule
operator|.
name|toSPARQL
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SPARQL : "
operator|+
name|sparql
argument_list|)
expr_stmt|;
name|Graph
name|constructedGraph
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|kReSRule
operator|.
name|getExpressiveness
argument_list|()
condition|)
block|{
case|case
name|KReSCore
case|:
if|if
condition|(
name|mGraph
operator|instanceof
name|MGraph
condition|)
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
operator|(
name|MGraph
operator|)
name|mGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|ForwardChaining
case|:
if|if
condition|(
name|mGraph
operator|instanceof
name|MGraph
condition|)
block|{
name|ForwardChainingRefactoringGraph
name|forwardChainingRefactoringGraph
init|=
name|forwardChainingOperation
argument_list|(
name|sparql
argument_list|,
operator|(
name|MGraph
operator|)
name|mGraph
argument_list|)
decl_stmt|;
name|constructedGraph
operator|=
name|forwardChainingRefactoringGraph
operator|.
name|getOutputGraph
argument_list|()
expr_stmt|;
name|mGraph
operator|=
name|forwardChainingRefactoringGraph
operator|.
name|getInputGraph
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|Reflexive
case|:
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLConstruct
case|:
if|if
condition|(
name|mGraph
operator|instanceof
name|MGraph
condition|)
name|constructedGraph
operator|=
name|kReSCoreOperation
argument_list|(
name|sparql
argument_list|,
operator|(
name|MGraph
operator|)
name|mGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLDelete
case|:
name|constructedGraph
operator|=
name|sparqlUpdateOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
case|case
name|SPARQLDeleteData
case|:
name|constructedGraph
operator|=
name|sparqlUpdateOperation
argument_list|(
name|sparql
argument_list|,
name|unionMGraph
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|constructedGraph
operator|!=
literal|null
condition|)
block|{
name|unionMGraph
operator|.
name|addAll
argument_list|(
name|constructedGraph
argument_list|)
expr_stmt|;
block|}
block|}
name|refactoredOntology
operator|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|unionMGraph
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactoredOntology
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|refactoredOntology
return|;
block|}
block|}
specifier|private
name|Graph
name|sparqlUpdateOperation
parameter_list|(
name|String
name|query
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
name|Model
name|model
init|=
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
decl_stmt|;
name|UpdateAction
operator|.
name|parseExecute
argument_list|(
name|query
argument_list|,
name|model
argument_list|)
expr_stmt|;
return|return
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
name|model
argument_list|)
operator|.
name|getGraph
argument_list|()
return|;
block|}
block|}
end_class

end_unit

