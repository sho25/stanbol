begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|WeightedTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|ConstructQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|sparql
operator|.
name|JenaSparqlEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|simple
operator|.
name|storage
operator|.
name|SimpleTcProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|JenaToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|clerezza
operator|.
name|ClerezzaAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|impl
operator|.
name|RuleAdaptersFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|impl
operator|.
name|RuleAdaptersManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapterManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdaptersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|ClerezzaRuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|KB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|RecipeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreatePropertyURIStringFromLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreateStandardLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
operator|.
name|CreateURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|Reasoner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|function
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|pfunction
operator|.
name|PropertyFunctionRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|XSD
import|;
end_import

begin_comment
comment|/**  * The RefactorerImpl is the concrete implementation of the Refactorer interface defined in the rule APIs of  * Stanbol. A Refacter is able to perform RDF graph refactorings and mappings.  *   * @author anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|Refactorer
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RefactorerImpl
implements|implements
name|Refactorer
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|TcManager
name|tcManager
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|WeightedTcProvider
name|weightedTcProvider
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|RuleAdapterManager
name|ruleAdapterManager
decl_stmt|;
comment|/**      * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the RefactorerImpl instances do need to be configured! YOU      * NEED TO USE      * {@link #RefactorerImpl(WeightedTcProvider, Serializer, TcManager, ONManager, SemionManager, RuleStore, Reasoner, Dictionary)}      * or its overloads, to parse the configuration and then initialise the rule store if running outside a      * OSGI environment.      */
specifier|public
name|RefactorerImpl
parameter_list|()
block|{      }
comment|/**      * Basic constructor to be used if outside of an OSGi environment. Invokes default constructor.      *       * @param weightedTcProvider      * @param serializer      * @param tcManager      * @param onManager      * @param semionManager      * @param ruleStore      * @param kReSReasoner      * @param configuration      */
specifier|public
name|RefactorerImpl
parameter_list|(
name|WeightedTcProvider
name|weightedTcProvider
parameter_list|,
name|TcManager
name|tcManager
parameter_list|,
name|RuleStore
name|ruleStore
parameter_list|,
name|RuleAdapterManager
name|ruleAdapterManager
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|weightedTcProvider
operator|=
name|weightedTcProvider
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
name|this
operator|.
name|ruleStore
operator|=
name|ruleStore
expr_stmt|;
name|this
operator|.
name|ruleAdapterManager
operator|=
name|ruleAdapterManager
expr_stmt|;
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|getClass
argument_list|()
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
block|{
name|PropertyFunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#createURI"
argument_list|,
name|CreateURI
operator|.
name|class
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#createLabel"
argument_list|,
name|CreateStandardLabel
operator|.
name|class
argument_list|)
expr_stmt|;
name|FunctionRegistry
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
literal|"http://www.stlab.istc.cnr.it/semion/function#propString"
argument_list|,
name|CreatePropertyURIStringFromLabel
operator|.
name|class
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|Refactorer
operator|.
name|class
operator|+
literal|"activated."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|getClass
argument_list|()
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|weightedTcProvider
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|ruleStore
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|getRefactoredDataSet
parameter_list|(
name|UriRef
name|uriRef
parameter_list|)
block|{
return|return
name|weightedTcProvider
operator|.
name|getMGraph
argument_list|(
name|uriRef
argument_list|)
return|;
block|}
comment|/**      * Execute a sparql construct on Clerezza.      *       * @param sparql      * @param datasetID      * @return      */
specifier|private
name|Graph
name|sparqlConstruct
parameter_list|(
name|ConstructQuery
name|constructQuery
parameter_list|,
name|UriRef
name|datasetID
parameter_list|)
block|{
name|MGraph
name|graph
init|=
name|weightedTcProvider
operator|.
name|getMGraph
argument_list|(
name|datasetID
argument_list|)
decl_stmt|;
return|return
name|sparqlConstruct
argument_list|(
name|constructQuery
argument_list|,
name|graph
argument_list|)
return|;
block|}
specifier|private
name|Graph
name|sparqlConstruct
parameter_list|(
name|ConstructQuery
name|constructQuery
parameter_list|,
name|TripleCollection
name|tripleCollection
parameter_list|)
block|{
return|return
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|constructQuery
argument_list|,
name|tripleCollection
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|graphRefactoring
parameter_list|(
name|UriRef
name|refactoredOntologyID
parameter_list|,
name|UriRef
name|datasetID
parameter_list|,
name|UriRef
name|recipeID
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
name|RuleAdapter
name|ruleAdapter
init|=
name|ruleAdapterManager
operator|.
name|getAdapter
argument_list|(
name|recipe
argument_list|,
name|ConstructQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ConstructQuery
argument_list|>
name|constructQueries
init|=
operator|(
name|List
argument_list|<
name|ConstructQuery
argument_list|>
operator|)
name|ruleAdapter
operator|.
name|adaptTo
argument_list|(
name|recipe
argument_list|,
name|ConstructQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|MGraph
name|mGraph
init|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|refactoredOntologyID
argument_list|)
decl_stmt|;
for|for
control|(
name|ConstructQuery
name|constructQuery
range|:
name|constructQueries
control|)
block|{
name|mGraph
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|sparqlConstruct
argument_list|(
name|constructQuery
argument_list|,
name|datasetID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedTypeForExportException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuleAtomCallExeption
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No Such recipe in the Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|TripleCollection
name|graphRefactoring
parameter_list|(
name|UriRef
name|graphID
parameter_list|,
name|UriRef
name|recipeID
parameter_list|)
throws|throws
name|RefactoringException
throws|,
name|NoSuchRecipeException
block|{
name|MGraph
name|unionMGraph
init|=
literal|null
decl_stmt|;
comment|// JenaToOwlConvert jenaToOwlConvert = new JenaToOwlConvert();
comment|// OntModel ontModel =
comment|// jenaToOwlConvert.ModelOwlToJenaConvert(inputOntology, "RDF/XML");
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
name|RuleAdapter
name|ruleAdapter
init|=
name|ruleAdapterManager
operator|.
name|getAdapter
argument_list|(
name|recipe
argument_list|,
name|ConstructQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ConstructQuery
argument_list|>
name|constructQueries
init|=
operator|(
name|List
argument_list|<
name|ConstructQuery
argument_list|>
operator|)
name|ruleAdapter
operator|.
name|adaptTo
argument_list|(
name|recipe
argument_list|,
name|ConstructQuery
operator|.
name|class
argument_list|)
decl_stmt|;
name|unionMGraph
operator|=
operator|new
name|SimpleMGraph
argument_list|()
expr_stmt|;
for|for
control|(
name|ConstructQuery
name|constructQuery
range|:
name|constructQueries
control|)
block|{
name|unionMGraph
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|sparqlConstruct
argument_list|(
name|constructQuery
argument_list|,
name|graphID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Refactor : No Such recipe in the Rule Store"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
name|e1
throw|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedTypeForExportException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuleAtomCallExeption
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|unionMGraph
operator|.
name|getGraph
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|TripleCollection
name|graphRefactoring
parameter_list|(
name|TripleCollection
name|inputGraph
parameter_list|,
name|Recipe
name|recipe
parameter_list|)
throws|throws
name|RefactoringException
block|{
name|RuleAdapter
name|ruleAdapter
decl_stmt|;
try|try
block|{
name|ruleAdapter
operator|=
name|ruleAdapterManager
operator|.
name|getAdapter
argument_list|(
name|recipe
argument_list|,
name|ConstructQuery
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ConstructQuery
argument_list|>
name|constructQueries
init|=
operator|(
name|List
argument_list|<
name|ConstructQuery
argument_list|>
operator|)
name|ruleAdapter
operator|.
name|adaptTo
argument_list|(
name|recipe
argument_list|,
name|ConstructQuery
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ConstructQuery
name|constructQuery
range|:
name|constructQueries
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|constructQuery
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MGraph
name|unionMGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|ConstructQuery
name|constructQuery
range|:
name|constructQueries
control|)
block|{
name|unionMGraph
operator|.
name|addAll
argument_list|(
name|sparqlConstruct
argument_list|(
name|constructQuery
argument_list|,
name|inputGraph
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|unionMGraph
return|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedTypeForExportException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuleAtomCallExeption
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RefactoringException
argument_list|(
literal|"The cause of the refactoring excpetion is: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|graph
init|=
literal|"<http://revyu.com/things/eswc-2008-paper-exposing-large-sitemaps><http://purl.org/stuff/rev#hasReview><http://revyu.com/reviews/bbecea3192d3c3bc5473ca8d9ab38cb143314a8e> ."
operator|+
literal|"<http://revyu.com/reviews/bbecea3192d3c3bc5473ca8d9ab38cb143314a8e><http://purl.org/stuff/rev#reviewer><http://revyu.com/people/ChrisBizer> . "
operator|+
literal|"<http://people.apache.org/~alexdma><http://xmlns.com/foaf/0.1/knows><http://revyu.com/people/ChrisBizer> . "
operator|+
literal|"<http://revyu.com/reviews/bbecea3192d3c3bc5473ca8d9ab38cb143314a8e><http://purl.org/stuff/rev#rating> \"4\"^^<"
operator|+
name|XSD
operator|.
name|integer
operator|.
name|getURI
argument_list|()
operator|+
literal|"> . "
decl_stmt|;
name|ByteArrayInputStream
name|inputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|graph
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|read
argument_list|(
name|inputStream
argument_list|,
literal|null
argument_list|,
literal|"N3"
argument_list|)
expr_stmt|;
name|MGraph
name|deserializedGraph
init|=
name|JenaToClerezzaConverter
operator|.
name|jenaModelToClerezzaMGraph
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|String
name|recipeString
init|=
literal|"foaf =<http://xmlns.com/foaf/0.1/> . "
operator|+
literal|"revyu =<http://purl.org/stuff/rev#> . "
operator|+
literal|"myvoc =<http://www.semanticweb.org/voc/my/> . "
operator|+
literal|"trustedContent[ "
operator|+
literal|"has(revyu:hasReview, ?ci, ?review) . "
operator|+
literal|"has(revyu:reviewer, ?review, ?y) . has(foaf:knows, ?x, ?y) . "
operator|+
literal|"values(revyu:rating, ?review, ?rating) . gt(str(?rating), 3) "
operator|+
literal|"-> has(myvoc:trustsContent, ?x, ?ci) "
operator|+
literal|"]"
decl_stmt|;
name|KB
name|kb
init|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
literal|"http://test.org/recipe"
argument_list|,
name|recipeString
argument_list|)
decl_stmt|;
name|Recipe
name|recipe
init|=
operator|new
name|RecipeImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
literal|"recipe"
argument_list|)
argument_list|,
literal|"A recipe"
argument_list|,
name|kb
operator|.
name|getRuleList
argument_list|()
argument_list|)
decl_stmt|;
class|class
name|SpecialTcManager
extends|extends
name|TcManager
block|{
specifier|public
name|SpecialTcManager
parameter_list|(
name|QueryEngine
name|qe
parameter_list|,
name|WeightedTcProvider
name|wtcp
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|bindQueryEngine
argument_list|(
name|qe
argument_list|)
expr_stmt|;
name|bindWeightedTcProvider
argument_list|(
name|wtcp
argument_list|)
expr_stmt|;
block|}
block|}
name|QueryEngine
name|qe
init|=
operator|new
name|JenaSparqlEngine
argument_list|()
decl_stmt|;
name|WeightedTcProvider
name|wtcp
init|=
operator|new
name|SimpleTcProvider
argument_list|()
decl_stmt|;
name|TcManager
name|tcm
init|=
operator|new
name|SpecialTcManager
argument_list|(
name|qe
argument_list|,
name|wtcp
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|RuleStore
name|store
init|=
operator|new
name|ClerezzaRuleStore
argument_list|(
name|configuration
argument_list|,
name|tcm
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration2
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|RuleAdaptersFactory
name|ruleAdaptersFactory
init|=
operator|new
name|RuleAdaptersFactoryImpl
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration3
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|ClerezzaAdapter
argument_list|(
name|configuration3
argument_list|,
name|store
argument_list|,
name|ruleAdaptersFactory
argument_list|)
expr_stmt|;
name|RuleAdapterManager
name|ruleAdapterManager
init|=
operator|new
name|RuleAdaptersManagerImpl
argument_list|(
name|configuration2
argument_list|,
name|ruleAdaptersFactory
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration4
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|RefactorerImpl
name|refactorer
init|=
operator|new
name|RefactorerImpl
argument_list|(
name|wtcp
argument_list|,
name|tcm
argument_list|,
name|store
argument_list|,
name|ruleAdapterManager
argument_list|,
name|configuration4
argument_list|)
decl_stmt|;
try|try
block|{
name|MGraph
name|mGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|mGraph
operator|.
name|addAll
argument_list|(
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
name|deserializedGraph
argument_list|,
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
name|JenaToClerezzaConverter
operator|.
name|clerezzaMGraphToJenaModel
argument_list|(
name|mGraph
argument_list|)
operator|.
name|write
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

