begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NO_CONTENT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|PRECONDITION_FAILED
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
operator|.
name|NOT_ACCEPTABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|MANCHESTER_OWL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|OWL_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|RDF_XML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|TURTLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
operator|.
name|X_TURTLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|owl
operator|.
name|transformation
operator|.
name|OWLAPIToClerezzaConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|utils
operator|.
name|MediaTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|KB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|RecipeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|Refactorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|refactor
operator|.
name|api
operator|.
name|RefactoringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|ImplicitProduces
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataParam
import|;
end_import

begin_comment
comment|/**  *   * @author anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/refactor"
argument_list|)
annotation|@
name|ImplicitProduces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
operator|+
literal|";qs=2"
argument_list|)
specifier|public
class|class
name|RefactorResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Refactorer
name|refactorer
decl_stmt|;
specifier|protected
name|RuleStore
name|ruleStore
decl_stmt|;
specifier|public
name|RefactorResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|refactorer
operator|=
operator|(
name|Refactorer
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Refactorer
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|refactorer
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Refactorer missing in ServletContext"
argument_list|)
throw|;
name|ruleStore
operator|=
operator|(
name|RuleStore
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RuleStore
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|ruleStore
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RuleStore missing in ServletContext"
argument_list|)
throw|;
block|}
comment|/**      * The apply mode allows the client to compose a recipe, by mean of string containg the rules, and apply      * it "on the fly" to the graph in input.      *       * @param recipe      *            String      * @param input      *            InputStream      * @return a Response containing the transformed graph      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/apply"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|TURTLE
block|,
name|RDF_XML
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|RDF_JSON
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|applyRefactoring
parameter_list|(
annotation|@
name|FormDataParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
literal|"input"
argument_list|)
name|InputStream
name|input
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|OWLOntology
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
name|doRefactoring
argument_list|(
name|input
argument_list|,
name|RuleParserImpl
operator|.
name|parse
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/"
argument_list|,
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|BAD_REQUEST
argument_list|)
throw|;
block|}
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|MediaType
name|mediaType
init|=
name|MediaTypeUtil
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * The apply mode allows the client to compose a recipe, by mean of string containg the rules, and apply      * it "on the fly" to the graph in input.      *       * @param recipe      *            String      * @param input      *            InputStream      * @return a Response containing the transformed graph      */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/applyfile"
argument_list|)
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|TURTLE
block|,
name|RDF_XML
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|RDF_JSON
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|applyRefactoringFromRuleFile
parameter_list|(
annotation|@
name|FormDataParam
argument_list|(
literal|"recipe"
argument_list|)
name|InputStream
name|recipeStream
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
literal|"input"
argument_list|)
name|InputStream
name|input
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
decl_stmt|;
name|OWLOntology
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
name|doRefactoring
argument_list|(
name|input
argument_list|,
name|RuleParserImpl
operator|.
name|parse
argument_list|(
literal|"http://incubator.apache.com/stanbol/rules/refactor/"
argument_list|,
name|recipeStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e1
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|MediaType
name|mediaType
init|=
name|MediaTypeUtil
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
else|else
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Utility method that groups all calls to the refactorer.      *       * @param input      * @param recipe      * @return      * @throws OWLOntologyCreationException      * @throws RefactoringException      */
specifier|private
name|OWLOntology
name|doRefactoring
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|KB
name|kb
parameter_list|)
throws|throws
name|OWLOntologyCreationException
throws|,
name|RefactoringException
block|{
if|if
condition|(
name|kb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RuleList
name|ruleList
init|=
name|kb
operator|.
name|getRuleList
argument_list|()
decl_stmt|;
if|if
condition|(
name|ruleList
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Recipe
name|actualRecipe
init|=
operator|new
name|RecipeImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|ruleList
argument_list|)
decl_stmt|;
comment|// Parse the input ontology
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|inputOntology
init|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|TripleCollection
name|tripleCollection
init|=
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|inputOntology
argument_list|)
argument_list|,
name|actualRecipe
argument_list|)
decl_stmt|;
comment|// Refactor
return|return
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|tripleCollection
argument_list|)
return|;
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/apply"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightApply
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
annotation|@
name|Path
argument_list|(
literal|"/applyfile"
argument_list|)
specifier|public
name|Response
name|handleCorsPreflightApplyFile
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|TURTLE
block|,
name|RDF_XML
block|,
name|MANCHESTER_OWL
block|,
name|FUNCTIONAL_OWL
block|,
name|OWL_XML
block|,
name|RDF_JSON
block|,
name|X_TURTLE
block|}
argument_list|)
specifier|public
name|Response
name|performRefactoring
parameter_list|(
annotation|@
name|FormDataParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
literal|"input"
argument_list|)
name|InputStream
name|input
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
comment|// Refactorer semionRefactorer = semionManager.getRegisteredRefactorer();
name|ResponseBuilder
name|rb
decl_stmt|;
name|Recipe
name|rcp
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|recipe
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipe
operator|=
literal|"urn:"
operator|+
name|recipe
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipe
argument_list|)
expr_stmt|;
block|}
name|UriRef
name|recipeID
init|=
operator|new
name|UriRef
argument_list|(
name|recipe
argument_list|)
decl_stmt|;
name|rcp
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
name|OWLOntologyManager
name|manager
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
decl_stmt|;
name|OWLOntology
name|inputOntology
init|=
name|manager
operator|.
name|loadOntologyFromOntologyDocument
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|TripleCollection
name|tripleCollection
init|=
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
name|OWLAPIToClerezzaConverter
operator|.
name|owlOntologyToClerezzaMGraph
argument_list|(
name|inputOntology
argument_list|)
argument_list|,
name|rcp
argument_list|)
decl_stmt|;
name|OWLOntology
name|outputOntology
init|=
name|OWLAPIToClerezzaConverter
operator|.
name|clerezzaGraphToOWLOntology
argument_list|(
name|tripleCollection
argument_list|)
decl_stmt|;
name|rb
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|outputOntology
argument_list|)
expr_stmt|;
name|MediaType
name|mediaType
init|=
name|MediaTypeUtil
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
name|rb
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NO_CONTENT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|PRECONDITION_FAILED
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|rb
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
specifier|public
name|Response
name|performRefactoringLazyCreateGraph
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"input-graph"
argument_list|)
name|String
name|inputGraph
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"output-graph"
argument_list|)
name|String
name|outputGraph
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"recipe: {}"
argument_list|,
name|recipe
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"input-graph: {}"
argument_list|,
name|inputGraph
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"output-graph: {}"
argument_list|,
name|outputGraph
argument_list|)
expr_stmt|;
name|UriRef
name|recipeID
init|=
operator|new
name|UriRef
argument_list|(
name|recipe
argument_list|)
decl_stmt|;
name|UriRef
name|inputGraphID
init|=
operator|new
name|UriRef
argument_list|(
name|inputGraph
argument_list|)
decl_stmt|;
name|UriRef
name|outputGraphID
init|=
operator|new
name|UriRef
argument_list|(
name|outputGraph
argument_list|)
decl_stmt|;
comment|// Refactorer semionRefactorer = semionManager.getRegisteredRefactorer();
name|ResponseBuilder
name|responseBuilder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|refactorer
operator|.
name|graphRefactoring
argument_list|(
name|outputGraphID
argument_list|,
name|inputGraphID
argument_list|,
name|recipeID
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RefactoringException
name|e
parameter_list|)
block|{
comment|// refactoring exceptions are re-thrown
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
name|MediaType
name|mediaType
init|=
name|MediaTypeUtil
operator|.
name|getAcceptableMediaType
argument_list|(
name|headers
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
name|responseBuilder
operator|.
name|header
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

