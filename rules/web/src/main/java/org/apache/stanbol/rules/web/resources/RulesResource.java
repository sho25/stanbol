begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|viewable
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|AlreadyExistingRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRuleInRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeEliminationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapterManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RecipeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|RecipeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|ImplicitProduces
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataParam
import|;
end_import

begin_comment
comment|/**  *   * @author elvio, anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/rules"
argument_list|)
annotation|@
name|ImplicitProduces
argument_list|(
name|MediaType
operator|.
name|TEXT_HTML
operator|+
literal|";qs=2"
argument_list|)
specifier|public
class|class
name|RulesResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RuleStore
name|ruleStore
decl_stmt|;
specifier|private
name|RuleAdapterManager
name|adapterManager
decl_stmt|;
comment|/**      * To get the RuleStoreImpl where are stored the rules and the recipes      *       * @param servletContext      *            {To get the context where the REST service is running.}      */
specifier|public
name|RulesResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|ruleStore
operator|=
operator|(
name|RuleStore
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RuleStore
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|adapterManager
operator|=
operator|(
name|RuleAdapterManager
operator|)
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RuleAdapterManager
operator|.
name|class
argument_list|,
name|servletContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * It returns the list of recipes whose descriptions match the string passed in the description parameter.<br>      * If some recipe matches the description passed a 200 code with the list of recipes is returned.      * Otherwise a 404 status code is returned.      *       * @param description      *            {@link String}      * @return<ul>      *<li>200: The list of recipe matching the description provided is returned</li>      *<li>404: No recipe matches the description provided</li>      *</ul>      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/find/recipes"
argument_list|)
specifier|public
name|Response
name|findRecipes
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"description"
argument_list|)
name|String
name|description
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Searching for recipes with description like to {}."
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|RecipeList
name|recipes
init|=
name|ruleStore
operator|.
name|findRecipesByDescription
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe list is emplty? {} "
argument_list|,
name|recipes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|recipes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|recipes
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * It returns the list of rule whose names or descriptions match the string passed in the parameter.<br>      * If the name parameter is not null the search will be executed on that parameter, otherwise it run on      * the description parameter. If both are bound the search will be executed on both.<br/>      * If some rule matches the description passed a 200 code with the list of recipes is returned. Otherwise      * a 404 status code is returned.      *       * @param description      *            {@link String}      * @return<ul>      *<li>200: The list of recipe matching the description provided is returned</li>      *<li>404: No recipe matches the description provided</li>      *</ul>      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/find/rules"
argument_list|)
specifier|public
name|Response
name|findRules
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"name"
argument_list|)
name|String
name|name
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"description"
argument_list|)
name|String
name|description
parameter_list|)
block|{
name|RuleList
name|rules
init|=
operator|new
name|RuleList
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rules
operator|.
name|addAll
argument_list|(
name|ruleStore
operator|.
name|findRulesByName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rules
operator|.
name|addAll
argument_list|(
name|ruleStore
operator|.
name|findRulesByDescription
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|rules
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Get a recipe from the rule base (that is the ontology that contains the rules and the recipe).<br/>      * If the second parameter is not null then the method returns the rule in the recipe identified by that      * parameter.<br/>      *       * curl -v -X GET http://localhost:8080/kres/rule/http      * ://kres.iks-project.eu/ontology/meta/rmi.owl#ProvaParentRule      *       * @param uri      *            {A string contains the IRI full name of the rule.}      * @return Return:<br/>      *         200 The rule is retrieved (import declarations point to KReS Services)<br/>      *         404 The rule does not exists in the manager<br/>      *         500 Some error occurred      *       */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/recipe/{recipe:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|,
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
specifier|public
name|Response
name|getRule
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipeID
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"rule"
argument_list|)
name|String
name|ruleID
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|Recipe
name|recipe
decl_stmt|;
name|Rule
name|rule
decl_stmt|;
name|ResponseBuilder
name|responseBuilder
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipeID
operator|=
literal|"urn:"
operator|+
name|recipeID
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipeID
argument_list|)
expr_stmt|;
block|}
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ruleID
operator|!=
literal|null
operator|&&
operator|!
name|ruleID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rule
operator|=
name|ruleStore
operator|.
name|getRule
argument_list|(
name|recipe
argument_list|,
operator|new
name|UriRef
argument_list|(
name|ruleID
argument_list|)
argument_list|)
expr_stmt|;
name|RuleList
name|ruleList
init|=
operator|new
name|RuleList
argument_list|()
decl_stmt|;
name|ruleList
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|recipe
operator|=
operator|new
name|RecipeImpl
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|,
name|recipe
operator|.
name|getRecipeDescription
argument_list|()
argument_list|,
name|ruleList
argument_list|)
expr_stmt|;
block|}
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|recipe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRuleInRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/recipe/{recipe:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|MediaType
operator|.
name|TEXT_HTML
block|}
argument_list|)
specifier|public
name|Response
name|showRecipe
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipeID
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"rule"
argument_list|)
name|String
name|ruleID
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|Recipe
name|recipe
decl_stmt|;
name|Rule
name|rule
decl_stmt|;
name|ResponseBuilder
name|responseBuilder
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipeID
operator|=
literal|"urn:"
operator|+
name|recipeID
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipeID
argument_list|)
expr_stmt|;
block|}
name|recipe
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ruleID
operator|!=
literal|null
operator|&&
operator|!
name|ruleID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rule
operator|=
name|ruleStore
operator|.
name|getRule
argument_list|(
name|recipe
argument_list|,
operator|new
name|UriRef
argument_list|(
name|ruleID
argument_list|)
argument_list|)
expr_stmt|;
name|RuleList
name|ruleList
init|=
operator|new
name|RuleList
argument_list|()
decl_stmt|;
name|ruleList
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|recipe
operator|=
operator|new
name|RecipeImpl
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|,
name|recipe
operator|.
name|getRecipeDescription
argument_list|()
argument_list|,
name|ruleList
argument_list|)
expr_stmt|;
block|}
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"rules"
argument_list|,
operator|new
name|RulesPrettyPrintResource
argument_list|(
name|servletContext
argument_list|,
name|uriInfo
argument_list|,
name|recipe
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRuleInRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * This method implements a REST service that allows to create a new empty recipe in the store with a      * given description.<br/>      * The description parameter is OPTIONAL.      *       * @param recipeID      *            {@link String}      * @param description      *            {@link String} - OPTIONAL      * @param headers      *            {@link HttpHeaders}      * @return<ul>      *<li>200 - if the recipe is created</li>      *<li>409 - if a recipe with the same identifier exists in the store</li>      *</ul>      */
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/recipe/{recipe:.+}"
argument_list|)
specifier|public
name|Response
name|createRecipe
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipeID
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"description"
argument_list|)
name|String
name|description
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipeID
operator|=
literal|"urn:"
operator|+
name|recipeID
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipeID
argument_list|)
expr_stmt|;
block|}
name|ruleStore
operator|.
name|createRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeID
argument_list|)
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistingRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/recipe"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|,
name|KRFormat
operator|.
name|FUNCTIONAL_OWL
block|,
name|KRFormat
operator|.
name|MANCHESTER_OWL
block|}
argument_list|)
specifier|public
name|Response
name|listRecipes
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RecipeList
name|recipeList
init|=
name|getListRecipes
argument_list|()
decl_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|recipeList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|RecipeList
name|getListRecipes
parameter_list|()
throws|throws
name|NoSuchRecipeException
throws|,
name|RecipeConstructionException
block|{
return|return
name|ruleStore
operator|.
name|listRecipes
argument_list|()
return|;
block|}
comment|/**      * This method allows to delete a recipe or a rule from the store.<br/>      * If the optional rule identifier id provided as second parameter that the rule is deleted. Otherwise it      * is the whole recipe to be deleted.      *       * @param recipe      *            {@link String}      * @param rule      *            {@link String} - OPTIONAL      * @param headers      *            {@link HttpHeaders}      * @return<ul>      *<li>200 - if either the recipe or the rule is deleted</li>      *<li>204 - it is not possible to delete the rule because the internal construction of the recipe      *         failed</li>      *<li>404 - the rule does not exist</li>      *<li>412 - the recipe to which the rule belongs does not exist</li>      *<li>500 - if a {@link RecipeEliminationException} exception is thrown</li>      *</ul>      */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/recipe/{recipe:.+}"
argument_list|)
specifier|public
name|Response
name|removeRecipe
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"rule"
argument_list|)
name|String
name|rule
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
decl_stmt|;
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
name|URI
name|uri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|recipe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
name|stop
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stop
condition|)
block|{
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipe
operator|=
literal|"urn:"
operator|+
name|recipe
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipe
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is : "
operator|+
name|recipe
argument_list|)
expr_stmt|;
if|if
condition|(
name|rule
operator|!=
literal|null
operator|&&
operator|!
name|rule
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Recipe
name|rcp
decl_stmt|;
try|try
block|{
name|rcp
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
name|Rule
name|rl
init|=
name|ruleStore
operator|.
name|getRule
argument_list|(
name|rcp
argument_list|,
operator|new
name|UriRef
argument_list|(
name|rule
argument_list|)
argument_list|)
decl_stmt|;
name|ruleStore
operator|.
name|removeRule
argument_list|(
name|rcp
argument_list|,
name|rl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|PRECONDITION_FAILED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRuleInRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|ruleStore
operator|.
name|removeRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeEliminationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Add rules to a recipe. An optional description can be provided to the rules.      *       * @param recipe      *            {A string contains the IRI of the recipe to be added}      * @param rules      *            {A string contains the rules in Stanbol syntax}      * @param description      *            {A string contains a description of the rule}      * @param headers      *            {The {@link HttpHeaders}      * @return Return:<br/>      *         200 The recipe has been added<br/>      *         409 The recipe has not been added<br/>      *         500 Some error occurred      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|TEXT_PLAIN
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/recipe/{recipe:.+}"
argument_list|)
specifier|public
name|Response
name|addRulesToRecipe
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|value
operator|=
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"rules"
argument_list|)
name|InputStream
name|rules
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
name|value
operator|=
literal|"description"
argument_list|)
name|String
name|description
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
decl_stmt|;
name|Recipe
name|rcp
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|recipe
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipe
operator|=
literal|"urn:"
operator|+
name|recipe
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipe
argument_list|)
expr_stmt|;
block|}
name|rcp
operator|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
name|ruleStore
operator|.
name|addRulesToRecipe
argument_list|(
name|rcp
argument_list|,
name|rules
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Return the String representation of a recipe adapted to another format, e.g., Jena rules, SPARQL      * CONSTRUCTs, Clerezza, SWRL, etc.      *       * @param recipe      *            {The ID of the recipe}      * @param format      *            {The canonical name of the class we want have back, e.g.,      *            org.apache.stanbol.rules.base.api.Rule for Jena Rules}      * @param headers      *            {@link HttpHeaders}      * @return<ul>      *<li>200: it works properly and the string representation of the recipe according to the format      *         provided is returned</li>      *<li>204: the recipe does not exist in the store</li>      *<li>403: a class exists for the format provided but there is no adapter for that</li>      *<li>404: no class exists in the context for the format provided</li>      *<li>406: some error occurred while converting a rule of the recipe</li>      *<li>409: some atom of a rule in the recipe cannot be converted to the format provided</li>      *</ul>      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/adapters/{recipe:.+}"
argument_list|)
specifier|public
name|Response
name|adaptTo
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"format"
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|classToLoad
decl_stmt|;
try|try
block|{
comment|// ClassLoader loader = Thread.currentThread().getContextClassLoader();
comment|// classToLoad = loader.loadClass(format);
name|classToLoad
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|recipe
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recipe
operator|=
literal|"urn:"
operator|+
name|recipe
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"The recipe ID is a URI without scheme. The ID is set to "
operator|+
name|recipe
argument_list|)
expr_stmt|;
block|}
name|Recipe
name|rcp
init|=
name|ruleStore
operator|.
name|getRecipe
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipe
argument_list|)
argument_list|)
decl_stmt|;
name|RuleAdapter
name|adapter
init|=
name|adapterManager
operator|.
name|getAdapter
argument_list|(
name|rcp
argument_list|,
name|classToLoad
argument_list|)
decl_stmt|;
name|Object
name|adaptedRecipe
init|=
name|adapter
operator|.
name|adaptTo
argument_list|(
name|rcp
argument_list|,
name|classToLoad
argument_list|)
decl_stmt|;
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
try|try
block|{
name|jsonObject
operator|.
name|put
argument_list|(
literal|"recipe"
argument_list|,
name|rcp
operator|.
name|getRecipeID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jsonObject
operator|.
name|put
argument_list|(
literal|"adaptedTo"
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|jsonObject
operator|.
name|put
argument_list|(
literal|"result"
argument_list|,
name|adaptedRecipe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|jsonObject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuleAtomCallExeption
name|e
parameter_list|)
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedTypeForExportException
name|e
parameter_list|)
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * It returns the list of available {@link RuleAdapter} instances.      *       * @param headers      *            {@link HttpHeaders}      * @return<ul>      *<li>A JSON array containing available adapters.<br/>      *         Each element of the array is an object composed by the following fields:      *<ul>      *<li>adapter: the canonical name of the adapter class;</li>      *<li>adapter: the canonical name of the instances' class that the adapter provide as output.</li>      *</ul>      *</li>      *<li>404: No adapter exists</li>      *</ul>      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"/adapters"
argument_list|)
specifier|public
name|Response
name|listAdaptersService
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|responseBuilder
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|RuleAdapter
argument_list|>
name|adapters
init|=
name|getListAdapters
argument_list|()
decl_stmt|;
if|if
condition|(
name|adapters
operator|!=
literal|null
operator|&&
operator|!
name|adapters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONArray
name|jsonArray
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|RuleAdapter
name|adapter
range|:
name|adapters
control|)
block|{
name|JSONObject
name|jsonAdapter
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
try|try
block|{
name|jsonAdapter
operator|.
name|put
argument_list|(
literal|"adapter"
argument_list|,
name|adapter
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|jsonAdapter
operator|.
name|put
argument_list|(
literal|"adaptTo"
argument_list|,
name|adapter
operator|.
name|getExportClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|jsonArray
operator|.
name|put
argument_list|(
name|jsonAdapter
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|jsonObject
operator|.
name|put
argument_list|(
literal|"adapters"
argument_list|,
name|jsonArray
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|responseBuilder
operator|=
name|Response
operator|.
name|ok
argument_list|(
name|jsonObject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responseBuilder
operator|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
expr_stmt|;
block|}
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|responseBuilder
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RuleAdapter
argument_list|>
name|getListAdapters
parameter_list|()
block|{
return|return
name|adapterManager
operator|.
name|listRuleAdapters
argument_list|()
return|;
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

