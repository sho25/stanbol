begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|format
operator|.
name|KRFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|ONManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|impl
operator|.
name|io
operator|.
name|ClerezzaOntologyStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|AddRecipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|AddRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|GetRecipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|GetRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|RemoveRecipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|RemoveRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
operator|.
name|RuleStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|AddImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividualAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  * @author andrea.nuzzolese  *   */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/rule"
argument_list|)
specifier|public
class|class
name|RestRule
extends|extends
name|BaseStanbolResource
block|{
specifier|protected
name|ONManager
name|onm
decl_stmt|;
specifier|protected
name|ClerezzaOntologyStorage
name|storage
decl_stmt|;
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|RuleStore
name|kresRuleStore
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
specifier|private
name|String
name|desc
decl_stmt|;
comment|/**      * To get the RuleStoreImpl where are stored the rules and the recipes      * 	 * @param servletContext 	 *            {To get the context where the REST service is running.}      */
specifier|public
name|RestRule
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|servletContext
parameter_list|)
block|{
name|this
operator|.
name|kresRuleStore
operator|=
operator|(
name|RuleStore
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|RuleStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|onm
operator|=
operator|(
name|ONManager
operator|)
name|servletContext
operator|.
name|getAttribute
argument_list|(
name|ONManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//		this.storage = (OntologyStorage) servletContext
comment|//				.getAttribute(OntologyStorage.class.getName());
comment|// Contingency code for missing components follows.
comment|/* 		 * FIXME! The following code is required only for the tests. This should 		 * be removed and the test should work without this code. 		 */
if|if
condition|(
name|onm
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No KReSONManager in servlet context. Instantiating manually..."
argument_list|)
expr_stmt|;
name|onm
operator|=
operator|new
name|ONManagerImpl
argument_list|(
operator|new
name|TcManager
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storage
operator|=
name|onm
operator|.
name|getOntologyStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No OntologyStorage in servlet context. Instantiating manually..."
argument_list|)
expr_stmt|;
name|storage
operator|=
operator|new
name|ClerezzaOntologyStorage
argument_list|(
operator|new
name|TcManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kresRuleStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No KReSRuleStore with stored rules and recipes found in servlet context. Instantiating manually with default values..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|kresRuleStore
operator|=
operator|new
name|RuleStoreImpl
argument_list|(
name|onm
argument_list|,
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"PATH TO OWL FILE LOADED: "
operator|+
name|kresRuleStore
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Get a rule from the rule base (that is the ontology that contains the 	 * rules and the recipe). curl -v -X GET 	 * http://localhost:8080/kres/rule/http 	 * ://kres.iks-project.eu/ontology/meta/rmi.owl#ProvaParentRule 	 *  	 * @param uri 	 *            {A string contains the IRI full name of the rule.}      * @return Return:<br/> 	 *         200 The rule is retrieved (import declarations point to KReS 	 *         Services)<br/>      *       404 The rule does not exists in the manager<br/>      *       500 Some error occurred      *      */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{uri:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|TURTLE
block|,
name|KRFormat
operator|.
name|OWL_XML
block|}
argument_list|)
specifier|public
name|Response
name|getRule
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"uri"
argument_list|)
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|GetRule
name|recipe
init|=
operator|new
name|GetRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|rule
init|=
name|recipe
operator|.
name|getAllRules
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|IRI
argument_list|>
name|keys
init|=
name|rule
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|OWLOntology
name|onto
init|=
name|kresRuleStore
operator|.
name|getOntology
argument_list|()
decl_stmt|;
name|OWLOntology
name|newmodel
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|onto
operator|.
name|getOntologyID
argument_list|()
argument_list|)
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|onto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importedonto
init|=
name|onto
operator|.
name|getDirectImports
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|auxfactory
init|=
name|onto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedonto
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importedonto
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|newmodel
argument_list|,
name|auxfactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|newmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLNamedIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|keys
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividualAxiom
argument_list|>
name|ax
init|=
name|onto
operator|.
name|getAxioms
argument_list|(
name|ind
argument_list|)
decl_stmt|;
name|newmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|addAxioms
argument_list|(
name|newmodel
argument_list|,
name|ax
argument_list|)
expr_stmt|;
block|}
comment|//            try {
comment|//						OWLManager.createOWLOntologyManager().saveOntology(
comment|//								newmodel,
comment|//								newmodel.getOWLOntologyManager()
comment|//										.getOntologyFormat(newmodel),
comment|//								System.out);
comment|//    		} catch (OWLOntologyStorageException e) {
comment|//    			// TODO Auto-generated catch block
comment|//    			e.printStackTrace();
comment|//    		}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|newmodel
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|rule
init|=
name|recipe
operator|.
name|getRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|OWLOntology
name|onto
init|=
name|kresRuleStore
operator|.
name|getOntology
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|onto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLNamedIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividualAxiom
argument_list|>
name|ax
init|=
name|onto
operator|.
name|getAxioms
argument_list|(
name|ind
argument_list|)
decl_stmt|;
name|OWLOntology
name|newmodel
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|(
name|onto
operator|.
name|getOntologyID
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLOntology
argument_list|>
name|importedonto
init|=
name|onto
operator|.
name|getDirectImports
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|additions
init|=
operator|new
name|LinkedList
argument_list|<
name|OWLOntologyChange
argument_list|>
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|auxfactory
init|=
name|onto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
while|while
condition|(
name|importedonto
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLOntology
name|auxonto
init|=
name|importedonto
operator|.
name|next
argument_list|()
decl_stmt|;
name|additions
operator|.
name|add
argument_list|(
operator|new
name|AddImport
argument_list|(
name|newmodel
argument_list|,
name|auxfactory
operator|.
name|getOWLImportsDeclaration
argument_list|(
name|auxonto
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|getOntologyDocumentIRI
argument_list|(
name|auxonto
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|additions
operator|.
name|isEmpty
argument_list|()
condition|)
name|newmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|applyChanges
argument_list|(
name|additions
argument_list|)
expr_stmt|;
name|newmodel
operator|.
name|getOWLOntologyManager
argument_list|()
operator|.
name|addAxioms
argument_list|(
name|newmodel
argument_list|,
name|ax
argument_list|)
expr_stmt|;
comment|//            try {
comment|//						OWLManager.createOWLOntologyManager().saveOntology(
comment|//								newmodel,
comment|//								newmodel.getOWLOntologyManager()
comment|//										.getOntologyFormat(newmodel),
comment|//								System.out);
comment|//    		} catch (OWLOntologyStorageException e) {
comment|//    			// TODO Auto-generated catch block
comment|//    			e.printStackTrace();
comment|//    		}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|newmodel
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Some error occurred
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/of-recipe/{uri:.+}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|value
operator|=
block|{
name|KRFormat
operator|.
name|RDF_XML
block|,
name|KRFormat
operator|.
name|RDF_JSON
block|}
argument_list|)
specifier|public
name|Response
name|getRulesOfRecipe
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"uri"
argument_list|)
name|String
name|recipeURI
parameter_list|)
block|{
name|GetRule
name|kReSGetRule
init|=
operator|new
name|GetRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|String
name|recipeURIEnc
decl_stmt|;
try|try
block|{
name|recipeURIEnc
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/rmi_config.owl#MyRecipeA"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RECIPE : "
operator|+
name|recipeURIEnc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RECIPE IRI : "
operator|+
name|IRI
operator|.
name|create
argument_list|(
name|recipeURI
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OWLOntology
name|ontology
init|=
name|kReSGetRule
operator|.
name|getAllRulesOfARecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipeURI
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|ontology
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** 	 * To add a rule to a recipe at the end of the sequence. curl -v -X POST -F 	 * "recipe=http://kres.iks-project.eu/ontology/meta/rmi.owl%23ProvaParentRecipe" 	 * -F "rule=http://kres.iks-project.eu/ontology/meta/rmi.owl%23ProvaRuleNEW" 	 * -F "kres-syntax=body -> head" -F "description=prova di aggiunta regola" 	 * http://localhost:8080/kres/rule 	 *  	 * @param recipe 	 *            {A string contains the IRI of the recipe where to add the 	 *            rule} 	 * @param rule 	 *            {A string contains the IRI of the rule to be added at the 	 *            recipe} 	 * @param kres_syntax 	 *            {A string contains the body and the head of the kres rule. If 	 *            not specified the rule is search in the Ontology otherwise is 	 *            added as new.} 	 * @param description 	 *            {A string contains a description of the rule}      * @return Return:<br/>      *      200 The rule has been added<br/>      *      204 The rule has not been added<br/>      *      400 The rule and recipe are not specified<br/>      *      404 Recipe or rule not found<br/>      *      409 The rule has not been added<br/>      *      500 Some error occurred      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
specifier|public
name|Response
name|addRuleToRecipe
parameter_list|(
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"rule"
argument_list|)
name|String
name|rule
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"kres-syntax"
argument_list|)
name|String
name|kres_syntax
parameter_list|,
annotation|@
name|FormParam
argument_list|(
name|value
operator|=
literal|"description"
argument_list|)
name|String
name|description
parameter_list|)
block|{
comment|//        System.err.println("recipe "+recipe);
comment|//        System.err.println("rule " + rule);
comment|//        System.err.println("kres-syntax "+kres_syntax);
comment|//        System.err.println("description "+description);
comment|//
comment|//        return Response.ok().build();
try|try
block|{
if|if
condition|(
operator|(
name|recipe
operator|==
literal|null
operator|)
operator|&&
operator|(
name|rule
operator|==
literal|null
operator|)
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|recipe
operator|=
name|recipe
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|rule
operator|=
name|rule
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//The rule is already inside the rule store
if|if
condition|(
operator|(
name|kres_syntax
operator|==
literal|null
operator|)
condition|)
block|{
comment|//Get the rule
name|GetRule
name|inrule
init|=
operator|new
name|GetRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|=
name|inrule
operator|.
name|getRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//Get the recipe
name|GetRecipe
name|getrecipe
init|=
operator|new
name|GetRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|=
name|getrecipe
operator|.
name|getRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|desc
operator|=
name|getrecipe
operator|.
name|getDescription
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
index|[]
name|sequence
init|=
name|map
operator|.
name|get
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|ruleseq
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sequence
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|String
name|seq
range|:
name|sequence
control|)
name|ruleseq
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|seq
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add the new rule to the end
name|ruleseq
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
comment|//Remove the old recipe
name|RemoveRecipe
name|remove
init|=
operator|new
name|RemoveRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
name|remove
operator|.
name|removeRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
operator|.
name|build
argument_list|()
return|;
comment|//Add the recipe with the new rule
name|AddRecipe
name|newadd
init|=
operator|new
name|AddRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|ok
operator|=
name|newadd
operator|.
name|addRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|,
name|ruleseq
argument_list|,
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|kresRuleStore
operator|.
name|saveOntology
argument_list|()
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|//The rule is added to the store and to the recipe
if|if
condition|(
operator|(
name|kres_syntax
operator|!=
literal|null
operator|)
operator|&
operator|(
name|description
operator|!=
literal|null
operator|)
condition|)
block|{
comment|//Get the rule
name|AddRule
name|inrule
init|=
operator|new
name|AddRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
name|inrule
operator|.
name|addRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|,
name|kres_syntax
argument_list|,
name|description
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"PROBLEM TO ADD: "
operator|+
name|rule
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//Get the recipe
name|GetRecipe
name|getrecipe
init|=
operator|new
name|GetRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|=
name|getrecipe
operator|.
name|getRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RECIPE FOR RULE: "
operator|+
name|recipe
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|desc
operator|=
name|getrecipe
operator|.
name|getDescription
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
index|[]
name|sequence
init|=
name|map
operator|.
name|get
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|IRI
argument_list|>
name|ruleseq
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sequence
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|String
name|seq
range|:
name|sequence
control|)
name|ruleseq
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|seq
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add the new rule to the end
name|ruleseq
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
comment|//Remove the old recipe
name|RemoveRecipe
name|remove
init|=
operator|new
name|RemoveRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|ok
operator|=
name|remove
operator|.
name|removeRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR TO REMOVE OLD RECIPE: "
operator|+
name|recipe
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//Add the recipe with the new rule
name|AddRecipe
name|newadd
init|=
operator|new
name|AddRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|ok
operator|=
name|newadd
operator|.
name|addRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|,
name|ruleseq
argument_list|,
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|kresRuleStore
operator|.
name|saveOntology
argument_list|()
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * To delete a rule from a recipe or from the ontology. If the recipe is not 	 * specified the rule is deleted from the ontology. curl -v -X DELETE -G \ 	 * -d recipe= 	 * "http://kres.iks-project.eu/ontology/meta/rmi.owl#ProvaParentRecipe" \ -d 	 * rule 	 * ="http://kres.iks-project.eu/ontology/meta/rmi.owl#ProvaParentNewRule" \      * http://localhost:port/kres/rule     *      * @Param rule {A string contains an IRI of the rule to be removed} 	 * @param recipe 	 *            {A string contains an IRI of the recipe where remove the rule}      * @return Return:<br/>      *      200 The rule has been deleted<br/>      *      204 The rule has not been deleted<br/>      *      404 Recipe or rule not found<br/>      *      409 The recipe has not been deleted<br/>      *      500 Some error occurred      */
annotation|@
name|DELETE
comment|//@Consumes(MediaType.TEXT_PLAIN)
annotation|@
name|Produces
argument_list|(
name|KRFormat
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|removeRule
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"rule"
argument_list|)
name|String
name|rule
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|value
operator|=
literal|"recipe"
argument_list|)
name|String
name|recipe
parameter_list|)
block|{
name|boolean
name|ok
decl_stmt|;
try|try
block|{
comment|//Delete from the recipe
if|if
condition|(
operator|(
name|recipe
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rule
operator|!=
literal|null
operator|)
condition|)
block|{
name|recipe
operator|=
name|recipe
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|rule
operator|=
name|rule
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//Get the rule
name|GetRule
name|getrule
init|=
operator|new
name|GetRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|=
name|getrule
operator|.
name|getRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//Get the recipe
name|GetRecipe
name|getrecipe
init|=
operator|new
name|GetRecipe
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|=
name|getrecipe
operator|.
name|getRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|desc
operator|=
name|getrecipe
operator|.
name|getDescription
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|RemoveRule
name|remove
init|=
operator|new
name|RemoveRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|ok
operator|=
name|remove
operator|.
name|removeRuleFromRecipe
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|,
name|IRI
operator|.
name|create
argument_list|(
name|recipe
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|kresRuleStore
operator|.
name|saveOntology
argument_list|()
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|//Delete from the ontology
if|if
condition|(
operator|(
name|recipe
operator|==
literal|null
operator|)
operator|&&
operator|(
name|rule
operator|!=
literal|null
operator|)
condition|)
block|{
name|rule
operator|=
name|rule
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|//Get the rule
name|GetRule
name|getrule
init|=
operator|new
name|GetRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|this
operator|.
name|map
operator|=
name|getrule
operator|.
name|getRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|//Remove the old recipe
name|RemoveRule
name|remove
init|=
operator|new
name|RemoveRule
argument_list|(
name|kresRuleStore
argument_list|)
decl_stmt|;
name|ok
operator|=
name|remove
operator|.
name|removeRule
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|kresRuleStore
operator|.
name|saveOntology
argument_list|()
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NO_CONTENT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

