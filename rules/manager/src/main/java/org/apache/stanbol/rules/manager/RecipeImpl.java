begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|commons
operator|.
name|rdf
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRuleInRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_comment
comment|/**  * The RecipeImpl is a concrete implementation of the Recipe interface. A Recipe is a collection identified by  * an URI of rules. Each rules of the recipe is also identified by an URI. Rules are expressed both in SWRL  * and in KReS rules syntax.  *   * @author anuzzolese  *   */
end_comment

begin_class
specifier|public
class|class
name|RecipeImpl
implements|implements
name|Recipe
block|{
specifier|private
name|IRI
name|recipeID
decl_stmt|;
specifier|private
name|String
name|recipeDescription
decl_stmt|;
specifier|private
name|RuleList
name|ruleList
init|=
operator|new
name|RuleList
argument_list|()
decl_stmt|;
comment|/**      * Create a new {@code RecipeImpl} from a set of rule expressed in KReS rule syntax.      *       * @param recipeID      * @param recipeDescription      * @param ruleList      */
specifier|public
name|RecipeImpl
parameter_list|(
name|IRI
name|recipeID
parameter_list|,
name|String
name|recipeDescription
parameter_list|,
name|RuleList
name|ruleList
parameter_list|)
block|{
name|this
operator|.
name|recipeID
operator|=
name|recipeID
expr_stmt|;
name|this
operator|.
name|recipeDescription
operator|=
name|recipeDescription
expr_stmt|;
if|if
condition|(
name|ruleList
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|ruleList
operator|.
name|addAll
argument_list|(
name|ruleList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RuleList
name|getRuleList
parameter_list|()
block|{
return|return
name|ruleList
return|;
block|}
specifier|public
name|IRI
name|getRecipeID
parameter_list|()
block|{
return|return
name|recipeID
return|;
block|}
specifier|public
name|String
name|getRecipeDescription
parameter_list|()
block|{
return|return
name|recipeDescription
return|;
block|}
specifier|public
name|Model
name|getRecipeAsRDFModel
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Rule
name|getRule
parameter_list|(
name|String
name|ruleName
parameter_list|)
throws|throws
name|NoSuchRuleInRecipeException
block|{
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|getRuleName
argument_list|()
operator|.
name|equals
argument_list|(
name|ruleName
argument_list|)
condition|)
block|{
return|return
name|rule
return|;
block|}
block|}
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"No rule named "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|ruleName
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|" exists in recipe "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|this
operator|.
name|getRecipeID
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchRuleInRecipeException
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|boolean
name|firstLoop
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
if|if
condition|(
operator|!
name|firstLoop
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" . "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstLoop
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|rule
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRule
parameter_list|(
name|Rule
name|rule
parameter_list|)
block|{
name|ruleList
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"The recipe contains the following rules:"
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|rule
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRule
parameter_list|(
name|Rule
name|rule
parameter_list|)
block|{
name|ruleList
operator|.
name|remove
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Rule
name|getRule
parameter_list|(
name|IRI
name|ruleID
parameter_list|)
throws|throws
name|NoSuchRuleInRecipeException
block|{
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
if|if
condition|(
name|rule
operator|.
name|getRuleID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ruleID
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|rule
return|;
block|}
block|}
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"No rule with ID "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|ruleID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|" exists in recipe "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|this
operator|.
name|getRecipeID
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchRuleInRecipeException
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IRI
argument_list|>
name|listRuleIDs
parameter_list|()
block|{
name|List
argument_list|<
name|IRI
argument_list|>
name|ruleIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
name|ruleIDs
operator|.
name|add
argument_list|(
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ruleIDs
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRuleNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ruleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
name|ruleNames
operator|.
name|add
argument_list|(
name|rule
operator|.
name|getRuleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ruleNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Recipe
condition|)
block|{
name|Recipe
name|recipe
init|=
operator|(
name|Recipe
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getRecipeID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|recipe
operator|.
name|getRecipeDescription
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getRecipeDescription
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|recipe
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

