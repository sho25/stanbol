begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. RuleParserImplTokenManager.java */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|AtomList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|KB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|RuleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|ClassAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|ComparisonAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|ConcatAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|CreateLabelAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|DatavaluedPropertyAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|DifferentAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|DivisionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|EndsWithAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|ExpressionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|GreaterEqualThanAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|GreaterThanAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|IObjectAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|IndividualPropertyAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|IsBlankAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|LengthAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|LessEqualThanAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|LessThanAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|LetAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|LocalNameAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|LowerCaseAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|MultiplicationAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NamespaceAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NewIRIAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NewLiteralAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NotAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NumberAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NumericFunctionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|NumericVariableAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|PropStringAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|ResourceAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|RuleBlankNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|SameAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StartsWithAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StrAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StringAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StringFunctionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StringVariableAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|SubstringAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|SubtractionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|SumAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|TypedLiteralAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|UnionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|UpperCaseAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|VariableAtom
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/** Token Manager. */
end_comment

begin_class
specifier|public
class|class
name|RuleParserImplTokenManager
implements|implements
name|RuleParserImplConstants
block|{
comment|/** Debug output. */
specifier|public
name|java
operator|.
name|io
operator|.
name|PrintStream
name|debugStream
init|=
name|System
operator|.
name|out
decl_stmt|;
comment|/** Set debug output. */
specifier|public
name|void
name|setDebugStream
parameter_list|(
name|java
operator|.
name|io
operator|.
name|PrintStream
name|ds
parameter_list|)
block|{
name|debugStream
operator|=
name|ds
expr_stmt|;
block|}
specifier|private
specifier|final
name|int
name|jjStopStringLiteralDfa_0
parameter_list|(
name|int
name|pos
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x3dffffffe100L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1000000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|8
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
case|case
literal|1
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1dfffff66000L
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|jjmatchedPos
operator|!=
literal|1
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000098000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
case|case
literal|2
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x3cc8af706000L
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|jjmatchedPos
operator|!=
literal|2
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x13750860000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
case|case
literal|3
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2cc1aff04000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100800002000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
return|return
operator|-
literal|1
return|;
case|case
literal|4
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40100000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x28c0aff04000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|4
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|5
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0xa0500000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x28c00fa04000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|5
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|6
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8c00fa04000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|6
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|7
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8c007a04000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|7
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|8
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0xc003804000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80004200000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|8
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|9
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4200000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000000000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|52
expr_stmt|;
name|jjmatchedPos
operator|=
literal|9
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|private
specifier|final
name|int
name|jjStartNfa_0
parameter_list|(
name|int
name|pos
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
name|jjStopStringLiteralDfa_0
argument_list|(
name|pos
argument_list|,
name|active0
argument_list|)
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjStopAtPos
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|kind
parameter_list|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|pos
expr_stmt|;
return|return
name|pos
operator|+
literal|1
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa0_0
parameter_list|()
block|{
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|34
case|:
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|0
argument_list|,
literal|48
argument_list|,
literal|8
argument_list|)
return|;
case|case
literal|40
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|46
argument_list|)
return|;
case|case
literal|41
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|47
argument_list|)
return|;
case|case
literal|44
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|12
argument_list|)
return|;
case|case
literal|45
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x100L
argument_list|)
return|;
case|case
literal|46
case|:
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|0
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|47
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x20L
argument_list|)
return|;
case|case
literal|58
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|9
argument_list|)
return|;
case|case
literal|61
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
return|;
case|case
literal|91
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|49
argument_list|)
return|;
case|case
literal|93
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
return|;
case|case
literal|94
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|41
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x80020000000L
argument_list|)
return|;
case|case
literal|100
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x1000004000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x8000000L
argument_list|)
return|;
case|case
literal|103
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x50000L
argument_list|)
return|;
case|case
literal|104
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x40000000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x200000080000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x8012428000L
argument_list|)
return|;
case|case
literal|109
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x800000000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x6100300000L
argument_list|)
return|;
case|case
literal|112
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x100000000000L
argument_list|)
return|;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x10604802000L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x40001000000L
argument_list|)
return|;
case|case
literal|118
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x80000000L
argument_list|)
return|;
default|default:
return|return
name|jjMoveNfa_0
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa1_0
parameter_list|(
name|long
name|active0
parameter_list|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|0
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|42
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStopAtPos
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
return|;
break|break;
case|case
literal|62
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStopAtPos
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
return|;
break|break;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x40c0002000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x10760000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x1000004000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x40008000000L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0xa122000000L
argument_list|)
return|;
case|case
literal|112
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x1000000L
argument_list|)
return|;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x180000000000L
argument_list|)
return|;
case|case
literal|115
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|19
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x200000000000L
argument_list|)
return|;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|1
argument_list|,
literal|15
argument_list|,
literal|1
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x10004000000L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0xe00800000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|0
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa2_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|0
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|1
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|66
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x200000000000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000L
argument_list|)
return|;
case|case
literal|98
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x400000000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|34
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x800000L
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000000L
argument_list|)
return|;
case|case
literal|100
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000000L
argument_list|)
return|;
case|case
literal|102
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x4000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x40000000000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x880000000L
argument_list|)
return|;
case|case
literal|109
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|33
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x4000002000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x20400000L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x100000000000L
argument_list|)
return|;
case|case
literal|112
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x1000000L
argument_list|)
return|;
case|case
literal|113
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|17
argument_list|,
literal|1
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|114
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|40
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|115
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|28
argument_list|,
literal|1
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2000000000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|37
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x100000000L
argument_list|)
return|;
case|case
literal|118
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|36
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|119
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x2300000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|1
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa3_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|1
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|2
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|73
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|76
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x88000000000L
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x20000000L
argument_list|)
return|;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|3
argument_list|,
literal|13
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x4103000000L
argument_list|)
return|;
case|case
literal|102
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x4000L
argument_list|)
return|;
case|case
literal|103
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x400000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x200000000000L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x40000000000L
argument_list|)
return|;
case|case
literal|112
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|3
argument_list|,
literal|44
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000L
argument_list|)
return|;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x8800000L
argument_list|)
return|;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|3
argument_list|,
literal|35
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|2
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa4_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|2
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|3
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|82
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|87
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x200020000000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x80004000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000000L
argument_list|)
return|;
case|case
literal|110
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|4
argument_list|,
literal|42
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x3000000L
argument_list|)
return|;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000000L
argument_list|)
return|;
case|case
literal|116
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x80004c00000L
argument_list|)
return|;
case|case
literal|120
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|4
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|3
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa5_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|3
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|4
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|5
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|67
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x3000000L
argument_list|)
return|;
case|case
literal|73
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000000L
argument_list|)
return|;
case|case
literal|104
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x400000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|22
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x208000000000L
argument_list|)
return|;
case|case
literal|112
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000000L
argument_list|)
return|;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x804000L
argument_list|)
return|;
case|case
literal|115
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|31
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000L
argument_list|)
return|;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|29
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|4
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa6_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|4
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|5
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|6
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|76
case|:
return|return
name|jjMoveStringLiteralDfa7_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000000L
argument_list|)
return|;
case|case
literal|87
case|:
return|return
name|jjMoveStringLiteralDfa7_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa7_0
argument_list|(
name|active0
argument_list|,
literal|0xc003000000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa7_0
argument_list|(
name|active0
argument_list|,
literal|0x204000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa7_0
argument_list|(
name|active0
argument_list|,
literal|0x800000L
argument_list|)
return|;
case|case
literal|107
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|6
argument_list|,
literal|45
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|116
case|:
return|return
name|jjMoveStringLiteralDfa7_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|5
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa7_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|5
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|6
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|7
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000000L
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000000L
argument_list|)
return|;
case|case
literal|104
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|7
argument_list|,
literal|27
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000L
argument_list|)
return|;
case|case
literal|109
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x8000000000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x804000L
argument_list|)
return|;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa8_0
argument_list|(
name|active0
argument_list|,
literal|0x3000000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|6
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa8_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|6
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|7
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|8
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa9_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|98
case|:
return|return
name|jjMoveStringLiteralDfa9_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000000L
argument_list|)
return|;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|8
argument_list|,
literal|24
argument_list|,
literal|1
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|8
argument_list|,
literal|25
argument_list|,
literal|1
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|8
argument_list|,
literal|38
argument_list|,
literal|1
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|8
argument_list|,
literal|39
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|103
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|8
argument_list|,
literal|23
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|8
argument_list|,
literal|14
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa9_0
argument_list|(
name|active0
argument_list|,
literal|0x4000000L
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|7
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa9_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|7
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|8
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|9
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa10_0
argument_list|(
name|active0
argument_list|,
literal|0x80000000000L
argument_list|)
return|;
case|case
literal|104
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|9
argument_list|,
literal|26
argument_list|,
literal|1
argument_list|)
return|;
break|break;
case|case
literal|108
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|9
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|8
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa10_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|8
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|9
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|10
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|108
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000000000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|10
argument_list|,
literal|43
argument_list|,
literal|1
argument_list|)
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|9
argument_list|,
name|active0
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjStartNfaWithStates_0
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|kind
parameter_list|,
name|int
name|state
parameter_list|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|pos
expr_stmt|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|pos
operator|+
literal|1
return|;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
name|state
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|private
name|int
name|jjMoveNfa_0
parameter_list|(
name|int
name|startState
parameter_list|,
name|int
name|curPos
parameter_list|)
block|{
name|int
name|startsAt
init|=
literal|0
decl_stmt|;
name|jjnewStateCnt
operator|=
literal|13
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|jjstateSet
index|[
literal|0
index|]
operator|=
name|startState
expr_stmt|;
name|int
name|kind
init|=
literal|0x7fffffff
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|++
name|jjround
operator|==
literal|0x7fffffff
condition|)
name|ReInitRounds
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|<
literal|64
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
name|curChar
decl_stmt|;
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|2
case|:
if|if
condition|(
operator|(
literal|0x3ff600000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|52
condition|)
name|kind
operator|=
literal|52
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|34
condition|)
name|jjCheckNAdd
argument_list|(
literal|8
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|60
condition|)
name|jjCheckNAdd
argument_list|(
literal|5
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|63
condition|)
name|jjCheckNAdd
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|51
condition|)
name|kind
operator|=
literal|51
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|0
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|51
condition|)
name|kind
operator|=
literal|51
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|(
literal|0x3ff600000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|52
condition|)
name|kind
operator|=
literal|52
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
operator|(
literal|0x3ff200000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|53
condition|)
name|kind
operator|=
literal|53
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|curChar
operator|==
literal|60
condition|)
name|jjCheckNAdd
argument_list|(
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
if|if
condition|(
operator|(
literal|0x7ffe30800000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
if|if
condition|(
name|curChar
operator|==
literal|62
condition|)
name|kind
operator|=
literal|54
expr_stmt|;
break|break;
case|case
literal|7
case|:
if|if
condition|(
name|curChar
operator|==
literal|34
condition|)
name|jjCheckNAdd
argument_list|(
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
if|if
condition|(
operator|(
literal|0x87ffe03b00000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
if|if
condition|(
name|curChar
operator|==
literal|34
operator|&&
name|kind
operator|>
literal|55
condition|)
name|kind
operator|=
literal|55
expr_stmt|;
break|break;
case|case
literal|10
case|:
if|if
condition|(
name|curChar
operator|==
literal|58
condition|)
name|jjCheckNAdd
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
if|if
condition|(
operator|(
literal|0x3ff600000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|56
condition|)
name|kind
operator|=
literal|56
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|<
literal|128
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|2
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|52
condition|)
name|kind
operator|=
literal|52
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|10
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|52
condition|)
name|kind
operator|=
literal|52
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|53
condition|)
name|kind
operator|=
literal|53
expr_stmt|;
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|3
expr_stmt|;
break|break;
case|case
literal|5
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
if|if
condition|(
operator|(
literal|0x7fffffe97fffffeL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|56
condition|)
name|kind
operator|=
literal|56
expr_stmt|;
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|11
expr_stmt|;
break|break;
case|case
literal|12
case|:
if|if
condition|(
name|curChar
operator|==
literal|95
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|10
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
else|else
block|{
name|int
name|i2
init|=
operator|(
name|curChar
operator|&
literal|0xff
operator|)
operator|>>
literal|6
decl_stmt|;
name|long
name|l2
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
default|default:
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
if|if
condition|(
name|kind
operator|!=
literal|0x7fffffff
condition|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|curPos
expr_stmt|;
name|kind
operator|=
literal|0x7fffffff
expr_stmt|;
block|}
operator|++
name|curPos
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|=
name|jjnewStateCnt
operator|)
operator|==
operator|(
name|startsAt
operator|=
literal|13
operator|-
operator|(
name|jjnewStateCnt
operator|=
name|startsAt
operator|)
operator|)
condition|)
return|return
name|curPos
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|curPos
return|;
block|}
block|}
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa0_1
parameter_list|()
block|{
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|42
case|:
return|return
name|jjMoveStringLiteralDfa1_1
argument_list|(
literal|0x40L
argument_list|)
return|;
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|private
name|int
name|jjMoveStringLiteralDfa1_1
parameter_list|(
name|long
name|active0
parameter_list|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|47
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStopAtPos
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
return|;
break|break;
default|default:
return|return
literal|2
return|;
block|}
return|return
literal|2
return|;
block|}
specifier|static
specifier|final
name|int
index|[]
name|jjnextStates
init|=
block|{
literal|5
block|,
literal|6
block|,
literal|8
block|,
literal|9
block|,}
decl_stmt|;
comment|/** Token literal values. */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|jjstrLiteralImages
init|=
block|{
literal|""
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"\55\76"
block|,
literal|"\72"
block|,
literal|"\75"
block|,
literal|"\56"
block|,
literal|"\54"
block|,
literal|"\163\141\155\145"
block|,
literal|"\144\151\146\146\145\162\145\156\164"
block|,
literal|"\154\164"
block|,
literal|"\147\164"
block|,
literal|"\154\145\161"
block|,
literal|"\147\145\161"
block|,
literal|"\151\163"
block|,
literal|"\156\145\167\111\122\111"
block|,
literal|"\156\145\167\114\151\164\145\162\141\154"
block|,
literal|"\154\145\156\147\164\150"
block|,
literal|"\163\165\142\163\164\162\151\156\147"
block|,
literal|"\165\160\160\145\162\103\141\163\145"
block|,
literal|"\154\157\167\145\162\103\141\163\145"
block|,
literal|"\163\164\141\162\164\163\127\151\164\150"
block|,
literal|"\145\156\144\163\127\151\164\150"
block|,
literal|"\154\145\164"
block|,
literal|"\143\157\156\143\141\164"
block|,
literal|"\150\141\163"
block|,
literal|"\166\141\154\165\145\163"
block|,
literal|"\156\157\164\145\170"
block|,
literal|"\163\165\155"
block|,
literal|"\163\165\142"
block|,
literal|"\155\165\154\164"
block|,
literal|"\144\151\166"
block|,
literal|"\156\157\164"
block|,
literal|"\156\141\155\145\163\160\141\143\145"
block|,
literal|"\154\157\143\141\154\156\141\155\145"
block|,
literal|"\163\164\162"
block|,
literal|"\136"
block|,
literal|"\165\156\151\157\156"
block|,
literal|"\143\162\145\141\164\145\114\141\142\145\154"
block|,
literal|"\160\162\157\160"
block|,
literal|"\151\163\102\154\141\156\153"
block|,
literal|"\50"
block|,
literal|"\51"
block|,
literal|"\42"
block|,
literal|"\133"
block|,
literal|"\135"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,}
decl_stmt|;
comment|/** Lexer state names. */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|lexStateNames
init|=
block|{
literal|"DEFAULT"
block|,
literal|"WithinComment"
block|,}
decl_stmt|;
comment|/** Lex State array. */
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|jjnewLexState
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoToken
init|=
block|{
literal|0x1ffffffffffff01L
block|,}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoSkip
init|=
block|{
literal|0x7eL
block|,}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoMore
init|=
block|{
literal|0x80L
block|,}
decl_stmt|;
specifier|protected
name|SimpleCharStream
name|input_stream
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|jjrounds
init|=
operator|new
name|int
index|[
literal|13
index|]
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|jjstateSet
init|=
operator|new
name|int
index|[
literal|26
index|]
decl_stmt|;
specifier|protected
name|char
name|curChar
decl_stmt|;
comment|/** Constructor. */
specifier|public
name|RuleParserImplTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
if|if
condition|(
name|SimpleCharStream
operator|.
name|staticFlag
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer."
argument_list|)
throw|;
name|input_stream
operator|=
name|stream
expr_stmt|;
block|}
comment|/** Constructor. */
specifier|public
name|RuleParserImplTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise parser. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
name|jjmatchedPos
operator|=
name|jjnewStateCnt
operator|=
literal|0
expr_stmt|;
name|curLexState
operator|=
name|defaultLexState
expr_stmt|;
name|input_stream
operator|=
name|stream
expr_stmt|;
name|ReInitRounds
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|ReInitRounds
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|jjround
operator|=
literal|0x80000001
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|13
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
name|jjrounds
index|[
name|i
index|]
operator|=
literal|0x80000000
expr_stmt|;
block|}
comment|/** Reinitialise parser. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
comment|/** Switch to specified lex state. */
specifier|public
name|void
name|SwitchTo
parameter_list|(
name|int
name|lexState
parameter_list|)
block|{
if|if
condition|(
name|lexState
operator|>=
literal|2
operator|||
name|lexState
operator|<
literal|0
condition|)
throw|throw
operator|new
name|TokenMgrError
argument_list|(
literal|"Error: Ignoring invalid lexical state : "
operator|+
name|lexState
operator|+
literal|". State unchanged."
argument_list|,
name|TokenMgrError
operator|.
name|INVALID_LEXICAL_STATE
argument_list|)
throw|;
else|else
name|curLexState
operator|=
name|lexState
expr_stmt|;
block|}
specifier|protected
name|Token
name|jjFillToken
parameter_list|()
block|{
specifier|final
name|Token
name|t
decl_stmt|;
specifier|final
name|String
name|curTokenImage
decl_stmt|;
specifier|final
name|int
name|beginLine
decl_stmt|;
specifier|final
name|int
name|endLine
decl_stmt|;
specifier|final
name|int
name|beginColumn
decl_stmt|;
specifier|final
name|int
name|endColumn
decl_stmt|;
name|String
name|im
init|=
name|jjstrLiteralImages
index|[
name|jjmatchedKind
index|]
decl_stmt|;
name|curTokenImage
operator|=
operator|(
name|im
operator|==
literal|null
operator|)
condition|?
name|input_stream
operator|.
name|GetImage
argument_list|()
else|:
name|im
expr_stmt|;
name|beginLine
operator|=
name|input_stream
operator|.
name|getBeginLine
argument_list|()
expr_stmt|;
name|beginColumn
operator|=
name|input_stream
operator|.
name|getBeginColumn
argument_list|()
expr_stmt|;
name|endLine
operator|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
expr_stmt|;
name|endColumn
operator|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
expr_stmt|;
name|t
operator|=
name|Token
operator|.
name|newToken
argument_list|(
name|jjmatchedKind
argument_list|,
name|curTokenImage
argument_list|)
expr_stmt|;
name|t
operator|.
name|beginLine
operator|=
name|beginLine
expr_stmt|;
name|t
operator|.
name|endLine
operator|=
name|endLine
expr_stmt|;
name|t
operator|.
name|beginColumn
operator|=
name|beginColumn
expr_stmt|;
name|t
operator|.
name|endColumn
operator|=
name|endColumn
expr_stmt|;
return|return
name|t
return|;
block|}
name|int
name|curLexState
init|=
literal|0
decl_stmt|;
name|int
name|defaultLexState
init|=
literal|0
decl_stmt|;
name|int
name|jjnewStateCnt
decl_stmt|;
name|int
name|jjround
decl_stmt|;
name|int
name|jjmatchedPos
decl_stmt|;
name|int
name|jjmatchedKind
decl_stmt|;
comment|/** Get the next Token. */
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
name|Token
name|matchedToken
decl_stmt|;
name|int
name|curPos
init|=
literal|0
decl_stmt|;
name|EOFLoop
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|BeginToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjmatchedKind
operator|=
literal|0
expr_stmt|;
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
switch|switch
condition|(
name|curLexState
condition|)
block|{
case|case
literal|0
case|:
try|try
block|{
name|input_stream
operator|.
name|backup
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|curChar
operator|<=
literal|32
operator|&&
operator|(
literal|0x100002600L
operator|&
operator|(
literal|1L
operator|<<
name|curChar
operator|)
operator|)
operator|!=
literal|0L
condition|)
name|curChar
operator|=
name|input_stream
operator|.
name|BeginToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{
continue|continue
name|EOFLoop
continue|;
block|}
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_0
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_1
argument_list|()
expr_stmt|;
if|if
condition|(
name|jjmatchedPos
operator|==
literal|0
operator|&&
name|jjmatchedKind
operator|>
literal|7
condition|)
block|{
name|jjmatchedKind
operator|=
literal|7
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|jjmatchedKind
operator|!=
literal|0x7fffffff
condition|)
block|{
if|if
condition|(
name|jjmatchedPos
operator|+
literal|1
operator|<
name|curPos
condition|)
name|input_stream
operator|.
name|backup
argument_list|(
name|curPos
operator|-
name|jjmatchedPos
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|jjtoToken
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
operator|!=
operator|-
literal|1
condition|)
name|curLexState
operator|=
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|jjtoSkip
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
operator|!=
operator|-
literal|1
condition|)
name|curLexState
operator|=
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
expr_stmt|;
continue|continue
name|EOFLoop
continue|;
block|}
if|if
condition|(
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
operator|!=
operator|-
literal|1
condition|)
name|curLexState
operator|=
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
expr_stmt|;
name|curPos
operator|=
literal|0
expr_stmt|;
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{}
block|}
name|int
name|error_line
init|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
decl_stmt|;
name|int
name|error_column
init|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
decl_stmt|;
name|String
name|error_after
init|=
literal|null
decl_stmt|;
name|boolean
name|EOFSeen
init|=
literal|false
decl_stmt|;
try|try
block|{
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{
name|EOFSeen
operator|=
literal|true
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|==
literal|'\n'
operator|||
name|curChar
operator|==
literal|'\r'
condition|)
block|{
name|error_line
operator|++
expr_stmt|;
name|error_column
operator|=
literal|0
expr_stmt|;
block|}
else|else
name|error_column
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|EOFSeen
condition|)
block|{
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|TokenMgrError
argument_list|(
name|EOFSeen
argument_list|,
name|curLexState
argument_list|,
name|error_line
argument_list|,
name|error_column
argument_list|,
name|error_after
argument_list|,
name|curChar
argument_list|,
name|TokenMgrError
operator|.
name|LEXICAL_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|jjCheckNAdd
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|jjrounds
index|[
name|state
index|]
operator|!=
name|jjround
condition|)
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|state
expr_stmt|;
name|jjrounds
index|[
name|state
index|]
operator|=
name|jjround
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|jjAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|jjnextStates
index|[
name|start
index|]
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
specifier|private
name|void
name|jjCheckNAddTwoStates
parameter_list|(
name|int
name|state1
parameter_list|,
name|int
name|state2
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|state1
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|state2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

