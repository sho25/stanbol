begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|arqextention
package|;
end_package

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|expr
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|sparql
operator|.
name|function
operator|.
name|FunctionBase1
import|;
end_import

begin_class
specifier|public
class|class
name|CreateStandardLabel
extends|extends
name|FunctionBase1
block|{
specifier|public
name|CreateStandardLabel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeValue
name|exec
parameter_list|(
name|NodeValue
name|nodeValue
parameter_list|)
block|{
name|String
name|value
init|=
name|nodeValue
operator|.
name|getString
argument_list|()
decl_stmt|;
name|String
index|[]
name|split
init|=
name|value
operator|.
name|split
argument_list|(
literal|"(?=\\p{Upper})"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|split
index|[
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|i
operator|+=
literal|1
expr_stmt|;
block|}
name|String
name|newString
init|=
name|split
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|split
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|split
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|i
operator|+=
literal|1
init|;
name|i
operator|<
name|split
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newString
operator|+=
literal|" "
operator|+
name|split
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|split
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|split
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|NodeValue
operator|.
name|makeString
argument_list|(
name|newString
argument_list|)
return|;
block|}
block|}
end_class

end_unit

