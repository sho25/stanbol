begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|EntityAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|PlainLiteralImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|SolutionMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|ontologies
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|utils
operator|.
name|UnionMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|ontonet
operator|.
name|api
operator|.
name|ONManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|AlreadyExistingRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|NoSuchRuleInRecipeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RecipeEliminationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Symbols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RecipeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides an implementation of the {@link RuleStore} based on Clerezza.<br/>  * Recipe are managed as {@link TripleCollection} graphs.<br/>  * The vocabulary used in these graphs is provided by {@link Symbols}.  *   * @author elvio  * @author anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|RuleStore
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClerezzaRuleStore
implements|implements
name|RuleStore
block|{
annotation|@
name|Reference
name|TcManager
name|tcManager
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|_RECIPE_INDEX_LOCATION_DEFAULT
init|=
literal|"http://incubator.apache.org/stanbol/rules/recipe_index"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|RuleStore
operator|.
name|RECIPE_INDEX_LOCATION
argument_list|,
name|value
operator|=
name|_RECIPE_INDEX_LOCATION_DEFAULT
argument_list|)
specifier|private
name|String
name|recipeIndexLocation
decl_stmt|;
specifier|private
name|List
argument_list|<
name|UriRef
argument_list|>
name|recipes
decl_stmt|;
comment|/**      * This construct returns RuleStoreImpl object with inside an ontology where to store the rules.      *       * This default constructor is<b>only</b> intended to be used by the OSGI environment with Service      * Component Runtime support.      *<p>      * DO NOT USE to manually create instances - the RuleStoreImpl instances do need to be configured! YOU      * NEED TO USE {@link #RuleStoreImpl(ONManager, Dictionary)} or its overloads, to parse the configuration      * and then initialise the rule store if running outside a OSGI environment.      */
specifier|public
name|ClerezzaRuleStore
parameter_list|()
block|{}
comment|/**      * To be invoked by non-OSGi environments.<br/>      * This construct returns an ontology where to store the rules.      *       * @param owl      *            {OWLOntology object contains rules and recipe}      */
specifier|public
name|ClerezzaRuleStore
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|,
name|TcManager
name|tcManager
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcManager
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
comment|// activator has a branch for existing owlfile
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to access servlet context."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ClerezzaRuleStore
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|recipeIndexLocation
operator|==
literal|null
operator|||
name|recipeIndexLocation
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|RECIPE_INDEX_LOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|recipeIndexLocation
operator|=
name|value
expr_stmt|;
else|else
name|recipeIndexLocation
operator|=
name|_RECIPE_INDEX_LOCATION_DEFAULT
expr_stmt|;
block|}
name|recipes
operator|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|()
expr_stmt|;
name|TripleCollection
name|tripleCollection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tripleCollection
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeIndexLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
name|tripleCollection
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeIndexLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Triple
name|triple
range|:
name|tripleCollection
control|)
block|{
name|UriRef
name|recipeID
init|=
operator|(
name|UriRef
operator|)
name|triple
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|recipes
operator|.
name|add
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Rule Store activated. It contains "
operator|+
name|recipes
operator|.
name|size
argument_list|()
operator|+
literal|" recipes."
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*      * Moved form AddRecipe class. The AddRecipe should not be used anymore.      */
annotation|@
name|Override
specifier|public
name|Recipe
name|createRecipe
parameter_list|(
name|UriRef
name|recipeID
parameter_list|,
name|String
name|recipeDescription
parameter_list|)
throws|throws
name|AlreadyExistingRecipeException
block|{
name|TripleCollection
name|tripleCollection
decl_stmt|;
try|try
block|{
comment|// create the MGraph in the TcManager
name|tripleCollection
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityAlreadyExistsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AlreadyExistingRecipeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Triple
name|descriptionTriple
init|=
operator|new
name|TripleImpl
argument_list|(
name|recipeID
argument_list|,
name|Symbols
operator|.
name|description
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|recipeDescription
argument_list|)
argument_list|)
decl_stmt|;
name|tripleCollection
operator|.
name|add
argument_list|(
name|descriptionTriple
argument_list|)
expr_stmt|;
name|Triple
name|recipeTriple
init|=
operator|new
name|TripleImpl
argument_list|(
name|recipeID
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|Symbols
operator|.
name|Recipe
argument_list|)
decl_stmt|;
name|TripleCollection
name|recipeIndexTripleCollection
init|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeIndexLocation
argument_list|)
argument_list|)
decl_stmt|;
name|recipeIndexTripleCollection
operator|.
name|add
argument_list|(
name|recipeTriple
argument_list|)
expr_stmt|;
name|recipeIndexTripleCollection
operator|.
name|add
argument_list|(
name|descriptionTriple
argument_list|)
expr_stmt|;
comment|// add the recpe ID to the list of known recipes
name|recipes
operator|.
name|add
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
return|return
operator|new
name|RecipeImpl
argument_list|(
name|recipeID
argument_list|,
name|recipeDescription
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      *       * @param recipe      *            the recipe      * @param RuleRule      *            the rule in Rule syntax      *       * @return the recipe we the new rule.      */
annotation|@
name|Override
specifier|public
name|Recipe
name|addRuleToRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|Rule
name|rule
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding rule to recipe "
operator|+
name|recipe
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Rule : "
operator|+
name|rule
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|UriRef
name|recipeID
init|=
name|recipe
operator|.
name|getRecipeID
argument_list|()
decl_stmt|;
name|TripleCollection
name|tripleCollection
init|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
comment|// add the rule object to the graph representation of the recipe by the TcManager
name|tripleCollection
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|recipeID
argument_list|,
name|Symbols
operator|.
name|hasRule
argument_list|,
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * extract the rule body and head and add them to the rule object existing in the graph representation          * of the recipe.          */
name|String
name|stanbolSyntax
init|=
name|rule
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|indexOfLPar
init|=
name|stanbolSyntax
operator|.
name|indexOf
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|int
name|indexOfRPar
init|=
name|stanbolSyntax
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|)
decl_stmt|;
name|stanbolSyntax
operator|=
name|stanbolSyntax
operator|.
name|substring
argument_list|(
name|indexOfLPar
operator|+
literal|1
argument_list|,
name|indexOfRPar
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|stanbolSyntax
operator|.
name|split
argument_list|(
literal|"->"
argument_list|)
decl_stmt|;
name|String
name|body
init|=
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|head
init|=
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|tripleCollection
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|,
name|Symbols
operator|.
name|ruleName
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|rule
operator|.
name|getRuleName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tripleCollection
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|,
name|Symbols
operator|.
name|description
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|description
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tripleCollection
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|,
name|Symbols
operator|.
name|ruleBody
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|body
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tripleCollection
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|,
name|Symbols
operator|.
name|ruleHead
argument_list|,
operator|new
name|PlainLiteralImpl
argument_list|(
name|head
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|rule
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
name|recipe
operator|.
name|addRule
argument_list|(
operator|new
name|RecipeRule
argument_list|(
name|recipe
argument_list|,
name|rule
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|recipe
return|;
block|}
comment|/**      *       * Parse the set of rules provided by the rulesStream parameter as Stanbol syntax rules and add them to      * the Recipe in the store.<br/>      * The recipe is a {@link TripleCollection} managed by the {@link TcManager}.      *       *       * @param recipe      *            {@link Recipe} the recipe      * @param rulesStream      *            {@link InputStream} the rule in Stanbol syntax      *       * @return the recipe with the new rule.      */
annotation|@
name|Override
specifier|public
name|Recipe
name|addRulesToRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|InputStream
name|rulesStream
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding rule to recipe "
operator|+
name|recipe
argument_list|)
expr_stmt|;
name|UriRef
name|recipeID
init|=
name|recipe
operator|.
name|getRecipeID
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|recipeID
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|recipeID
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|RuleList
name|ruleList
init|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
name|namespace
argument_list|,
name|rulesStream
argument_list|)
operator|.
name|getRuleList
argument_list|()
decl_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
name|recipe
operator|=
name|addRuleToRecipe
argument_list|(
name|recipe
argument_list|,
name|rule
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
return|return
name|recipe
return|;
block|}
comment|/**      *       * @param recipeIRI      *            the IRI of the recipe      * @param stanbolRule      *            the rule in Rule syntax      */
annotation|@
name|Override
specifier|public
name|Recipe
name|addRulesToRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|String
name|stanbolRule
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|UriRef
name|recipeID
init|=
name|recipe
operator|.
name|getRecipeID
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|recipeID
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|recipeID
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|RuleList
name|ruleList
init|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
name|namespace
argument_list|,
name|stanbolRule
argument_list|)
operator|.
name|getRuleList
argument_list|()
decl_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|ruleList
control|)
block|{
name|recipe
operator|=
name|addRuleToRecipe
argument_list|(
name|recipe
argument_list|,
name|rule
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
return|return
name|recipe
return|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ClerezzaRuleStore
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Recipe
name|getRecipe
parameter_list|(
name|UriRef
name|recipeID
parameter_list|)
throws|throws
name|NoSuchRecipeException
throws|,
name|RecipeConstructionException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Called get recipe for id: "
operator|+
name|recipeID
argument_list|)
expr_stmt|;
name|TripleCollection
name|recipeGraph
init|=
literal|null
decl_stmt|;
comment|/**          * Throw a NoSuchRecipeException in case of the TcManager throws a NoSuchEntityException with respect          * to UriRef representing the recipe.          */
try|try
block|{
name|recipeGraph
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchRecipeException
argument_list|(
name|recipeID
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|descriptions
init|=
name|recipeGraph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|Symbols
operator|.
name|description
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|recipeDescription
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|descriptions
operator|!=
literal|null
operator|&&
name|descriptions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|recipeDescription
operator|=
name|descriptions
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|query
init|=
literal|"SELECT ?rule ?ruleName ?ruleBody ?ruleHead "
operator|+
literal|"WHERE { "
operator|+
literal|"	"
operator|+
name|recipeID
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|Symbols
operator|.
name|hasRule
operator|.
name|toString
argument_list|()
operator|+
literal|" ?rule . "
operator|+
literal|"	?rule "
operator|+
name|Symbols
operator|.
name|ruleName
operator|.
name|toString
argument_list|()
operator|+
literal|" ?ruleName . "
operator|+
literal|"	?rule "
operator|+
name|Symbols
operator|.
name|ruleBody
operator|.
name|toString
argument_list|()
operator|+
literal|" ?ruleBody . "
operator|+
literal|"	?rule "
operator|+
name|Symbols
operator|.
name|ruleHead
operator|.
name|toString
argument_list|()
operator|+
literal|" ?ruleHead . "
operator|+
literal|"}"
decl_stmt|;
name|Query
name|sparql
decl_stmt|;
try|try
block|{
name|sparql
operator|=
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSet
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
operator|(
name|SelectQuery
operator|)
name|sparql
argument_list|,
name|recipeGraph
argument_list|)
decl_stmt|;
name|StringBuilder
name|stanbolRulesBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstIteration
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|solutionMapping
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|nameResource
init|=
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"ruleName"
argument_list|)
decl_stmt|;
name|Resource
name|bodyResource
init|=
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"ruleBody"
argument_list|)
decl_stmt|;
name|Resource
name|headResource
init|=
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"ruleHead"
argument_list|)
decl_stmt|;
name|StringBuilder
name|stanbolRuleBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stanbolRuleBuilder
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|nameResource
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
name|stanbolRuleBuilder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|stanbolRuleBuilder
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|bodyResource
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
name|stanbolRuleBuilder
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|stanbolRuleBuilder
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Literal
operator|)
name|headResource
operator|)
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
name|stanbolRuleBuilder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|firstIteration
condition|)
block|{
name|stanbolRulesBuilder
operator|.
name|append
argument_list|(
literal|" . "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstIteration
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|stanbolSyntax
init|=
name|stanbolRuleBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Rule content {}"
argument_list|,
name|stanbolSyntax
argument_list|)
expr_stmt|;
name|stanbolRulesBuilder
operator|.
name|append
argument_list|(
name|stanbolSyntax
argument_list|)
expr_stmt|;
block|}
name|String
name|stanbolSyntax
init|=
name|stanbolRulesBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|RuleList
name|ruleList
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|stanbolSyntax
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|namespace
init|=
name|recipeID
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|recipeID
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|ruleList
operator|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
name|namespace
argument_list|,
name|stanbolSyntax
argument_list|)
operator|.
name|getRuleList
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|RecipeImpl
argument_list|(
name|recipeID
argument_list|,
name|recipeDescription
argument_list|,
name|ruleList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RecipeConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UriRef
argument_list|>
name|listRecipeIDs
parameter_list|()
block|{
return|return
name|recipes
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecipeList
name|listRecipes
parameter_list|()
throws|throws
name|NoSuchRecipeException
throws|,
name|RecipeConstructionException
block|{
name|RecipeList
name|recipeList
init|=
operator|new
name|RecipeList
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|recipeID
range|:
name|recipes
control|)
block|{
name|Recipe
name|recipe
decl_stmt|;
try|try
block|{
name|recipe
operator|=
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
name|recipeList
operator|.
name|add
argument_list|(
name|recipe
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"The Clerezza rule store contains {} recipes"
argument_list|,
name|recipeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|recipeList
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRecipe
parameter_list|(
name|UriRef
name|recipeID
parameter_list|)
throws|throws
name|RecipeEliminationException
block|{
comment|// remove the recipe from the TcManager
try|try
block|{
name|tcManager
operator|.
name|deleteTripleCollection
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RecipeEliminationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|TripleCollection
name|recipeIndexTripleCollection
init|=
name|tcManager
operator|.
name|getTriples
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeIndexLocation
argument_list|)
argument_list|)
decl_stmt|;
name|Triple
name|triple
init|=
operator|new
name|TripleImpl
argument_list|(
name|recipeID
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|Symbols
operator|.
name|Recipe
argument_list|)
decl_stmt|;
name|recipeIndexTripleCollection
operator|.
name|remove
argument_list|(
name|triple
argument_list|)
expr_stmt|;
comment|// System.out.println("Recipes: " +recipes.size());
comment|// remove the recipe ID from in-memory list
name|recipes
operator|.
name|remove
argument_list|(
name|recipeID
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
throws|throws
name|RecipeEliminationException
block|{
return|return
name|removeRecipe
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Recipe
name|removeRule
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|Rule
name|rule
parameter_list|)
block|{
name|TripleCollection
name|tripleCollection
init|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove from the graph recipe all the triples having the ruleID as subject.
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triplesIterator
init|=
name|tripleCollection
operator|.
name|filter
argument_list|(
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|triplesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tripleCollection
operator|.
name|remove
argument_list|(
name|triplesIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove from the graph recipe the triple recipeID hasRule ruleID
name|tripleCollection
operator|.
name|remove
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|,
name|Symbols
operator|.
name|hasRule
argument_list|,
name|rule
operator|.
name|getRuleID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|recipe
operator|.
name|removeRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
return|return
name|recipe
return|;
block|}
annotation|@
name|Override
specifier|public
name|Rule
name|getRule
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|String
name|ruleName
parameter_list|)
throws|throws
name|NoSuchRuleInRecipeException
block|{
return|return
name|recipe
operator|.
name|getRule
argument_list|(
name|ruleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Rule
name|getRule
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|UriRef
name|ruleID
parameter_list|)
throws|throws
name|NoSuchRuleInRecipeException
block|{
return|return
name|recipe
operator|.
name|getRule
argument_list|(
name|ruleID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UriRef
argument_list|>
name|listRuleIDs
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
block|{
return|return
name|recipe
operator|.
name|listRuleIDs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRuleNames
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
block|{
return|return
name|recipe
operator|.
name|listRuleNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RuleList
name|listRules
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
block|{
return|return
name|recipe
operator|.
name|getRuleList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TripleCollection
name|exportRecipe
parameter_list|(
name|Recipe
name|recipe
parameter_list|)
throws|throws
name|NoSuchRecipeException
block|{
try|try
block|{
return|return
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|recipe
operator|.
name|getRecipeID
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchEntityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchRecipeException
argument_list|(
name|recipe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecipeList
name|findRecipesByDescription
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|String
name|sparql
init|=
literal|"SELECT ?recipe "
operator|+
literal|"WHERE { ?recipe a "
operator|+
name|Symbols
operator|.
name|Recipe
operator|.
name|toString
argument_list|()
operator|+
literal|" . "
operator|+
literal|"?recipe "
operator|+
name|Symbols
operator|.
name|description
operator|+
literal|" ?description . "
operator|+
literal|"FILTER (regex(?description, \""
operator|+
name|term
operator|+
literal|"\", \"i\"))"
operator|+
literal|"}"
decl_stmt|;
name|TripleCollection
name|tripleCollection
init|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|recipeIndexLocation
argument_list|)
argument_list|)
decl_stmt|;
name|RecipeList
name|matchingRecipes
init|=
operator|new
name|RecipeList
argument_list|()
decl_stmt|;
try|try
block|{
name|SelectQuery
name|query
init|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|sparql
argument_list|)
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|query
argument_list|,
name|tripleCollection
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|solutionMapping
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|recipeID
init|=
operator|(
name|UriRef
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"recipe"
argument_list|)
decl_stmt|;
try|try
block|{
name|Recipe
name|recipe
init|=
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Found recipe {}."
argument_list|,
name|recipeID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|matchingRecipes
operator|.
name|add
argument_list|(
name|recipe
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Found {} matching recipes."
argument_list|,
name|matchingRecipes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The sparql query contains errors: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|matchingRecipes
return|;
block|}
annotation|@
name|Override
specifier|public
name|RuleList
name|findRulesByName
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|String
name|sparql
init|=
literal|"SELECT ?recipe ?rule ?description "
operator|+
literal|"WHERE { "
operator|+
literal|"?recipe "
operator|+
name|Symbols
operator|.
name|hasRule
operator|+
literal|" ?rule . "
operator|+
literal|"?rule "
operator|+
name|Symbols
operator|.
name|ruleName
operator|+
literal|" ?name . "
operator|+
literal|"?rule "
operator|+
name|Symbols
operator|.
name|description
operator|+
literal|" ?description . "
operator|+
literal|"FILTER (regex(?name, \""
operator|+
name|term
operator|+
literal|"\", \"i\"))"
operator|+
literal|"}"
decl_stmt|;
name|List
argument_list|<
name|UriRef
argument_list|>
name|recipeIDs
init|=
name|listRecipeIDs
argument_list|()
decl_stmt|;
name|TripleCollection
index|[]
name|tripleCollections
init|=
operator|new
name|TripleCollection
index|[
name|recipeIDs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tripleCollections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tripleCollections
index|[
name|i
index|]
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|recipeIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UnionMGraph
name|unionMGraph
init|=
operator|new
name|UnionMGraph
argument_list|(
name|tripleCollections
argument_list|)
decl_stmt|;
name|RuleList
name|matchingRules
init|=
operator|new
name|RuleList
argument_list|()
decl_stmt|;
try|try
block|{
name|SelectQuery
name|query
init|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|sparql
argument_list|)
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|query
argument_list|,
name|unionMGraph
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|solutionMapping
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|recipeID
init|=
operator|(
name|UriRef
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"recipe"
argument_list|)
decl_stmt|;
name|UriRef
name|ruleID
init|=
operator|(
name|UriRef
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
name|Literal
name|description
init|=
operator|(
name|Literal
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
try|try
block|{
name|Recipe
name|recipe
init|=
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
name|Rule
name|rule
init|=
operator|new
name|RecipeRule
argument_list|(
name|recipe
argument_list|,
name|getRule
argument_list|(
name|recipe
argument_list|,
name|ruleID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|rule
operator|.
name|setDescription
argument_list|(
name|description
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|matchingRules
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
catch|catch
parameter_list|(
name|NoSuchRuleInRecipeException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The sparql query contains errors: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|matchingRules
return|;
block|}
annotation|@
name|Override
specifier|public
name|RuleList
name|findRulesByDescription
parameter_list|(
name|String
name|term
parameter_list|)
block|{
name|String
name|sparql
init|=
literal|"SELECT ?recipe ?rule ?description "
operator|+
literal|"WHERE { "
operator|+
literal|"?recipe "
operator|+
name|Symbols
operator|.
name|hasRule
operator|+
literal|" ?rule . "
operator|+
literal|"?rule "
operator|+
name|Symbols
operator|.
name|description
operator|+
literal|" ?description . "
operator|+
literal|"FILTER (regex(?description, \""
operator|+
name|term
operator|+
literal|"\", \"i\"))"
operator|+
literal|"}"
decl_stmt|;
name|List
argument_list|<
name|UriRef
argument_list|>
name|recipeIDs
init|=
name|listRecipeIDs
argument_list|()
decl_stmt|;
name|TripleCollection
index|[]
name|tripleCollections
init|=
operator|new
name|TripleCollection
index|[
name|recipeIDs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tripleCollections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tripleCollections
index|[
name|i
index|]
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
name|recipeIDs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UnionMGraph
name|unionMGraph
init|=
operator|new
name|UnionMGraph
argument_list|(
name|tripleCollections
argument_list|)
decl_stmt|;
name|RuleList
name|matchingRules
init|=
operator|new
name|RuleList
argument_list|()
decl_stmt|;
try|try
block|{
name|SelectQuery
name|query
init|=
operator|(
name|SelectQuery
operator|)
name|QueryParser
operator|.
name|getInstance
argument_list|()
operator|.
name|parse
argument_list|(
name|sparql
argument_list|)
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|tcManager
operator|.
name|executeSparqlQuery
argument_list|(
name|query
argument_list|,
name|unionMGraph
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SolutionMapping
name|solutionMapping
init|=
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|UriRef
name|recipeID
init|=
operator|(
name|UriRef
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"recipe"
argument_list|)
decl_stmt|;
name|UriRef
name|ruleID
init|=
operator|(
name|UriRef
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
name|Literal
name|description
init|=
operator|(
name|Literal
operator|)
name|solutionMapping
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
try|try
block|{
name|Recipe
name|recipe
init|=
name|getRecipe
argument_list|(
name|recipeID
argument_list|)
decl_stmt|;
name|Rule
name|rule
init|=
operator|new
name|RecipeRule
argument_list|(
name|recipe
argument_list|,
name|getRule
argument_list|(
name|recipe
argument_list|,
name|ruleID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|rule
operator|.
name|setDescription
argument_list|(
name|description
operator|.
name|getLexicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|matchingRules
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchRecipeException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
catch|catch
parameter_list|(
name|RecipeConstructionException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
catch|catch
parameter_list|(
name|NoSuchRuleInRecipeException
name|e
parameter_list|)
block|{
comment|// in this case go on in the iteration by fetching other matching recipes
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"The sparql query contains errors: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|matchingRules
return|;
block|}
block|}
end_class

end_unit

