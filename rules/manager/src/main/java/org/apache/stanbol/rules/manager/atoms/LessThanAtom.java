begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|JenaClauseEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|JenaVariableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|SPARQLObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|URIResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|JenaClauseEntryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|JenaVariableMapImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|SPARQLComparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLBuiltInAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLDArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|vocab
operator|.
name|SWRLBuiltInsVocabulary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|BuiltinRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|ClauseEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Functor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Node_RuleVariable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|XSD
import|;
end_import

begin_class
specifier|public
class|class
name|LessThanAtom
extends|extends
name|ComparisonAtom
block|{
specifier|private
name|Object
name|argument1
decl_stmt|;
specifier|private
name|Object
name|argument2
decl_stmt|;
specifier|public
name|LessThanAtom
parameter_list|(
name|Object
name|argument1
parameter_list|,
name|Object
name|argument2
parameter_list|)
block|{
name|this
operator|.
name|argument1
operator|=
name|argument1
expr_stmt|;
name|this
operator|.
name|argument2
operator|=
name|argument2
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|toSWRL
parameter_list|(
name|Model
name|model
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SPARQLObject
name|toSPARQL
parameter_list|()
block|{
name|String
name|arg1
init|=
name|argument1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|arg2
init|=
name|argument2
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg1
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|arg1
operator|=
literal|"str(?"
operator|+
name|arg1
operator|.
name|replace
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|,
literal|""
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|arg1
operator|=
literal|"str("
operator|+
name|arg1
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|arg2
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|arg2
operator|=
literal|"str(?"
operator|+
name|arg2
operator|.
name|replace
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|,
literal|""
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|arg2
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
operator|&&
operator|!
name|arg2
operator|.
name|endsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|OWLLiteral
name|literal
init|=
name|getOWLTypedLiteral
argument_list|(
name|argument2
argument_list|)
decl_stmt|;
name|arg2
operator|=
literal|"str("
operator|+
name|literal
operator|.
name|getLiteral
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|arg2
operator|=
literal|"str("
operator|+
name|arg2
operator|+
literal|")"
expr_stmt|;
block|}
return|return
operator|new
name|SPARQLComparison
argument_list|(
name|arg1
operator|+
literal|"< "
operator|+
name|arg2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SWRLAtom
name|toSWRL
parameter_list|(
name|OWLDataFactory
name|factory
parameter_list|)
block|{
name|List
argument_list|<
name|SWRLDArgument
argument_list|>
name|swrldArguments
init|=
operator|new
name|ArrayList
argument_list|<
name|SWRLDArgument
argument_list|>
argument_list|()
decl_stmt|;
name|SWRLDArgument
name|swrldArgument1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|argument1
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|swrldArgument1
operator|=
name|factory
operator|.
name|getSWRLVariable
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OWLLiteral
name|literal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|argument1
operator|instanceof
name|TypedLiteralAtom
condition|)
block|{
name|TypedLiteralAtom
name|typedLiteralAtom
init|=
operator|(
name|TypedLiteralAtom
operator|)
name|argument1
decl_stmt|;
name|URIResource
name|xsdType
init|=
name|typedLiteralAtom
operator|.
name|getXsdType
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xboolean
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xdouble
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xfloat
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xint
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|argument1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|swrldArgument1
operator|=
name|factory
operator|.
name|getSWRLLiteralArgument
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
name|SWRLDArgument
name|swrldArgument2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|argument2
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|swrldArgument2
operator|=
name|factory
operator|.
name|getSWRLVariable
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OWLLiteral
name|literal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|argument2
operator|instanceof
name|TypedLiteralAtom
condition|)
block|{
name|TypedLiteralAtom
name|typedLiteralAtom
init|=
operator|(
name|TypedLiteralAtom
operator|)
name|argument2
decl_stmt|;
name|URIResource
name|xsdType
init|=
name|typedLiteralAtom
operator|.
name|getXsdType
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xboolean
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xdouble
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xfloat
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xint
argument_list|)
condition|)
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|literal
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|argument2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|swrldArgument2
operator|=
name|factory
operator|.
name|getSWRLLiteralArgument
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
name|swrldArguments
operator|.
name|add
argument_list|(
name|swrldArgument1
argument_list|)
expr_stmt|;
name|swrldArguments
operator|.
name|add
argument_list|(
name|swrldArgument2
argument_list|)
expr_stmt|;
name|SWRLBuiltInAtom
name|swrlBuiltInAtom
init|=
name|factory
operator|.
name|getSWRLBuiltInAtom
argument_list|(
name|SWRLBuiltInsVocabulary
operator|.
name|LESS_THAN
operator|.
name|getIRI
argument_list|()
argument_list|,
name|swrldArguments
argument_list|)
decl_stmt|;
return|return
name|swrlBuiltInAtom
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toKReSSyntax
parameter_list|()
block|{
name|String
name|arg1
init|=
literal|null
decl_stmt|;
name|String
name|arg2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|argument1
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|arg1
operator|=
literal|"?"
operator|+
name|argument1
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arg1
operator|=
name|argument1
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|argument2
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|arg2
operator|=
literal|"?"
operator|+
name|argument2
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
literal|"lt("
operator|+
name|arg1
operator|+
literal|", "
operator|+
name|arg2
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
literal|"lt("
operator|+
name|arg1
operator|+
literal|", "
operator|+
name|argument2
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
specifier|private
name|OWLLiteral
name|getOWLTypedLiteral
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLLiteral
name|owlLiteral
decl_stmt|;
if|if
condition|(
name|argument
operator|instanceof
name|String
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
operator|(
name|String
operator|)
name|argument
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Integer
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|argument
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Double
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|argument
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Float
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|argument
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Boolean
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLTypedLiteral
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|argument
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLStringLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|owlLiteral
return|;
block|}
annotation|@
name|Override
specifier|public
name|JenaClauseEntry
name|toJenaClauseEntry
parameter_list|(
name|JenaVariableMap
name|jenaVariableMap
parameter_list|)
block|{
name|Node
name|arg1Node
init|=
literal|null
decl_stmt|;
name|Node
name|arg2Node
init|=
literal|null
decl_stmt|;
name|String
name|arg1
init|=
name|argument1
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg1
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|arg1
operator|=
name|arg1
operator|.
name|replace
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|arg1Node
operator|=
operator|new
name|Node_RuleVariable
argument_list|(
name|arg1
argument_list|,
name|jenaVariableMap
operator|.
name|getVariableIndex
argument_list|(
name|arg1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arg1Node
operator|=
name|getTypedLiteral
argument_list|(
name|argument1
argument_list|)
expr_stmt|;
block|}
name|String
name|arg2
init|=
name|argument2
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg2
operator|.
name|startsWith
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|)
condition|)
block|{
name|arg2
operator|=
name|arg2
operator|.
name|replace
argument_list|(
literal|"http://kres.iks-project.eu/ontology/meta/variables#"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|arg2Node
operator|=
operator|new
name|Node_RuleVariable
argument_list|(
name|arg2
argument_list|,
name|jenaVariableMap
operator|.
name|getVariableIndex
argument_list|(
name|arg2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arg2Node
operator|=
name|getTypedLiteral
argument_list|(
name|argument2
argument_list|)
expr_stmt|;
block|}
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|arg1Node
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|arg2Node
argument_list|)
expr_stmt|;
return|return
operator|new
name|JenaClauseEntryImpl
argument_list|(
operator|new
name|Functor
argument_list|(
literal|"lessThan"
argument_list|,
name|nodes
argument_list|,
operator|new
name|BuiltinRegistry
argument_list|()
argument_list|)
argument_list|,
name|jenaVariableMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

