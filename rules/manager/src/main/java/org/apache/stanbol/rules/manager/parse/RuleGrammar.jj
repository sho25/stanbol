/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
options
{
  JDK_VERSION = "1.6";
  static = false;
}

PARSER_BEGIN(RuleParserImpl)
package org.apache.stanbol.rules.manager.parse;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.clerezza.commons.rdf.IRI;
import org.apache.stanbol.rules.base.api.Rule;
import org.apache.stanbol.rules.base.api.RuleAtom;
import org.apache.stanbol.rules.base.api.util.AtomList;
import org.apache.stanbol.rules.manager.KB;
import org.apache.stanbol.rules.manager.RuleImpl;
import org.apache.stanbol.rules.manager.atoms.ClassAtom;
import org.apache.stanbol.rules.manager.atoms.ComparisonAtom;
import org.apache.stanbol.rules.manager.atoms.ConcatAtom;
import org.apache.stanbol.rules.manager.atoms.CreateLabelAtom;
import org.apache.stanbol.rules.manager.atoms.DatavaluedPropertyAtom;
import org.apache.stanbol.rules.manager.atoms.DifferentAtom;
import org.apache.stanbol.rules.manager.atoms.DivisionAtom;
import org.apache.stanbol.rules.manager.atoms.EndsWithAtom;
import org.apache.stanbol.rules.manager.atoms.ExpressionAtom;
import org.apache.stanbol.rules.manager.atoms.GreaterEqualThanAtom;
import org.apache.stanbol.rules.manager.atoms.GreaterThanAtom;
import org.apache.stanbol.rules.manager.atoms.IObjectAtom;
import org.apache.stanbol.rules.manager.atoms.IndividualPropertyAtom;
import org.apache.stanbol.rules.manager.atoms.IsBlankAtom;
import org.apache.stanbol.rules.manager.atoms.LengthAtom;
import org.apache.stanbol.rules.manager.atoms.LessEqualThanAtom;
import org.apache.stanbol.rules.manager.atoms.LessThanAtom;
import org.apache.stanbol.rules.manager.atoms.LetAtom;
import org.apache.stanbol.rules.manager.atoms.LocalNameAtom;
import org.apache.stanbol.rules.manager.atoms.LowerCaseAtom;
import org.apache.stanbol.rules.manager.atoms.MultiplicationAtom;
import org.apache.stanbol.rules.manager.atoms.NamespaceAtom;
import org.apache.stanbol.rules.manager.atoms.NewIRIAtom;
import org.apache.stanbol.rules.manager.atoms.NewLiteralAtom;
import org.apache.stanbol.rules.manager.atoms.NotAtom;
import org.apache.stanbol.rules.manager.atoms.NumberAtom;
import org.apache.stanbol.rules.manager.atoms.NumericFunctionAtom;
import org.apache.stanbol.rules.manager.atoms.NumericVariableAtom;
import org.apache.stanbol.rules.manager.atoms.PropStringAtom;
import org.apache.stanbol.rules.manager.atoms.ResourceAtom;
import org.apache.stanbol.rules.manager.atoms.RuleBlankNode;
import org.apache.stanbol.rules.manager.atoms.SameAtom;
import org.apache.stanbol.rules.manager.atoms.StartsWithAtom;
import org.apache.stanbol.rules.manager.atoms.StrAtom;
import org.apache.stanbol.rules.manager.atoms.StringAtom;
import org.apache.stanbol.rules.manager.atoms.StringFunctionAtom;
import org.apache.stanbol.rules.manager.atoms.StringVariableAtom;
import org.apache.stanbol.rules.manager.atoms.SubstringAtom;
import org.apache.stanbol.rules.manager.atoms.SubtractionAtom;
import org.apache.stanbol.rules.manager.atoms.SumAtom;
import org.apache.stanbol.rules.manager.atoms.TypedLiteralAtom;
import org.apache.stanbol.rules.manager.atoms.UnionAtom;
import org.apache.stanbol.rules.manager.atoms.UpperCaseAtom;
import org.apache.stanbol.rules.manager.atoms.VariableAtom;

import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFTerm;

/**
*
* @author anuzzolese 
* 
*/

@SuppressWarnings("unused")

public class RuleParserImpl
{

  static KB kb;
  
  public static KB parse( String namespace, String inString ) {
  {
  	kb = new KB(namespace);
  	Reader reader = new StringReader( inString ) ;
    RuleParserImpl parser = new RuleParserImpl(reader);
    StringBuffer buffer = new StringBuffer() ;
	try {
		parser.start( ) ; 
	} catch( TokenMgrError e ) { 
		throw new IllegalStateException(e) ; 
	} catch( ParseException e ) { 
		throw new IllegalStateException(e) ; 
	} 
	return kb ; }
  }
  
  public static KB parse( String namespace, InputStream inStream ) {

		kb = new KB(namespace);
		Reader reader = new InputStreamReader(inStream);
		RuleParserImpl parser = new RuleParserImpl(reader);
		try {
			parser.start();
		} catch (TokenMgrError e) {
			throw new IllegalStateException(e);
		} catch (ParseException e) {
			throw new IllegalStateException(e);
		}
		return kb;
	}


	private static URI getSWRLArgument(String argument){
                RDFTerm rdfNode = null;
                String[] argumentComposition = argument.split(":");
                if(argumentComposition.length == 2){
                        String prefix = argumentComposition[0];
                        String resourceName = argumentComposition[1];

                        String namespaceURI = kb.getPrefixURI(prefix);
                        rdfNode = ModelFactory.createDefaultModel().createResource(namespaceURI+resourceName);
                        try {
							return new URI(rdfNode.getURI());
						} catch (URISyntaxException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

                }
                
                return null;
        }

        private static URI getSWRLVariable(String argument){
                RDFTerm variableResource = null;
                String variableString = argument.substring(1);


                variableResource = ModelFactory.createDefaultModel().createResource(kb.getPrefixURI("var")+variableString);



                try {
					return new URI(variableResource.getURI());
				} catch (URISyntaxException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					return null;
				}
        }
}

PARSER_END(RuleParserImpl)

SKIP : {" "}
SKIP : {"\r" | "\t" | "\n"}
SKIP :
{
  "/*" : WithinComment
}

<WithinComment> SKIP :
{
  "*/" : DEFAULT
}

<WithinComment> MORE :
{
  <~[]>
}


TOKEN : /* OPERATORS */
{
  < LARROW : "->" >
| < COLON : ":" >
| < EQUAL : "=" >
| < AND : "." >
| < COMMA : "," >
| < SAME : "same" >
| < DIFFERENT : "different" >
| < LESSTHAN : "lt" >
| < GREATERTHAN : "gt" >
| < LESSEQUALTHAN : "leq" >
| < GREATEREQUALTHAN : "geq" >
| < IS : "is" >
| < NEW_IRI : "newIRI" >
| < NEW_LITERAL: "newLiteral" >
| < LENGTH : "length" >
| < SUBSTRING : "substring" >
| < UPPERCASE : "upperCase" >
| < LOWERCASE : "lowerCase" >
| < STARTS_WITH : "startsWith" >
| < ENDS_WITH : "endsWith" >
| < LET : "let" >
| < CONCAT : "concat" >
| < HAS : "has" >
| < VALUES : "values" >
| < NOTEX : "notex" >
| < PLUS : "sum" >
| < MINUS : "sub" >
| < MULTIPLIED : "mult" >
| < DIVIDED : "div" >
| < NOT : "not" >
| < NAMESPACE : "namespace" >
| < LOCALNAME : "localname" >
| < STR : "str" >
| < APOX : "^" >
| < UNION : "union" >
| < CREATE_LABEL : "createLabel" >
| < PROP : "prop" >
| < IS_BLANK : "isBlank" >
}

TOKEN : /* BLOCKS */
{
  < LPAR : "(" >
| < RPAR : ")" >
| < DQUOT : "\"" >
| < LQUAD : "[" >
| < RQUAD : "]" >
}

TOKEN :
{
  < NUM : ([ "0"-"9"])+ > 
| < VAR : ([ "0"-"9","a"-"z","A"-"Z","-", "_", "."])+ >
| < VARIABLE : "?" ([ "0"-"9","a"-"z","A"-"Z","-", "_"])+ >
| < URI : "<" ([ "0"-"9","a"-"z","A"-"Z","-", "_", ".", "#", ":", "/", "(", ")", "$", "%" ])+ ">" >
| < STRING : "\"" ([ "0"-"9","a"-"z","A"-"Z","-", "_", ".", ":", "/", "#", "\\", "?", " ", "!", "$", "%" ])+ "\"" >
| < BNODE : "_:" ([ "0"-"9","a"-"z","A"-"Z","-", "_", "."])+ >
}


void start () :
{}
{
	expression() expressionCont()
}

void expressionCont() :
{}
{
	( < AND > expression() ) | {}
}

void expression() :
{Rule rule;}
{
	prefix() expressionCont()  
}

void prefix() :
{String nsPrefix; Object obj; Rule rule;}
{
  nsPrefix=getVariable() (obj=equality() { String prefixURI = (String)obj;
  										   prefixURI = prefixURI.substring(1, prefixURI.length()-1);
  										   kb.addPrefix(nsPrefix, prefixURI);  										    
  										 } 
  							|   obj=rule() { AtomList[] atoms = (AtomList[]) obj;
  											 String ruleStorePrefix = kb.getPrefixURI("rmi2");
											 ruleStorePrefix = ruleStorePrefix.substring(0, ruleStorePrefix.length());
  											 
  											 if(atoms.length == 1){
                                                            AtomList body = atoms[0];
                                                            if(body.size() == 1){
                                                                    // FIXME it previously managed SPARQL code injection.
                                                            }

                                                     }
                                                 else{
                                                         rule = new RuleImpl(new IRI(ruleStorePrefix+nsPrefix), nsPrefix, atoms[0], atoms[1]);
                                                         kb.addRule(rule);
                                                }
	  									}
  						)
}


String equality() :
{String nsURI;}
{
	< EQUAL > ( nsURI=getURI() )
	{ return nsURI;}
}



AtomList[] rule() :
{AtomList[] ruleAtoms;}
{
   < LQUAD >  ruleAtoms=ruleDefinition()  < RQUAD >
   { return ruleAtoms; }
  
}

AtomList[] ruleDefinition():
{AtomList body; AtomList head; Token t;}
{
	body=atomList() <LARROW> head=atomList()
	{ return new AtomList[]{body, head};}
	 
}

AtomList atomList() :
{AtomList atomList = new AtomList(); RuleAtom kReSAtom;}
{
	kReSAtom=atom() atomList=atomListRest() 
	{ atomList.addToHead(kReSAtom); return atomList;}
	
	| 
	{}
	{return atomList;} 
}


AtomList atomListRest() :
{AtomList atomList = new AtomList(); RuleAtom kReSAtom;}
{
	< AND > atomList=atomList() 
	{ return atomList;}
	| 
	{}
	{return atomList;} 
}


RuleAtom atom() :
{RuleAtom ruleAtom;}
{
   ruleAtom=classAtom() {return ruleAtom;}
|  ruleAtom=individualPropertyAtom() {return ruleAtom;}
|  ruleAtom=datavaluedPropertyAtom() {return ruleAtom;}
|  ruleAtom=letAtom() {return ruleAtom;}
|  ruleAtom=newIRIAtom() {return ruleAtom;}
|  ruleAtom=newLiteralAtom() {return ruleAtom;}
|  ruleAtom=comparisonAtom() {return ruleAtom;}
|  ruleAtom=unionAtom() {return ruleAtom;}

}

RuleAtom unionAtom() : 
{AtomList atomList1; AtomList atomList2;}
{
	< UNION > < LPAR > atomList1 = atomList() < COMMA > atomList2 = atomList() < RPAR >
	{ return new UnionAtom(atomList1, atomList2); }
}

StringFunctionAtom createLabelAtom() : 
{StringFunctionAtom stringFunctionAtom;}
{
	< CREATE_LABEL > < LPAR > stringFunctionAtom = stringFunctionAtom() < RPAR >
	{ return new CreateLabelAtom(stringFunctionAtom); }
}


StringFunctionAtom propStringAtom() : 
{StringFunctionAtom stringFunctionAtom1; StringFunctionAtom stringFunctionAtom2;}
{
	< PROP > < LPAR > stringFunctionAtom1 = stringFunctionAtom() < COMMA > stringFunctionAtom2 = stringFunctionAtom() < RPAR >
	{ return new PropStringAtom(stringFunctionAtom1, stringFunctionAtom2); }
}




ComparisonAtom endsWithAtom() : 
{RuleAtom ruleAtom; StringFunctionAtom arg; StringFunctionAtom stringFunctionAtom;}
{
	< ENDS_WITH > < LPAR > arg=stringFunctionAtom() < COMMA > stringFunctionAtom = stringFunctionAtom()< RPAR >

	{return new EndsWithAtom(arg, stringFunctionAtom);}
}


ComparisonAtom startsWithAtom() : 
{RuleAtom ruleAtom; StringFunctionAtom arg; StringFunctionAtom stringFunctionAtom;}
{
	< STARTS_WITH > < LPAR > arg=stringFunctionAtom() < COMMA > stringFunctionAtom = stringFunctionAtom()< RPAR >

	{return new StartsWithAtom(arg, stringFunctionAtom);}
}

StringFunctionAtom stringFunctionAtom() : 
{Object obj; StringFunctionAtom stringFunctionAtom;}
{
	(
		stringFunctionAtom=concatAtom()
	|   stringFunctionAtom=upperCaseAtom()
	|   stringFunctionAtom=lowerCaseAtom()
	|   stringFunctionAtom=substringAtom()
	|   stringFunctionAtom=namespaceAtom()
	|   stringFunctionAtom=localnameAtom()
	|   stringFunctionAtom=strAtom()
	|   stringFunctionAtom=stringAtom()
	| 	stringFunctionAtom=propStringAtom()
	|	stringFunctionAtom=createLabelAtom()
	|	stringFunctionAtom=stringVariable()
	)

	{return stringFunctionAtom;}
}


StrAtom strAtom() : 
{IObjectAtom uri;}
{
	< STR > < LPAR > uri = iObject() < RPAR >
	{return new StrAtom(uri);}
}

NamespaceAtom namespaceAtom() : 
{IObjectAtom uri;}
{
	< NAMESPACE > < LPAR > uri = iObject() < RPAR >
	{return new NamespaceAtom(uri);}
}

LocalNameAtom localnameAtom() : 
{IObjectAtom uri;}
{
	< LOCALNAME > < LPAR > uri = iObject() < RPAR >
	{return new LocalNameAtom(uri);}
}

StringAtom stringAtom() :
{String obj;}
{
	obj = getStringValue() { return new StringAtom(obj.toString()); }
}

ConcatAtom concatAtom() : 
{StringFunctionAtom arg1; StringFunctionAtom arg2;}
{
	< CONCAT > < LPAR > arg1=stringFunctionAtom()  < COMMA > arg2=stringFunctionAtom() < RPAR >
	{ return new ConcatAtom(arg1, arg2);}
}


UpperCaseAtom upperCaseAtom() : 
{StringFunctionAtom arg;}
{
	< UPPERCASE > < LPAR > arg=stringFunctionAtom() < RPAR >
	{ return new UpperCaseAtom(arg);}
}

LowerCaseAtom lowerCaseAtom() : 
{StringFunctionAtom arg;}
{
	< LOWERCASE > < LPAR > arg=stringFunctionAtom() < RPAR >
	{ return new LowerCaseAtom(arg);}
}

SubstringAtom substringAtom() : 
{StringFunctionAtom arg; NumericFunctionAtom start; NumericFunctionAtom length;}
{
	< SUBSTRING > < LPAR > arg=stringFunctionAtom() < COMMA > start=numericFunctionAtom() < COMMA > length=numericFunctionAtom() < RPAR >
	{ return new SubstringAtom(arg, start, length);}
}


ExpressionAtom expressionAtom() :
{ExpressionAtom expressionAtom;}
{
		expressionAtom = stringFunctionAtom()
	|	expressionAtom = numericFunctionAtom()
	
	{return expressionAtom;}
}

NumericFunctionAtom numericFunctionAtom() : 
{NumericFunctionAtom numericFunctionAtom;}
{
	(
		numericFunctionAtom = sumAtom()
	|   numericFunctionAtom = subtractionAtom()
	|   numericFunctionAtom = lengthAtom()
	|   numericFunctionAtom = numberAtom()
	|   numericFunctionAtom = numericVariable()
	)

	{return numericFunctionAtom;}
}


LengthAtom lengthAtom() : 
{StringFunctionAtom stringFunctionAtom;}
{
	< LENGTH > < LPAR > stringFunctionAtom = stringFunctionAtom() < RPAR >
	{return new LengthAtom(stringFunctionAtom);}
}

SumAtom sumAtom() : 
{NumericFunctionAtom numericFunctionAtom1; NumericFunctionAtom numericFunctionAtom2;}
{
	
	< PLUS > < LPAR > numericFunctionAtom1 = numericFunctionAtom() < COMMA > numericFunctionAtom2 = numericFunctionAtom() < RPAR >

	{return new SumAtom(numericFunctionAtom1, numericFunctionAtom2);}
}

SubtractionAtom subtractionAtom() : 
{NumericFunctionAtom numericFunctionAtom1; NumericFunctionAtom numericFunctionAtom2;}
{
	
	< MINUS > < LPAR > numericFunctionAtom1 = numericFunctionAtom() < COMMA > numericFunctionAtom2 = numericFunctionAtom() < RPAR >

	{return new SubtractionAtom(numericFunctionAtom1, numericFunctionAtom2);}
}

MultiplicationAtom multiplicationAtom() : 
{NumericFunctionAtom numericFunctionAtom1; NumericFunctionAtom numericFunctionAtom2;}
{
	
	< MULTIPLIED > < LPAR > numericFunctionAtom1 = numericFunctionAtom() < COMMA > numericFunctionAtom2 = numericFunctionAtom() < RPAR >

	{return new MultiplicationAtom(numericFunctionAtom1, numericFunctionAtom2);}
}

DivisionAtom divisionAtom() : 
{NumericFunctionAtom numericFunctionAtom1; NumericFunctionAtom numericFunctionAtom2;}
{
	
	< DIVIDED > < LPAR > numericFunctionAtom1 = numericFunctionAtom() < COMMA > numericFunctionAtom2 = numericFunctionAtom() < RPAR >

	{return new DivisionAtom(numericFunctionAtom1, numericFunctionAtom2);}
}

NumericFunctionAtom numberAtom() :
{Token t;}
{
	(
		t = < NUM >	
	)
	{ return new NumberAtom(t.image); }

}


ClassAtom classAtom() :
{IObjectAtom uri1; IObjectAtom uri2;}
{
	< IS > < LPAR > uri1=iObject()  < COMMA > uri2=iObject() < RPAR >
	{ return new ClassAtom(uri1, uri2);}
}


NewIRIAtom newIRIAtom() : 
{IObjectAtom arg1; StringFunctionAtom arg2;}
{
	< NEW_IRI > < LPAR > arg1=iObject()  < COMMA > arg2=stringFunctionAtom() < RPAR >
	{ return new NewIRIAtom(arg1, arg2);}
}


NewLiteralAtom newLiteralAtom() : 
{IObjectAtom arg1; StringFunctionAtom arg2;}
{
	< NEW_LITERAL > < LPAR > arg1=iObject()  < COMMA > arg2=stringFunctionAtom() < RPAR >
	{ return new NewLiteralAtom(arg1, arg2);}
}

LetAtom letAtom() : 
{IObjectAtom uri1; StringFunctionAtom fun;}
{
	< LET > < LPAR > uri1=iObject()  < COMMA > fun=stringFunctionAtom() < RPAR >
	{ return new LetAtom(uri1, fun);}
}


IndividualPropertyAtom individualPropertyAtom() :
{IObjectAtom uri1; IObjectAtom uri2; IObjectAtom uri3;}
{
	 < HAS > < LPAR > uri1=iObject() < COMMA > uri2=iObject() <COMMA> uri3=iObject() < RPAR >
	 {return new IndividualPropertyAtom(uri1, uri2, uri3);}
}


DatavaluedPropertyAtom datavaluedPropertyAtom() :
{IObjectAtom uri1; IObjectAtom uri2; RuleAtom obj;}
{
	 < VALUES > < LPAR > uri1=iObject() < COMMA > uri2=iObject() <COMMA> obj=dObject() < RPAR >
	 { return new DatavaluedPropertyAtom(uri1, uri2, obj); }
}


SameAtom sameAsAtom() :
{ExpressionAtom expressionAtom1; ExpressionAtom expressionAtom2;}
{
	< SAME > < LPAR > expressionAtom1=expressionAtom() < COMMA > expressionAtom2=expressionAtom() < RPAR >
	{ return new SameAtom(expressionAtom1, expressionAtom2); } 
}

LessThanAtom lessThanAtom() :
{ExpressionAtom obj1; ExpressionAtom obj2;}
{
	< LESSTHAN > < LPAR > obj1=expressionAtom() < COMMA > obj2=expressionAtom() < RPAR >
	{ return new LessThanAtom(obj1, obj2); } 
}

LessEqualThanAtom lessEqualThanAtom() :
{ExpressionAtom obj1; ExpressionAtom obj2;}
{
	< LESSEQUALTHAN > < LPAR > obj1=expressionAtom() < COMMA > obj2=expressionAtom() < RPAR >
	{ return new LessEqualThanAtom(obj1, obj2); } 
}

GreaterThanAtom greaterThanAtom() :
{ExpressionAtom obj1; ExpressionAtom obj2;}
{
	< GREATERTHAN > < LPAR > obj1=expressionAtom() < COMMA > obj2=expressionAtom() < RPAR >
	{ return new GreaterThanAtom(obj1, obj2); } 
}

GreaterEqualThanAtom greaterEqualThanAtom() :
{ExpressionAtom obj1; ExpressionAtom obj2;}
{
	< GREATEREQUALTHAN > < LPAR > obj1=expressionAtom() < COMMA > obj2=expressionAtom() < RPAR >
	{ return new GreaterEqualThanAtom(obj1, obj2); } 
}

DifferentAtom differentFromAtom() :
{ExpressionAtom expressionAtom1; ExpressionAtom expressionAtom2;}
{
	< DIFFERENT > < LPAR > expressionAtom1=expressionAtom() < COMMA > expressionAtom2=expressionAtom() < RPAR >
	{ return new DifferentAtom(expressionAtom1, expressionAtom2); } 
}

IObjectAtom reference() :
{ String uri1;
  Token colon;
  String uri3; }
{
	 uri1=getURI() { uri1 = uri1.substring(1, uri1.length()-1);
	 					try {
						  return new ResourceAtom(new URI(uri1));
							} catch (URISyntaxException e) {
								e.printStackTrace();
							} } | 
	 uri1= getVariable() colon=< COLON > uri3=getVariable() { return new ResourceAtom(getSWRLArgument(uri1+colon.image+uri3)); }
}



IObjectAtom varReference() :
{ String uri1;
  Token colon;
  String uri3; }
{
	 uri1=getURI() { try {
															return new ResourceAtom(new URI(uri1));
														} catch (URISyntaxException e) {
															e.printStackTrace();
														} } | 
	 uri1= getVariable() colon=< COLON > uri3=getVariable() { return new ResourceAtom(getSWRLArgument(uri1+colon.image+uri3)); }
}


String getURI() :
{
	Token t;
}
{
	t = < URI > { return t.image; }
}

String getVariable() :
{
	Token t;
}
{
	t = < VAR > { return t.image; }
}


String getStringValue() :
{
	Token t;
}
{
	t = < STRING > { return t.image; }
}

StringAtom getString() :
{
	Token t;
}
{
	t = < STRING > { return new StringAtom(t.image); }
}

NumberAtom getInt() :
{
	Token t;
}
{
	t=< NUM > { return new NumberAtom(t.image); }
}


Object uObject() :
{ Object obj; }
{
	(
		obj = variable() 
		| obj = reference()
		| obj = getString() 
		| obj = getInt()
	)
	{return obj;}
	
}


IObjectAtom iObject() :
{ IObjectAtom uri; }
{
	uri = variable() {return uri;} | uri = reference() {return uri;}
}

RuleAtom dObject() :
{ RuleAtom variable; }
{
	
	(variable=literal() | variable=variable()) {return variable;}	
}



ExpressionAtom literal() : 
{ ExpressionAtom literal; IObjectAtom typedLiteral;}
{
	(
	
			literal=getString() typedLiteral=typedLiteral() 
		|   literal=getInt() typedLiteral=typedLiteral()
		
	)
	
	{
		if(typedLiteral != null){
			return new TypedLiteralAtom(literal, typedLiteral);
		}
		else{
			return literal;
		}
	}
	
}

IObjectAtom typedLiteral() :
{ IObjectAtom type = null; }
{
	(
			< APOX > < APOX > type = reference()
		| {}
	)
	{return type;}
} 

IObjectAtom variable() :
{ Token t; String var;}
{
	< NOTEX > < LPAR > t = < VARIABLE > < RPAR > {var=t.image; var=kb.getPrefixURI("var") + var.substring(1);
														try{ 
															return new VariableAtom(new URI(var), true);
														} catch (URISyntaxException e) {
															e.printStackTrace();
															return null;
														}}
|	t = < VARIABLE >
	{ var=t.image; var=kb.getPrefixURI("var") + var.substring(1);
														try{ 
															return new VariableAtom(new URI(var), false);
														} catch (URISyntaxException e) {
															e.printStackTrace();
															return null;
														} }
|	t = < BNODE >
	{ var=t.image; 	return new RuleBlankNode(var); }
}



ComparisonAtom notAtom() :
{ ComparisonAtom comparisonAtom; }
{
	< NOT > < LPAR > comparisonAtom = comparisonAtom() < RPAR >
	{return new NotAtom(comparisonAtom);}	
}

ComparisonAtom isBlankAtom() :
{ IObjectAtom uriRes; }
{
	< IS_BLANK > < LPAR > uriRes = iObject()  < RPAR >
	{return new IsBlankAtom(uriRes);}	
}

ComparisonAtom comparisonAtom() :
{ ComparisonAtom comparisonAtom; }
{
	(
		comparisonAtom = sameAsAtom()
	|	comparisonAtom = lessThanAtom()
	|	comparisonAtom = greaterThanAtom()
	|	comparisonAtom = differentFromAtom()
	|   comparisonAtom = notAtom()
	|   comparisonAtom = startsWithAtom()
	|   comparisonAtom = endsWithAtom()
	|   comparisonAtom = isBlankAtom()
	) 
	{return comparisonAtom;}
}


NumericVariableAtom numericVariable() :
{ Token t; String var;}
{
	t = < VARIABLE >
	{ var=t.image; var=kb.getPrefixURI("var") + var.substring(1);
														try{ 
															return new NumericVariableAtom(new URI(var), false);
														} catch (URISyntaxException e) {
															e.printStackTrace();
															return null;
														} }

}

StringVariableAtom stringVariable() :
{ Token t; String var;}
{
	t = < VARIABLE >
	{ var=t.image; var=kb.getPrefixURI("var") + var.substring(1);
														try{ 
															return new StringVariableAtom(new URI(var), false);
														} catch (URISyntaxException e) {
															e.printStackTrace();
															return null;
														} }

}