begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|datatypes
operator|.
name|xsd
operator|.
name|XSDDatatype
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Node_RuleVariable
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRuleAtom
implements|implements
name|RuleAtom
block|{
specifier|protected
name|Node
name|getTypedLiteral
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
name|Node
name|literal
decl_stmt|;
if|if
condition|(
name|argument
operator|instanceof
name|String
condition|)
block|{
name|literal
operator|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
operator|(
name|String
operator|)
name|argument
argument_list|,
literal|null
argument_list|,
name|XSDDatatype
operator|.
name|XSDstring
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Integer
condition|)
block|{
name|literal
operator|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|XSDDatatype
operator|.
name|XSDinteger
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Double
condition|)
block|{
name|literal
operator|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|XSDDatatype
operator|.
name|XSDdouble
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Float
condition|)
block|{
name|literal
operator|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|XSDDatatype
operator|.
name|XSDfloat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Boolean
condition|)
block|{
name|literal
operator|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|XSDDatatype
operator|.
name|XSDboolean
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|literal
operator|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
operator|(
name|String
operator|)
name|argument
argument_list|)
expr_stmt|;
block|}
return|return
name|literal
return|;
block|}
block|}
end_class

end_unit

