begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
package|;
end_package

begin_class
specifier|public
class|class
name|ClassAtom
extends|extends
name|CoreAtom
block|{
specifier|private
name|IObjectAtom
name|classResource
decl_stmt|;
specifier|private
name|IObjectAtom
name|argument1
decl_stmt|;
specifier|public
name|ClassAtom
parameter_list|(
name|IObjectAtom
name|classResource
parameter_list|,
name|IObjectAtom
name|argument1
parameter_list|)
block|{
name|this
operator|.
name|classResource
operator|=
name|classResource
expr_stmt|;
name|this
operator|.
name|argument1
operator|=
name|argument1
expr_stmt|;
block|}
specifier|public
name|IObjectAtom
name|getClassResource
parameter_list|()
block|{
return|return
name|classResource
return|;
block|}
specifier|public
name|IObjectAtom
name|getArgument1
parameter_list|()
block|{
return|return
name|argument1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
return|return
name|argument1
operator|.
name|toString
argument_list|()
operator|+
literal|" is an individual of the class "
operator|+
name|classResource
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|/*          * String arg1 = null; String arg2 = null;          *           *           *           * if(argument1.toString().startsWith(Symbols.variablesPrefix)){ arg1 =          * "?"+argument1.toString().replace(Symbols.variablesPrefix, ""); VariableAtom variable =          * (VariableAtom) argument1; if(variable.isNegative()){ arg1 = "notex(" + arg1 + ")"; } } else{ arg1 =          * argument1.toString(); }          *           * if(classResource.toString().startsWith(Symbols.variablesPrefix)){ arg2 =          * "?"+classResource.toString().replace(Symbols.variablesPrefix, ""); VariableAtom variable =          * (VariableAtom) classResource; if(variable.isNegative()){ arg2 = "notex(" + arg2 + ")"; } } else{          * arg2 = classResource.toString(); }          */
return|return
literal|"is("
operator|+
name|classResource
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|argument1
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

