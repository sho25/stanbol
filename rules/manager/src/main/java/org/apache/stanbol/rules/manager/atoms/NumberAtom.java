begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
package|;
end_package

begin_class
specifier|public
class|class
name|NumberAtom
extends|extends
name|NumericFunctionAtom
block|{
specifier|private
name|String
name|numberString
decl_stmt|;
specifier|public
name|NumberAtom
parameter_list|(
name|String
name|number
parameter_list|)
block|{
name|this
operator|.
name|numberString
operator|=
name|number
expr_stmt|;
block|}
specifier|public
name|String
name|getNumber
parameter_list|()
block|{
return|return
name|numberString
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|numberString
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
return|return
name|numberString
return|;
block|}
specifier|public
name|Number
name|getNumberValue
parameter_list|()
block|{
name|Number
name|number
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numberString
operator|.
name|contains
argument_list|(
literal|"\\."
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|numberString
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|+
literal|1
operator|==
name|numberString
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|number
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|numberString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|number
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|numberString
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|number
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|numberString
argument_list|)
expr_stmt|;
block|}
return|return
name|number
return|;
block|}
block|}
end_class

end_unit

