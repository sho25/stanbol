begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_comment
comment|/*  * To change this template, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLAxiom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLNamedIndividual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLOntologyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|util
operator|.
name|OWLEntityRemover
import|;
end_import

begin_comment
comment|/**  *  * @author elvio  */
end_comment

begin_class
specifier|public
class|class
name|GetRule
block|{
specifier|private
name|OWLOntology
name|owlmodel
decl_stmt|;
specifier|private
name|String
name|owlID
decl_stmt|;
specifier|private
name|String
name|owlIDrmi
decl_stmt|;
specifier|private
name|OWLOntologyManager
name|owlmanager
decl_stmt|;
specifier|private
name|OWLDataFactory
name|factory
decl_stmt|;
comment|/**     * Constructor, the input is a KReSRuleStore object.     *     * @param store {The KReSRuleStore where there are the added rules and recipes.}     */
specifier|public
name|GetRule
parameter_list|(
name|RuleStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|owlmodel
operator|=
name|store
operator|.
name|getOntology
argument_list|()
expr_stmt|;
name|this
operator|.
name|owlIDrmi
operator|=
literal|"http://kres.iks-project.eu/ontology/meta/rmi.owl#"
expr_stmt|;
name|this
operator|.
name|owlID
operator|=
name|owlmodel
operator|.
name|getOntologyID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"#"
expr_stmt|;
name|this
operator|.
name|owlmanager
operator|=
name|owlmodel
operator|.
name|getOWLOntologyManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|owlmanager
operator|.
name|getOWLDataFactory
argument_list|()
expr_stmt|;
block|}
comment|/**      * To return the IRI of the named rule with its string Body -> Head      *      * @param rulename {It is the string name of the rule}      * @return {Return an HashMap with the IRI as a key and the rule string as value.}      */
specifier|public
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|getRule
parameter_list|(
name|String
name|rulename
parameter_list|)
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|rule
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|indrule
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|rulename
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|indrule
argument_list|)
argument_list|)
condition|)
block|{
name|OWLDataProperty
name|prop
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|value
init|=
name|indrule
operator|.
name|getDataPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
name|rule
operator|.
name|put
argument_list|(
name|indrule
operator|.
name|getIRI
argument_list|()
argument_list|,
name|value
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|rulename
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
name|rule
return|;
block|}
comment|/**      * To return the IRI of the named rule with its string Body -> Head      *      * @param rulename {It is the IRI name of the rule}      * @return {Return an HashMap with the IRI as a key and the rule string as value.}      */
specifier|public
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|getRule
parameter_list|(
name|IRI
name|rulename
parameter_list|)
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|rule
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|indrule
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|rulename
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|indrule
argument_list|)
argument_list|)
condition|)
block|{
name|OWLDataProperty
name|prop
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|value
init|=
name|indrule
operator|.
name|getDataPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
name|rule
operator|.
name|put
argument_list|(
name|indrule
operator|.
name|getIRI
argument_list|()
argument_list|,
name|value
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|rulename
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
name|rule
return|;
block|}
comment|/**      * Return all the rules stored inside the ontology      *      * @return {Return an HashMap with the IRI as a key and the rule string as value.}      */
specifier|public
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|getAllRules
parameter_list|()
block|{
name|HashMap
argument_list|<
name|IRI
argument_list|,
name|String
argument_list|>
name|rule
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|OWLDataProperty
name|prop
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasBodyAndHead"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|indaxiom
init|=
name|owlmodel
operator|.
name|getIndividualsInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|indaxiom
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLNamedIndividual
name|ax
init|=
name|indaxiom
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|value
init|=
name|ax
operator|.
name|getDataPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|rule
operator|.
name|put
argument_list|(
name|ax
operator|.
name|getIRI
argument_list|()
argument_list|,
name|value
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|rule
operator|)
return|;
block|}
comment|/**      * Return all the rules of a recipe stored inside the ontology      *      * @return {Return an HashMap with the IRI as a key and the rule string as value.}      */
specifier|public
name|OWLOntology
name|getAllRulesOfARecipe
parameter_list|(
name|IRI
name|recipeIRI
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|IRI
argument_list|>
name|ruleIRIs
init|=
operator|new
name|ArrayList
argument_list|<
name|IRI
argument_list|>
argument_list|()
decl_stmt|;
name|OWLObjectProperty
name|prop
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|OWLNamedIndividual
argument_list|>
name|indaxiom
init|=
name|owlmodel
operator|.
name|getIndividualsInSignature
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|OWLOntology
name|ontlogy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ontlogy
operator|=
name|OWLManager
operator|.
name|createOWLOntologyManager
argument_list|()
operator|.
name|createOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OWLOntologyCreationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RECIPE IRI : "
operator|+
name|recipeIRI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ontlogy
operator|!=
literal|null
condition|)
block|{
name|OWLIndividual
name|ind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|recipeIRI
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLIndividual
argument_list|>
name|rules
init|=
name|ind
operator|.
name|getObjectPropertyValues
argument_list|(
name|prop
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rules length : "
operator|+
name|rules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OWLIndividual
name|rule
range|:
name|rules
control|)
block|{
name|OWLAxiom
name|axiom
init|=
name|factory
operator|.
name|getOWLObjectPropertyAssertionAxiom
argument_list|(
name|prop
argument_list|,
name|ind
argument_list|,
name|rule
argument_list|)
decl_stmt|;
name|owlmanager
operator|.
name|addAxiom
argument_list|(
name|ontlogy
argument_list|,
name|axiom
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*while(indaxiom.hasNext()){             OWLNamedIndividual ax = indaxiom.next();             Set<OWLIndividual> value = ax.getObjectPropertyValues(prop, owlmodel);             if(value != null){             	for(OWLIndividual ind : value){             		ruleIRIs.add(IRI.create(ind.toStringID()));             	}             }          }*/
return|return
name|ontlogy
return|;
block|}
comment|/**      * To get the Recipes where the rule is used.      *      * @param ruleName {The IRI of the rule}      * @return {A Vector with the IRI of the recipes.}      */
specifier|public
name|Vector
argument_list|<
name|IRI
argument_list|>
name|getRuleUsage
parameter_list|(
name|IRI
name|ruleName
parameter_list|)
block|{
name|Vector
argument_list|<
name|IRI
argument_list|>
name|ruleusage
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|OWLClass
name|ontocls
init|=
name|factory
operator|.
name|getOWLClass
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"KReSRule"
argument_list|)
argument_list|)
decl_stmt|;
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
name|OWLEntityRemover
name|remover
init|=
operator|new
name|OWLEntityRemover
argument_list|(
name|owlmanager
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|owlmodel
argument_list|)
argument_list|)
decl_stmt|;
name|OWLObjectProperty
name|hasrule
init|=
name|factory
operator|.
name|getOWLObjectProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasRule"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owlmodel
operator|.
name|containsAxiom
argument_list|(
name|factory
operator|.
name|getOWLClassAssertionAxiom
argument_list|(
name|ontocls
argument_list|,
name|ontoind
argument_list|)
argument_list|)
condition|)
block|{
name|ontoind
operator|.
name|accept
argument_list|(
name|remover
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OWLOntologyChange
argument_list|>
name|list
init|=
name|remover
operator|.
name|getChanges
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|OWLOntologyChange
argument_list|>
name|iter
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|OWLAxiom
name|ax
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getAxiom
argument_list|()
decl_stmt|;
if|if
condition|(
name|ax
operator|.
name|getObjectPropertiesInSignature
argument_list|()
operator|.
name|contains
argument_list|(
name|hasrule
argument_list|)
condition|)
block|{
name|String
index|[]
name|data
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|ax
operator|.
name|getIndividualsInSignature
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|data
operator|.
name|length
condition|;
name|s
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|data
index|[
name|s
index|]
operator|.
name|contains
argument_list|(
name|ontoind
operator|.
name|getIRI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|string
init|=
name|data
index|[
name|s
index|]
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|string
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|)
name|ruleusage
operator|.
name|add
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|remover
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
operator|(
name|ruleusage
operator|)
return|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The rule with name "
operator|+
name|ruleName
operator|+
literal|" is not inside the ontology. Pleas check the name."
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
comment|/**      * To get the description of a rule       * @param ruleName {A IRI contains the full rule name}      * @return {A string contains the description}      */
specifier|public
name|String
name|getDescription
parameter_list|(
name|IRI
name|ruleName
parameter_list|)
block|{
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|ruleName
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|lit
init|=
name|ontoind
operator|.
name|getDataPropertyValues
argument_list|(
name|description
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|string
init|=
name|lit
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
return|return
name|string
return|;
else|else
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * To get the description of a rule      * @param ruleName {A string contains the rule name}      * @return {A string contains the description}      */
specifier|public
name|String
name|getDescription
parameter_list|(
name|String
name|ruleName
parameter_list|)
block|{
name|OWLNamedIndividual
name|ontoind
init|=
name|factory
operator|.
name|getOWLNamedIndividual
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlID
operator|+
name|ruleName
argument_list|)
argument_list|)
decl_stmt|;
name|OWLDataProperty
name|description
init|=
name|factory
operator|.
name|getOWLDataProperty
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|owlIDrmi
operator|+
literal|"hasDescription"
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OWLLiteral
argument_list|>
name|lit
init|=
name|ontoind
operator|.
name|getDataPropertyValues
argument_list|(
name|description
argument_list|,
name|owlmodel
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|string
init|=
name|lit
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getLiteral
argument_list|()
decl_stmt|;
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
return|return
name|string
return|;
else|else
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

