begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. RuleParserImplConstants.java */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
package|;
end_package

begin_comment
comment|/**  * Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()  */
end_comment

begin_interface
specifier|public
interface|interface
name|RuleParserImplConstants
block|{
comment|/** End of File. */
name|int
name|EOF
init|=
literal|0
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LARROW
init|=
literal|8
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|COLON
init|=
literal|9
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|EQUAL
init|=
literal|10
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|AND
init|=
literal|11
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|COMMA
init|=
literal|12
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|SAME
init|=
literal|13
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|DIFFERENT
init|=
literal|14
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LESSTHAN
init|=
literal|15
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|GREATERTHAN
init|=
literal|16
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LESSEQUALTHAN
init|=
literal|17
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|GREATEREQUALTHAN
init|=
literal|18
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|IS
init|=
literal|19
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NEW_IRI
init|=
literal|20
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NEW_LITERAL
init|=
literal|21
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LENGTH
init|=
literal|22
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|SUBSTRING
init|=
literal|23
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|UPPERCASE
init|=
literal|24
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LOWERCASE
init|=
literal|25
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|STARTS_WITH
init|=
literal|26
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|ENDS_WITH
init|=
literal|27
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LET
init|=
literal|28
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|CONCAT
init|=
literal|29
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|HAS
init|=
literal|30
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|VALUES
init|=
literal|31
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NOTEX
init|=
literal|32
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|PLUS
init|=
literal|33
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|MINUS
init|=
literal|34
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|MULTIPLIED
init|=
literal|35
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|DIVIDED
init|=
literal|36
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NOT
init|=
literal|37
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NAMESPACE
init|=
literal|38
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LOCALNAME
init|=
literal|39
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|STR
init|=
literal|40
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|APOX
init|=
literal|41
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|UNION
init|=
literal|42
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|CREATE_LABEL
init|=
literal|43
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|PROP
init|=
literal|44
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|IS_BLANK
init|=
literal|45
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LPAR
init|=
literal|46
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|RPAR
init|=
literal|47
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|DQUOT
init|=
literal|48
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|LQUAD
init|=
literal|49
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|RQUAD
init|=
literal|50
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|NUM
init|=
literal|51
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|VAR
init|=
literal|52
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|VARIABLE
init|=
literal|53
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|URI
init|=
literal|54
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|STRING
init|=
literal|55
decl_stmt|;
comment|/** RegularExpression Id. */
name|int
name|BNODE
init|=
literal|56
decl_stmt|;
comment|/** Lexical state. */
name|int
name|DEFAULT
init|=
literal|0
decl_stmt|;
comment|/** Lexical state. */
name|int
name|WithinComment
init|=
literal|1
decl_stmt|;
comment|/** Literal token values. */
name|String
index|[]
name|tokenImage
init|=
block|{
literal|"<EOF>"
block|,
literal|"\" \""
block|,
literal|"\"\\r\""
block|,
literal|"\"\\t\""
block|,
literal|"\"\\n\""
block|,
literal|"\"/*\""
block|,
literal|"\"*/\""
block|,
literal|"<token of kind 7>"
block|,
literal|"\"->\""
block|,
literal|"\":\""
block|,
literal|"\"=\""
block|,
literal|"\".\""
block|,
literal|"\",\""
block|,
literal|"\"same\""
block|,
literal|"\"different\""
block|,
literal|"\"lt\""
block|,
literal|"\"gt\""
block|,
literal|"\"leq\""
block|,
literal|"\"geq\""
block|,
literal|"\"is\""
block|,
literal|"\"newIRI\""
block|,
literal|"\"newLiteral\""
block|,
literal|"\"length\""
block|,
literal|"\"substring\""
block|,
literal|"\"upperCase\""
block|,
literal|"\"lowerCase\""
block|,
literal|"\"startsWith\""
block|,
literal|"\"endsWith\""
block|,
literal|"\"let\""
block|,
literal|"\"concat\""
block|,
literal|"\"has\""
block|,
literal|"\"values\""
block|,
literal|"\"notex\""
block|,
literal|"\"sum\""
block|,
literal|"\"sub\""
block|,
literal|"\"mult\""
block|,
literal|"\"div\""
block|,
literal|"\"not\""
block|,
literal|"\"namespace\""
block|,
literal|"\"localname\""
block|,
literal|"\"str\""
block|,
literal|"\"^\""
block|,
literal|"\"union\""
block|,
literal|"\"createLabel\""
block|,
literal|"\"prop\""
block|,
literal|"\"isBlank\""
block|,
literal|"\"(\""
block|,
literal|"\")\""
block|,
literal|"\"\\\"\""
block|,
literal|"\"[\""
block|,
literal|"\"]\""
block|,
literal|"<NUM>"
block|,
literal|"<VAR>"
block|,
literal|"<VARIABLE>"
block|,
literal|"<URI>"
block|,
literal|"<STRING>"
block|,
literal|"<BNODE>"
block|,}
decl_stmt|;
block|}
end_interface

end_unit

