begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|AtomList
import|;
end_import

begin_class
specifier|public
class|class
name|UnionAtom
implements|implements
name|RuleAtom
block|{
specifier|private
name|AtomList
name|atomList1
decl_stmt|;
specifier|private
name|AtomList
name|atomList2
decl_stmt|;
specifier|public
name|UnionAtom
parameter_list|(
name|AtomList
name|atomList1
parameter_list|,
name|AtomList
name|atomList2
parameter_list|)
block|{
name|this
operator|.
name|atomList1
operator|=
name|atomList1
expr_stmt|;
name|this
operator|.
name|atomList2
operator|=
name|atomList2
expr_stmt|;
block|}
specifier|public
name|AtomList
name|getAtomList1
parameter_list|()
block|{
return|return
name|atomList1
return|;
block|}
specifier|public
name|AtomList
name|getAtomList2
parameter_list|()
block|{
return|return
name|atomList2
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|scope1
init|=
literal|""
decl_stmt|;
for|for
control|(
name|RuleAtom
name|ruleAtom
range|:
name|atomList1
control|)
block|{
if|if
condition|(
operator|!
name|scope1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scope1
operator|+=
literal|" . "
expr_stmt|;
block|}
name|scope1
operator|+=
name|ruleAtom
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|scope2
init|=
literal|""
decl_stmt|;
for|for
control|(
name|RuleAtom
name|ruleAtom
range|:
name|atomList2
control|)
block|{
if|if
condition|(
operator|!
name|scope2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scope2
operator|+=
literal|" . "
expr_stmt|;
block|}
name|scope2
operator|+=
name|ruleAtom
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
literal|"union("
operator|+
name|scope1
operator|+
literal|", "
operator|+
name|scope2
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|prettyPrint
parameter_list|()
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"the union of the set of conjunctive atoms {"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RuleAtom
name|ruleAtom
range|:
name|atomList1
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
name|ruleAtom
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"} with the set of conjunctive atoms {"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|RuleAtom
name|ruleAtom
range|:
name|atomList2
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
name|ruleAtom
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

