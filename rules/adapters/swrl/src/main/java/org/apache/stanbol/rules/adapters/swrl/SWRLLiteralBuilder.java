begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|swrl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|URIResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|TypedLiteralAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLIArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLLiteralArgument
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|XSD
import|;
end_import

begin_comment
comment|/**  * Return a {@link SWRLIArgument} from a literal object represented according to Stanbol rules.  *   * @author anuzzolese  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SWRLLiteralBuilder
block|{
comment|/**      * Restrict instantiation      */
specifier|private
name|SWRLLiteralBuilder
parameter_list|()
block|{}
specifier|public
specifier|static
name|SWRLLiteralArgument
name|getSWRLLiteral
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|OWLLiteral
name|owlLiteral
decl_stmt|;
if|if
condition|(
name|argument
operator|instanceof
name|TypedLiteralAtom
condition|)
block|{
name|TypedLiteralAtom
name|typedLiteralAtom
init|=
operator|(
name|TypedLiteralAtom
operator|)
name|argument
decl_stmt|;
name|URIResource
name|xsdType
init|=
name|typedLiteralAtom
operator|.
name|getXsdType
argument_list|()
decl_stmt|;
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xboolean
argument_list|)
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xdouble
argument_list|)
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xfloat
argument_list|)
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xsdType
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|XSD
operator|.
name|xint
argument_list|)
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|String
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
operator|(
name|String
operator|)
name|argument
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Integer
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|argument
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Double
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|argument
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Float
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|argument
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argument
operator|instanceof
name|Boolean
condition|)
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|argument
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|owlLiteral
operator|=
name|factory
operator|.
name|getOWLLiteral
argument_list|(
name|argument
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|getSWRLLiteralArgument
argument_list|(
name|owlLiteral
argument_list|)
return|;
block|}
block|}
end_class

end_unit

