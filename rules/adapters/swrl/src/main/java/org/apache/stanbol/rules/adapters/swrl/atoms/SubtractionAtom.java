begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|swrl
operator|.
name|atoms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|AbstractAdaptableAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|swrl
operator|.
name|ArgumentSWRLAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|swrl
operator|.
name|HigherOrderSWRLAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Symbols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|ExpressionAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|apibinding
operator|.
name|OWLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|IRI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|OWLDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLBuiltInAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLDArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|model
operator|.
name|SWRLRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|semanticweb
operator|.
name|owlapi
operator|.
name|vocab
operator|.
name|SWRLBuiltInsVocabulary
import|;
end_import

begin_comment
comment|/**  * It adapts any SumAtom to the op:numeric-subtract XPath function call in SWRL.  *   * @author anuzzolese  *   */
end_comment

begin_class
specifier|public
class|class
name|SubtractionAtom
extends|extends
name|AbstractAdaptableAtom
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|adapt
parameter_list|(
name|RuleAtom
name|ruleAtom
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnavailableRuleObjectException
throws|,
name|UnsupportedTypeForExportException
block|{
name|String
name|mul_result
init|=
literal|"subtraction_result"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|SubtractionAtom
name|tmp
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|SubtractionAtom
operator|)
name|ruleAtom
decl_stmt|;
name|ExpressionAtom
name|argument1
init|=
name|tmp
operator|.
name|getNumericFunctionAtom1
argument_list|()
decl_stmt|;
name|ExpressionAtom
name|argument2
init|=
name|tmp
operator|.
name|getNumericFunctionAtom2
argument_list|()
decl_stmt|;
name|OWLDataFactory
name|factory
init|=
name|OWLManager
operator|.
name|getOWLDataFactory
argument_list|()
decl_stmt|;
name|SWRLAtom
name|swrlAtom1
init|=
operator|(
name|SWRLAtom
operator|)
name|adapter
operator|.
name|adaptTo
argument_list|(
name|argument1
argument_list|,
name|SWRLRule
operator|.
name|class
argument_list|)
decl_stmt|;
name|SWRLAtom
name|swrlAtom2
init|=
operator|(
name|SWRLAtom
operator|)
name|adapter
operator|.
name|adaptTo
argument_list|(
name|argument2
argument_list|,
name|SWRLRule
operator|.
name|class
argument_list|)
decl_stmt|;
name|SWRLDArgument
name|swrldArgument1
init|=
name|factory
operator|.
name|getSWRLVariable
argument_list|(
name|IRI
operator|.
name|create
argument_list|(
name|Symbols
operator|.
name|variablesPrefix
operator|+
name|mul_result
argument_list|)
argument_list|)
decl_stmt|;
name|SWRLDArgument
name|swrldArgument2
decl_stmt|;
name|SWRLDArgument
name|swrldArgument3
decl_stmt|;
name|List
argument_list|<
name|SWRLAtom
argument_list|>
name|listOfArguments
init|=
operator|new
name|ArrayList
argument_list|<
name|SWRLAtom
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|swrlAtom1
operator|instanceof
name|HigherOrderSWRLAtom
condition|)
block|{
name|swrldArgument2
operator|=
operator|(
operator|(
name|HigherOrderSWRLAtom
operator|)
name|swrlAtom1
operator|)
operator|.
name|getBindableArgument
argument_list|()
expr_stmt|;
name|listOfArguments
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|HigherOrderSWRLAtom
operator|)
name|swrlAtom1
operator|)
operator|.
name|getAtoms
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|swrlAtom1
operator|instanceof
name|ArgumentSWRLAtom
condition|)
block|{
name|SWRLArgument
name|swrlArgument
init|=
operator|(
operator|(
name|ArgumentSWRLAtom
operator|)
name|swrlAtom1
operator|)
operator|.
name|getSwrlArgument
argument_list|()
decl_stmt|;
name|swrldArgument2
operator|=
operator|(
name|SWRLDArgument
operator|)
name|swrlArgument
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
argument_list|(
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|swrlAtom2
operator|instanceof
name|HigherOrderSWRLAtom
condition|)
block|{
name|swrldArgument3
operator|=
operator|(
operator|(
name|HigherOrderSWRLAtom
operator|)
name|swrlAtom2
operator|)
operator|.
name|getBindableArgument
argument_list|()
expr_stmt|;
name|listOfArguments
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|HigherOrderSWRLAtom
operator|)
name|swrlAtom2
operator|)
operator|.
name|getAtoms
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|swrlAtom2
operator|instanceof
name|ArgumentSWRLAtom
condition|)
block|{
name|SWRLArgument
name|swrlArgument
init|=
operator|(
operator|(
name|ArgumentSWRLAtom
operator|)
name|swrlAtom2
operator|)
operator|.
name|getSwrlArgument
argument_list|()
decl_stmt|;
name|swrldArgument3
operator|=
operator|(
name|SWRLDArgument
operator|)
name|swrlArgument
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
argument_list|(
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SWRLDArgument
argument_list|>
name|swrldArguments
init|=
operator|new
name|ArrayList
argument_list|<
name|SWRLDArgument
argument_list|>
argument_list|()
decl_stmt|;
name|swrldArguments
operator|.
name|add
argument_list|(
name|swrldArgument1
argument_list|)
expr_stmt|;
name|swrldArguments
operator|.
name|add
argument_list|(
name|swrldArgument2
argument_list|)
expr_stmt|;
name|swrldArguments
operator|.
name|add
argument_list|(
name|swrldArgument3
argument_list|)
expr_stmt|;
name|SWRLBuiltInAtom
name|swrlBuiltInAtom
init|=
name|factory
operator|.
name|getSWRLBuiltInAtom
argument_list|(
name|SWRLBuiltInsVocabulary
operator|.
name|SUBTRACT
operator|.
name|getIRI
argument_list|()
argument_list|,
name|swrldArguments
argument_list|)
decl_stmt|;
name|listOfArguments
operator|.
name|add
argument_list|(
name|swrlBuiltInAtom
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
operator|new
name|HigherOrderSWRLAtom
argument_list|(
name|swrldArgument1
argument_list|,
name|listOfArguments
argument_list|)
return|;
block|}
block|}
end_class

end_unit

