begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|sparql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|AbstractRuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|AdaptableAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Adaptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdaptersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|SPARQLObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The SPARQL adapter.<br/>  * This class implements the interface {@link RuleAdapter} and allows to adapt Stanbol recipes to object of  * the {@link SPARQLObject}. This class returns the string serialization of the SPARQL query throw the methos  * {@link SPARQLObject#getObject()}.<br/>  *   * @author anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|RuleAdapter
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SPARQLAdapter
extends|extends
name|AbstractRuleAdapter
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|ARTIFACT
init|=
literal|"org.apache.stanbol.rules.adapters.sparql.atoms"
decl_stmt|;
annotation|@
name|Reference
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
name|RuleAdaptersFactory
name|ruleAdaptersFactory
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRecipeTo
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
block|{
name|List
argument_list|<
name|SPARQLObject
argument_list|>
name|sparqlObjects
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SPARQLObject
operator|.
name|class
condition|)
block|{
name|RuleList
name|ruleList
init|=
name|recipe
operator|.
name|getRuleList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Rule
argument_list|>
name|ruleIterator
init|=
name|ruleList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|sparqlObjects
operator|=
operator|new
name|ArrayList
argument_list|<
name|SPARQLObject
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|ruleIterator
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sparqlObjects
operator|.
name|add
argument_list|(
operator|(
name|SPARQLObject
operator|)
name|adaptRuleTo
argument_list|(
name|ruleIterator
operator|.
name|next
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedTypeForExportException
argument_list|(
literal|"The SPARQL Export Provider does not support the selected serialization : "
operator|+
name|type
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|sparqlObjects
return|;
block|}
comment|/*      * public<T> T exportRecipe(String recipeID, Class<T> type) throws UnsupportedTypeForExportException,      * UnavailableRuleObjectException, NoSuchRecipeException {      *       *       * Recipe recipe; try { recipe = ruleStore.getRecipe(IRI.create(recipeID));      *       * return exportRecipe(recipe, type); } catch (NoSuchRecipeException e) { throw e; }      *       *       * }      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRuleTo
parameter_list|(
name|Rule
name|rule
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
block|{
name|String
name|sparql
init|=
literal|"CONSTRUCT {"
decl_stmt|;
name|boolean
name|firstIte
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RuleAtom
name|ruleAtom
range|:
name|rule
operator|.
name|getHead
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstIte
condition|)
block|{
name|sparql
operator|+=
literal|" . "
expr_stmt|;
block|}
name|firstIte
operator|=
literal|false
expr_stmt|;
name|sparql
operator|+=
operator|(
operator|(
name|SPARQLObject
operator|)
name|adaptRuleAtomTo
argument_list|(
name|ruleAtom
argument_list|,
name|type
argument_list|)
operator|)
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
name|sparql
operator|+=
literal|"} "
expr_stmt|;
name|sparql
operator|+=
literal|"WHERE {"
expr_stmt|;
name|firstIte
operator|=
literal|true
expr_stmt|;
name|ArrayList
argument_list|<
name|SPARQLObject
argument_list|>
name|sparqlObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|SPARQLObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RuleAtom
name|ruleAtom
range|:
name|rule
operator|.
name|getBody
argument_list|()
control|)
block|{
name|SPARQLObject
name|tmp
init|=
operator|(
operator|(
name|SPARQLObject
operator|)
name|adaptRuleAtomTo
argument_list|(
name|ruleAtom
argument_list|,
name|type
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|SPARQLNot
condition|)
block|{
name|sparqlObjects
operator|.
name|add
argument_list|(
operator|(
name|SPARQLNot
operator|)
name|tmp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tmp
operator|instanceof
name|SPARQLComparison
condition|)
block|{
name|sparqlObjects
operator|.
name|add
argument_list|(
operator|(
name|SPARQLComparison
operator|)
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|firstIte
condition|)
block|{
name|sparql
operator|+=
literal|" . "
expr_stmt|;
block|}
else|else
block|{
name|firstIte
operator|=
literal|false
expr_stmt|;
block|}
name|sparql
operator|+=
name|tmp
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
block|}
name|firstIte
operator|=
literal|true
expr_stmt|;
name|String
name|optional
init|=
literal|""
decl_stmt|;
name|String
name|filter
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SPARQLObject
name|sparqlObj
range|:
name|sparqlObjects
control|)
block|{
if|if
condition|(
name|sparqlObj
operator|instanceof
name|SPARQLNot
condition|)
block|{
name|SPARQLNot
name|sparqlNot
init|=
operator|(
name|SPARQLNot
operator|)
name|sparqlObj
decl_stmt|;
if|if
condition|(
operator|!
name|firstIte
condition|)
block|{
name|optional
operator|+=
literal|" . "
expr_stmt|;
block|}
else|else
block|{
name|firstIte
operator|=
literal|false
expr_stmt|;
block|}
name|optional
operator|+=
name|sparqlNot
operator|.
name|getObject
argument_list|()
expr_stmt|;
name|String
index|[]
name|filters
init|=
name|sparqlNot
operator|.
name|getFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|theFilter
range|:
name|filters
control|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filter
operator|+=
literal|"&& "
expr_stmt|;
block|}
name|filter
operator|+=
name|theFilter
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sparqlObj
operator|instanceof
name|SPARQLComparison
condition|)
block|{
name|SPARQLComparison
name|sparqlDifferent
init|=
operator|(
name|SPARQLComparison
operator|)
name|sparqlObj
decl_stmt|;
name|String
name|theFilter
init|=
name|sparqlDifferent
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filter
operator|+=
literal|"&& "
expr_stmt|;
block|}
name|filter
operator|+=
name|theFilter
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|optional
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sparql
operator|+=
literal|" . OPTIONAL { "
operator|+
name|optional
operator|+
literal|" } "
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sparql
operator|+=
literal|" . FILTER ( "
operator|+
name|filter
operator|+
literal|" ) "
expr_stmt|;
block|}
name|sparql
operator|+=
literal|"}"
expr_stmt|;
return|return
operator|(
name|T
operator|)
operator|new
name|SPARQLQuery
argument_list|(
name|sparql
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRuleAtomTo
parameter_list|(
name|RuleAtom
name|ruleAtom
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
block|{
if|if
condition|(
name|type
operator|==
name|SPARQLObject
operator|.
name|class
condition|)
block|{
name|String
name|className
init|=
name|ruleAtom
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|canonicalName
init|=
name|ARTIFACT
operator|+
literal|"."
operator|+
name|className
decl_stmt|;
try|try
block|{
comment|// ClassLoader loader = Thread.currentThread().getContextClassLoader();
comment|// Class<AdaptableAtom> sparqlAtomClass =
comment|// (Class<AdaptableAtom>)loader.loadClass(canonicalName);
name|Class
argument_list|<
name|AdaptableAtom
argument_list|>
name|sparqlAtomClass
init|=
operator|(
name|Class
argument_list|<
name|AdaptableAtom
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|canonicalName
argument_list|)
decl_stmt|;
try|try
block|{
name|AdaptableAtom
name|sparqlAtom
init|=
name|sparqlAtomClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|sparqlAtom
operator|.
name|setRuleAdapter
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|sparqlAtom
operator|.
name|adapt
argument_list|(
name|ruleAtom
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuleAtomCallExeption
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*      * @Override public<T> boolean canExportRecipe(Class<T> type) { // TODO Auto-generated method stub return      * false; }      */
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// context.getBundleContext().addServiceListener((RuleAdaptersFactoryImpl<SPARQLObject>)ruleAdaptersFactory);
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|SPARQLAdapter
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"SPARQL Export Provider for Stanbol Rules  is active"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|SPARQLAdapter
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|getExportClass
parameter_list|()
block|{
return|return
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|SPARQLObject
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|boolean
name|canAdaptTo
parameter_list|(
name|Adaptable
name|adaptable
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|SPARQLObject
operator|.
name|class
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

