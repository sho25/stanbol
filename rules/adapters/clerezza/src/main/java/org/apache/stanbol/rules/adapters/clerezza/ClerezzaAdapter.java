begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|clerezza
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|ConstructQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|TriplePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|impl
operator|.
name|SimpleConstructQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|sparql
operator|.
name|query
operator|.
name|impl
operator|.
name|SimpleGroupGraphPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|AbstractRuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|AdaptableAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Adaptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdaptersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|util
operator|.
name|RuleList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|KB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|RecipeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|parse
operator|.
name|RuleParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecution
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryExecutionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|QueryFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|query
operator|.
name|Syntax
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|util
operator|.
name|FileManager
import|;
end_import

begin_comment
comment|/**  *   * The Rule Adapter for Clerezza.<br/>  * This adapter allows to convert Stanbol Rules to Clerezza {@link ConstructQuery} objects.  *   * @author anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|RuleAdapter
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ClerezzaAdapter
extends|extends
name|AbstractRuleAdapter
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ARTIFACT
init|=
literal|"org.apache.stanbol.rules.adapters.clerezza.atoms"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|RuleStore
name|ruleStore
decl_stmt|;
annotation|@
name|Reference
name|RuleAdaptersFactory
name|ruleAdaptersFactory
decl_stmt|;
name|ComponentContext
name|componentContext
decl_stmt|;
comment|/**      * For OSGi environments.      */
specifier|public
name|ClerezzaAdapter
parameter_list|()
block|{              }
comment|/**      * For non-OSGi environments.      */
specifier|public
name|ClerezzaAdapter
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|,
name|RuleStore
name|ruleStore
parameter_list|,
name|RuleAdaptersFactory
name|ruleAdaptersFactory
parameter_list|)
block|{
name|this
operator|.
name|ruleStore
operator|=
name|ruleStore
expr_stmt|;
name|this
operator|.
name|ruleAdaptersFactory
operator|=
name|ruleAdaptersFactory
expr_stmt|;
try|try
block|{
name|activate
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load configuration"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|ruleAdaptersFactory
operator|.
name|addRuleAdapter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to add the adapter to the registry."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRecipeTo
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
block|{
name|List
argument_list|<
name|ConstructQuery
argument_list|>
name|constructQueries
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ConstructQuery
operator|.
name|class
condition|)
block|{
name|constructQueries
operator|=
operator|new
name|ArrayList
argument_list|<
name|ConstructQuery
argument_list|>
argument_list|()
expr_stmt|;
name|RuleList
name|ruleList
init|=
name|recipe
operator|.
name|getRuleList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Rule
argument_list|>
name|ruleIterator
init|=
name|ruleList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|ruleIterator
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|constructQueries
operator|.
name|add
argument_list|(
operator|(
name|ConstructQuery
operator|)
name|adaptRuleTo
argument_list|(
name|ruleIterator
operator|.
name|next
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedTypeForExportException
argument_list|(
literal|"The adapter for Clerezza does not support the selected serialization : "
operator|+
name|type
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|constructQueries
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRuleTo
parameter_list|(
name|Rule
name|rule
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
block|{
name|Set
argument_list|<
name|TriplePattern
argument_list|>
name|triplePatterns
init|=
operator|new
name|HashSet
argument_list|<
name|TriplePattern
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RuleAtom
argument_list|>
name|it
init|=
name|rule
operator|.
name|getBody
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RuleAtom
name|ruleAtom
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClerezzaSparqlObject
name|clerezzaSparqlObject
init|=
literal|null
decl_stmt|;
name|clerezzaSparqlObject
operator|=
operator|(
name|ClerezzaSparqlObject
operator|)
name|adaptRuleAtomTo
argument_list|(
name|ruleAtom
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Object
name|clerezzaObj
init|=
name|clerezzaSparqlObject
operator|.
name|getClerezzaObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|clerezzaObj
operator|instanceof
name|TriplePattern
condition|)
block|{
name|triplePatterns
operator|.
name|add
argument_list|(
operator|(
name|TriplePattern
operator|)
name|clerezzaObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clerezzaObj
operator|instanceof
name|Expression
condition|)
block|{
name|expressions
operator|.
name|add
argument_list|(
operator|(
name|Expression
operator|)
name|clerezzaObj
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleGroupGraphPattern
name|groupGraphPattern
init|=
operator|new
name|SimpleGroupGraphPattern
argument_list|()
decl_stmt|;
name|groupGraphPattern
operator|.
name|addTriplePatterns
argument_list|(
name|triplePatterns
argument_list|)
expr_stmt|;
for|for
control|(
name|Expression
name|expression
range|:
name|expressions
control|)
block|{
name|groupGraphPattern
operator|.
name|addConstraint
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
name|triplePatterns
operator|=
operator|new
name|HashSet
argument_list|<
name|TriplePattern
argument_list|>
argument_list|()
expr_stmt|;
name|it
operator|=
name|rule
operator|.
name|getHead
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RuleAtom
name|ruleAtom
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClerezzaSparqlObject
name|clerezzaSparqlObject
init|=
operator|(
name|ClerezzaSparqlObject
operator|)
name|adaptRuleAtomTo
argument_list|(
name|ruleAtom
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|triplePatterns
operator|.
name|add
argument_list|(
operator|(
name|TriplePattern
operator|)
name|clerezzaSparqlObject
operator|.
name|getClerezzaObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SimpleConstructQuery
name|constructQuery
init|=
operator|new
name|SimpleConstructQuery
argument_list|(
name|triplePatterns
argument_list|)
decl_stmt|;
name|constructQuery
operator|.
name|setQueryPattern
argument_list|(
name|groupGraphPattern
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|constructQuery
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRuleAtomTo
parameter_list|(
name|RuleAtom
name|ruleAtom
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
block|{
if|if
condition|(
name|type
operator|==
name|ConstructQuery
operator|.
name|class
condition|)
block|{
comment|//ClassLoader loader = Thread.currentThread().getContextClassLoader();
comment|//log.info("loader : " + loader);
name|String
name|className
init|=
name|ruleAtom
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|canonicalName
init|=
name|ARTIFACT
operator|+
literal|"."
operator|+
name|className
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|AdaptableAtom
argument_list|>
name|clerezzaAtomClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|componentContext
operator|!=
literal|null
condition|)
block|{
comment|// in OSGi environment
name|clerezzaAtomClass
operator|=
name|componentContext
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|loadClass
argument_list|(
name|canonicalName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// in non-OSGi environment
name|clerezzaAtomClass
operator|=
operator|(
name|Class
argument_list|<
name|AdaptableAtom
argument_list|>
operator|)
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|canonicalName
argument_list|)
expr_stmt|;
block|}
comment|/* Class<AdaptableAtom> clerezzaAtomClass = (Class<AdaptableAtom>) loader                         .loadClass(canonicalName);                         */
try|try
block|{
name|AdaptableAtom
name|clerezzaAtom
init|=
name|clerezzaAtomClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|clerezzaAtom
operator|.
name|setRuleAdapter
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|clerezzaAtom
operator|.
name|adapt
argument_list|(
name|ruleAtom
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ClerezzaAdapter
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|componentContext
operator|=
name|context
expr_stmt|;
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"The Clerezza adapter for Stanbol Rules  is active"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|ClerezzaAdapter
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|getExportClass
parameter_list|()
block|{
return|return
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|ConstructQuery
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|boolean
name|canAdaptTo
parameter_list|(
name|Adaptable
name|adaptable
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|ConstructQuery
operator|.
name|class
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|RuleAdapter
name|ruleAdapter
init|=
operator|new
name|ClerezzaAdapter
argument_list|()
decl_stmt|;
try|try
block|{
name|KB
name|kb
init|=
name|RuleParserImpl
operator|.
name|parse
argument_list|(
literal|"http://sssw.org/2012/rules/"
argument_list|,
operator|new
name|FileInputStream
argument_list|(
literal|"/Users/mac/Documents/CNR/SSSW2012/construct/exercise3"
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rules: "
operator|+
name|kb
operator|.
name|getRuleList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Recipe
name|recipe
init|=
operator|new
name|RecipeImpl
argument_list|(
operator|new
name|UriRef
argument_list|(
literal|"http://sssw.org/2012/rules/"
argument_list|)
argument_list|,
literal|"Recipe"
argument_list|,
name|kb
operator|.
name|getRuleList
argument_list|()
argument_list|)
decl_stmt|;
comment|//List<ConstructQuery> jenaRules = (List<ConstructQuery>) ruleAdapter.adaptTo(recipe, ConstructQuery.class);
name|String
name|rules
init|=
literal|"[ Exercise1: (http://dbpedia.org/resource/Madrid http://dbpedia.org/ontology/locationOf ?location) (?location rdf:type http://dbpedia.org/ontology/Museum) (?location http://dbpedia.org/ontology/numberOfVisitors ?visitors) greaterThan(?visitors '2000000'^^http://www.w3.org/2001/XMLSchema#integer) -> (?location rdf:type http://www.mytravels.com/Itinerary/MadridItinerary) ]"
decl_stmt|;
comment|//List<com.hp.hpl.jena.reasoner.rulesys.Rule> jenaRules = com.hp.hpl.jena.reasoner.rulesys.Rule.parseRules(rules);
name|String
name|spqral
init|=
literal|"CONSTRUCT "
operator|+
literal|"{ ?city a<http://www.mytravels.com/Itinerary/MovieCityItinerary> . "
operator|+
literal|"   ?city<http://www.w3.org/2000/01/rdf-schema#label> ?cLabel . "
operator|+
literal|"   ?event a<http://linkedevents.org/ontology/Event> . "
operator|+
literal|"   ?event<http://linkedevents.org/ontology/atPlace> ?location . "
operator|+
literal|"   ?location<http://www.w3.org/2000/01/rdf-schema#label> ?lLabel . "
operator|+
literal|"   ?location<http://www.w3.org/2002/07/owl#sameAs> ?city"
operator|+
literal|"} "
operator|+
literal|"WHERE "
operator|+
literal|"{ "
operator|+
literal|"   ?city a<http://www.mytravels.com/Itinerary/MovieCityItinerary> . "
operator|+
literal|"   ?city<http://www.w3.org/2000/01/rdf-schema#label> ?cLabel . "
operator|+
literal|"   ?event a<http://linkedevents.org/ontology/Event> . "
operator|+
literal|"   ?event<http://linkedevents.org/ontology/atPlace> ?location . "
operator|+
literal|"   ?location<http://www.w3.org/2000/01/rdf-schema#label> ?lLabel . "
operator|+
literal|"   FILTER(?lLabel = ?cLabel) "
operator|+
literal|"}"
decl_stmt|;
name|Model
name|m
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
name|Model
name|model
init|=
name|FileManager
operator|.
name|get
argument_list|()
operator|.
name|loadModel
argument_list|(
literal|"/Users/mac/Documents/CNR/SSSW2012/datasets_new/Exercise5_tmp.rdf"
argument_list|)
decl_stmt|;
comment|//for(ConstructQuery constructQuery : jenaRules){
comment|//Query query = QueryFactory.create(constructQuery.toString(), Syntax.syntaxARQ);
name|Query
name|query
init|=
name|QueryFactory
operator|.
name|create
argument_list|(
name|spqral
argument_list|,
name|Syntax
operator|.
name|syntaxARQ
argument_list|)
decl_stmt|;
name|QueryExecution
name|queryExecution
init|=
name|QueryExecutionFactory
operator|.
name|create
argument_list|(
name|query
argument_list|,
name|model
argument_list|)
decl_stmt|;
comment|//System.out.println(constructQuery.toString());
name|m
operator|.
name|add
argument_list|(
name|queryExecution
operator|.
name|execConstruct
argument_list|()
argument_list|)
expr_stmt|;
comment|//}
name|FileOutputStream
name|max
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"/Users/mac/Documents/CNR/SSSW2012/datasets_new/example5.rdf"
argument_list|)
decl_stmt|;
name|m
operator|.
name|write
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|/*catch (RuleAtomCallExeption e) {             // TODO Auto-generated catch block             e.printStackTrace();         } catch (UnavailableRuleObjectException e) {             // TODO Auto-generated catch block             e.printStackTrace();         } catch (UnsupportedTypeForExportException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }*/
block|}
block|}
end_class

end_unit

