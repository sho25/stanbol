begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Adaptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Recipe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_comment
comment|/**  * Thi abstract class implements the method<code>adaptTo</code>  *   * and introduced new methods that should be implemented by concrete adapters, i.e.,:  *<ul>  *<li><code>adaptRecipeTo</code></li>  *<li><code>adaptRuleTo</code></li>  *<li><code>adaptRuleAtomTo</code></li>  *</ul>  *   * @author anuzzolese  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRuleAdapter
implements|implements
name|RuleAdapter
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptTo
parameter_list|(
name|Adaptable
name|adaptable
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnavailableRuleObjectException
throws|,
name|UnsupportedTypeForExportException
block|{
if|if
condition|(
name|adaptable
operator|instanceof
name|Recipe
condition|)
block|{
return|return
name|adaptRecipeTo
argument_list|(
operator|(
name|Recipe
operator|)
name|adaptable
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|adaptable
operator|instanceof
name|Rule
condition|)
block|{
return|return
name|adaptRuleTo
argument_list|(
operator|(
name|Rule
operator|)
name|adaptable
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|adaptable
operator|instanceof
name|RuleAtom
condition|)
block|{
return|return
name|adaptRuleAtomTo
argument_list|(
operator|(
name|RuleAtom
operator|)
name|adaptable
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnavailableRuleObjectException
argument_list|(
literal|"The adaptable class "
operator|+
name|adaptable
operator|.
name|getClass
argument_list|()
operator|+
literal|" is not supported by the adapter "
operator|+
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * It allows to adapt a {@link Recipe} object passed as first argument to an instance of the class passed      * as second argument.      *       * @param<T>      * @param recipe      *            {@link Recipe}      * @param type      *            {@link Class}      * @return the<code>recipe</code> adapted to {@link Class}<code>type</code>      * @throws RuleAtomCallExeption      * @throws UnsupportedTypeForExportException      * @throws UnavailableRuleObjectException      */
specifier|protected
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRecipeTo
parameter_list|(
name|Recipe
name|recipe
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
function_decl|;
comment|/**      *       * It allows to adapt a {@link Rule} object passed as first argument to an instance of the class passed as      * second argument.      *       * @param<T>      * @param rule      *            {@link Rule}      * @param type      *            {@link Class}      * @return the<code>rule</code> adapted to the {@link Class}<code>type</code>      * @throws RuleAtomCallExeption      * @throws UnsupportedTypeForExportException      * @throws UnavailableRuleObjectException      */
specifier|protected
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRuleTo
parameter_list|(
name|Rule
name|rule
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
function_decl|;
comment|/**      *       * It allows to adapt a {@link RuleAtom} object passed as first argument to an instance of the class      * passed as second argument.      *       * @param<T>      * @param ruleAtom      *            {@link RuleAtom}      * @param type      *            {@link Class}      * @return the<code>ruleAtom</code> adapted to the {@link Class}<code>type</code>      * @throws RuleAtomCallExeption      * @throws UnsupportedTypeForExportException      * @throws UnavailableRuleObjectException      */
specifier|protected
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|adaptRuleAtomTo
parameter_list|(
name|RuleAtom
name|ruleAtom
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnsupportedTypeForExportException
throws|,
name|UnavailableRuleObjectException
function_decl|;
block|}
end_class

end_unit

