begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAdaptersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A concrete implementation of a {@link RuleAdaptersFactory}.  *   * @author anuzzolese  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|RuleAdaptersFactory
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RuleAdaptersFactoryImpl
implements|implements
name|RuleAdaptersFactory
implements|,
name|ServiceListener
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|RuleAdapter
argument_list|>
name|ruleAdapters
decl_stmt|;
specifier|private
name|ComponentContext
name|componentContext
decl_stmt|;
specifier|public
name|RuleAdaptersFactoryImpl
parameter_list|()
block|{
name|ruleAdapters
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|RuleAdapter
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Used to configure an instance within an OSGi container.      *       * @throws IOException      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|componentContext
operator|=
name|context
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|RuleAdaptersFactoryImpl
operator|.
name|class
operator|+
literal|" activate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No valid"
operator|+
name|ComponentContext
operator|.
name|class
operator|+
literal|" parsed in activate!"
argument_list|)
throw|;
block|}
name|activate
argument_list|(
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be called within both OSGi and non-OSGi environments.      *       * @param configuration      * @throws IOException      */
specifier|protected
name|void
name|activate
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"RuleExportServiceManager is active"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in "
operator|+
name|RuleAdaptersFactoryImpl
operator|.
name|class
operator|+
literal|" deactivate with context "
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|ServiceReference
name|serviceReference
init|=
name|event
operator|.
name|getServiceReference
argument_list|()
decl_stmt|;
name|Object
name|service
init|=
name|componentContext
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|instanceof
name|RuleAdapter
condition|)
block|{
name|RuleAdapter
name|RuleAdapter
init|=
operator|(
name|RuleAdapter
operator|)
name|componentContext
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ServiceEvent
operator|.
name|MODIFIED
case|:
try|try
block|{
name|removeRuleAdapter
argument_list|(
name|RuleAdapter
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removed Rule Adapter "
operator|+
name|RuleAdapter
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|addRuleAdapter
argument_list|(
name|RuleAdapter
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Added Rule Adapter "
operator|+
name|RuleAdapter
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unavailable Rule Object "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ServiceEvent
operator|.
name|REGISTERED
case|:
try|try
block|{
name|addRuleAdapter
argument_list|(
name|RuleAdapter
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Added Rule Adapter "
operator|+
name|RuleAdapter
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unavailable Rule Object "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ServiceEvent
operator|.
name|UNREGISTERING
case|:
try|try
block|{
name|removeRuleAdapter
argument_list|(
name|RuleAdapter
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removed Rule Adapter "
operator|+
name|RuleAdapter
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnavailableRuleObjectException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unavailable Rule Object "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
name|log
operator|.
name|info
argument_list|(
name|ruleAdapters
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" active rule adapters "
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RuleAdapter
argument_list|>
name|listRuleAdapters
parameter_list|()
block|{
name|List
argument_list|<
name|RuleAdapter
argument_list|>
name|ruleAdapters
init|=
operator|new
name|LinkedList
argument_list|<
name|RuleAdapter
argument_list|>
argument_list|()
decl_stmt|;
comment|//Collections.emptyList();
name|ruleAdapters
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|ruleAdapters
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ruleAdapters
return|;
block|}
annotation|@
name|Override
specifier|public
name|RuleAdapter
name|getRuleAdapter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|UnavailableRuleObjectException
block|{
return|return
name|ruleAdapters
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addRuleAdapter
parameter_list|(
name|RuleAdapter
name|ruleAdapter
parameter_list|)
throws|throws
name|UnavailableRuleObjectException
block|{
name|ruleAdapters
operator|.
name|put
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|ruleAdapter
operator|.
name|getExportClass
argument_list|()
argument_list|,
name|ruleAdapter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeRuleAdapter
parameter_list|(
name|RuleAdapter
name|ruleAdapter
parameter_list|)
throws|throws
name|UnavailableRuleObjectException
block|{
name|ruleAdapters
operator|.
name|remove
argument_list|(
name|ruleAdapter
operator|.
name|getExportClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

