begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|jena
operator|.
name|atoms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|AbstractAdaptableAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|jena
operator|.
name|HigherOrderClauseEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|adapters
operator|.
name|jena
operator|.
name|NodeClauseEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|RuleAtomCallExeption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnavailableRuleObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|base
operator|.
name|api
operator|.
name|UnsupportedTypeForExportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|IObjectAtom
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|graph
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|ClauseEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Functor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Node_RuleVariable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|reasoner
operator|.
name|rulesys
operator|.
name|Rule
import|;
end_import

begin_comment
comment|/**  * It adapts a StrAtom to the Jena strConcat functor.<br/>  * In this case the strConcat returns the concatenation of the string representation of the literal with the  * empty string.  *   * @author anuzzolese  *   */
end_comment

begin_class
specifier|public
class|class
name|StrAtom
extends|extends
name|AbstractAdaptableAtom
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|adapt
parameter_list|(
name|RuleAtom
name|ruleAtom
parameter_list|)
throws|throws
name|RuleAtomCallExeption
throws|,
name|UnavailableRuleObjectException
throws|,
name|UnsupportedTypeForExportException
block|{
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StrAtom
name|tmp
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|rules
operator|.
name|manager
operator|.
name|atoms
operator|.
name|StrAtom
operator|)
name|ruleAtom
decl_stmt|;
name|IObjectAtom
name|iObjectAtom
init|=
name|tmp
operator|.
name|getUriResource
argument_list|()
decl_stmt|;
name|ClauseEntry
name|iObjectClauseEntry
init|=
operator|(
name|ClauseEntry
operator|)
name|adapter
operator|.
name|adaptTo
argument_list|(
name|iObjectAtom
argument_list|,
name|Rule
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|iObjectClauseEntry
operator|instanceof
name|NodeClauseEntry
condition|)
block|{
name|Node
name|node
init|=
operator|(
operator|(
name|NodeClauseEntry
operator|)
name|iObjectClauseEntry
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|Node
name|emptyString
init|=
name|Node_RuleVariable
operator|.
name|createLiteral
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Node
name|bindind
init|=
name|Node_RuleVariable
operator|.
name|createVariable
argument_list|(
literal|"str_reuslt"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|emptyString
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|bindind
argument_list|)
expr_stmt|;
name|Functor
name|functor
init|=
operator|new
name|Functor
argument_list|(
literal|"strConcat"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClauseEntry
argument_list|>
name|clauseEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|ClauseEntry
argument_list|>
argument_list|()
decl_stmt|;
name|clauseEntries
operator|.
name|add
argument_list|(
name|functor
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
operator|new
name|HigherOrderClauseEntry
argument_list|(
name|node
argument_list|,
name|clauseEntries
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuleAtomCallExeption
argument_list|(
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

