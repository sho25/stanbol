begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|web
operator|.
name|utils
package|;
end_package

begin_class
specifier|public
class|class
name|RestURIHelper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ONTOLOGY
init|=
literal|"ontology"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSES
init|=
literal|"classes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDIVIDUALS
init|=
literal|"individuals"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATATYPE_PROPERTIES
init|=
literal|"datatypeProperties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBJECT_PROPERTIES
init|=
literal|"objectProperties"
decl_stmt|;
specifier|public
specifier|static
name|String
name|getOntologyHref
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
return|return
name|ONTOLOGY
operator|+
literal|"/"
operator|+
name|ontologyURI
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassHref
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|classURI
parameter_list|)
block|{
return|return
name|getOntologyHref
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"/"
operator|+
name|CLASSES
operator|+
literal|"/"
operator|+
name|expelLastSharp
argument_list|(
name|classURI
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getObjectPropertyHref
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|objectPropertyURI
parameter_list|)
block|{
return|return
name|getOntologyHref
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"/"
operator|+
name|OBJECT_PROPERTIES
operator|+
literal|"/"
operator|+
name|expelLastSharp
argument_list|(
name|objectPropertyURI
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getDatatypePropertyHref
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|datatypePropertyURI
parameter_list|)
block|{
return|return
name|getOntologyHref
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"/"
operator|+
name|DATATYPE_PROPERTIES
operator|+
literal|"/"
operator|+
name|expelLastSharp
argument_list|(
name|datatypePropertyURI
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getIndividualHref
parameter_list|(
name|String
name|ontologyURI
parameter_list|,
name|String
name|individualURI
parameter_list|)
block|{
return|return
name|getOntologyHref
argument_list|(
name|ontologyURI
argument_list|)
operator|+
literal|"/"
operator|+
name|INDIVIDUALS
operator|+
literal|"/"
operator|+
name|expelLastSharp
argument_list|(
name|individualURI
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|expelLastSharp
parameter_list|(
name|String
name|targetStr
parameter_list|)
block|{
return|return
name|targetStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|targetStr
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
argument_list|)
operator|+
literal|"/"
operator|+
name|targetStr
operator|.
name|substring
argument_list|(
name|targetStr
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

