begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|addCORSOrigin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|CorsHelper
operator|.
name|enableCORS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|web
operator|.
name|utils
operator|.
name|RestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|ldviewable
operator|.
name|Viewable
import|;
end_import

begin_comment
comment|/**  * Resource providing services for session management  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/cmsadapter/session"
argument_list|)
specifier|public
class|class
name|SessionResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
name|SessionManager
name|sessionManager
decl_stmt|;
specifier|public
name|SessionResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|sessionManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|SessionManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|OPTIONS
specifier|public
name|Response
name|handleCorsPreflight
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|res
init|=
name|Response
operator|.
name|ok
argument_list|()
decl_stmt|;
name|enableCORS
argument_list|(
name|servletContext
argument_list|,
name|res
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
block|{
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns a session key based on the given connection information. Returned key can be used in subsequent      * operations which requires a connection to content repository      *       * @param repositoryURL      *            URL of the content repository. For<i>JCR</i> repositories<b>RMI</b> protocol, for      *<i>CMIS</i> repositories<b>AtomPub Binding</b> is used. This parameter should be set      *            according to these connection methods.      * @param workspaceName      *            For JCR repositories this parameter determines the workspace to be connected. On the other      *            hand for CMIS repositories repository ID should be set to this parameter. In case of not      *            setting this parameter, for JCR default workspace is selected, for CMIS the first repository      *            obtained through the session object is selected.      * @param username      *            Username to connect to content repository      * @param password      *            Password to connect to content repository      * @param connectionType      *            Connection type; either<b>JCR</b> or<b>CMIS</b>      * @return a UUID representing matching with the session object obtained using the provided parameters      * @throws RepositoryAccessException      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|createSessionByInfo
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryURL"
argument_list|)
name|String
name|repositoryURL
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"workspaceName"
argument_list|)
name|String
name|workspaceName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"password"
argument_list|)
name|String
name|password
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"connectionType"
argument_list|)
name|String
name|connectionType
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|repositoryURL
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|repositoryURL
argument_list|)
expr_stmt|;
name|workspaceName
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
name|username
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|password
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|connectionType
operator|=
name|RestUtil
operator|.
name|nullify
argument_list|(
name|connectionType
argument_list|)
expr_stmt|;
if|if
condition|(
name|repositoryURL
operator|==
literal|null
operator|||
name|username
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
operator|||
name|connectionType
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Repository URL, username, password and connection type parameters should be set\n"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|String
name|sessionKey
init|=
name|sessionManager
operator|.
name|createSessionKey
argument_list|(
name|repositoryURL
argument_list|,
name|workspaceName
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|connectionType
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CREATED
argument_list|)
operator|.
name|entity
argument_list|(
name|sessionKey
argument_list|)
decl_stmt|;
name|addCORSOrigin
argument_list|(
name|servletContext
argument_list|,
name|rb
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|rb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

