begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|TEXT_HTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|RDFBridgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|ContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|commons
operator|.
name|web
operator|.
name|base
operator|.
name|resource
operator|.
name|BaseStanbolResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|header
operator|.
name|FormDataContentDisposition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|multipart
operator|.
name|FormDataParam
import|;
end_import

begin_comment
comment|/**  * This resource is currently used to pass RDF data to CMS Adapter so that RDF data will be annotated with  * "CMS vocabulary" annotations according to {@link RDFBridge}s. Afterwards, this annotated RDF is transformed  * into nodes/object in the content repository.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/cmsadapter/map"
argument_list|)
specifier|public
class|class
name|RDFMapperResource
extends|extends
name|BaseStanbolResource
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDFMapperResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Parser
name|clerezzaParser
decl_stmt|;
specifier|private
name|RDFBridgeManager
name|bridgeManager
decl_stmt|;
specifier|public
name|RDFMapperResource
parameter_list|(
annotation|@
name|Context
name|ServletContext
name|context
parameter_list|)
block|{
name|clerezzaParser
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|bridgeManager
operator|=
name|ContextHelper
operator|.
name|getServiceFromContext
argument_list|(
name|RDFBridgeManager
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|TEXT_HTML
argument_list|)
specifier|public
name|Response
name|get
parameter_list|()
block|{
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"index"
argument_list|,
name|this
argument_list|)
argument_list|,
name|TEXT_HTML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Allows clients to map specified RDF to the content repository. In the first step the RDF data is      * annotated according to RDF Bridges loaded in the OSGI environment. Additional annotations provide      * selection of certain resources from RDF data and creation/update of related content repository object.      * Either a raw RDF can be given in<code>serializedGraph</code> parameter or URL of an external RDF data      * can given in<code>url</code> parameter. However,<code>serializedGraph</code> has a higher priority.      *       * @param repositoryURL      *            URL of the content repository. For JCR repositories<b>RMI protocol</b>, for CMIS      *            repositories<b>AtomPub Binding</b> is used. This parameter should be set according to these      *            connection methods.      * @param workspaceName      *            For JCR repositories this parameter determines the workspace to be connected. On the other      *            hand for CMIS repositories<b>repository ID</b> should be set to this parameter. In case of      *            not setting this parameter, for JCR<b>default workspace</b> is selected, for CMIS the      *<b>first repository</b> obtained through the session object is selected.      * @param username      *            Username to connect to content repository      * @param password      *            Password to connect to content repository      * @param connectionType      *            Connection type; either<b>JCR</b> or<b>CMIS</b>      * @param serializedGraph      *            is the serialized RDF graph that is desired to be transformed into repository objects      * @param url      *            URL of the external RDF data.      * @return      * @throws MalformedURLException      * @throws IOException      */
annotation|@
name|Path
argument_list|(
literal|"/rdf"
argument_list|)
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
specifier|public
name|Response
name|mapRawRDF
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"repositoryURL"
argument_list|)
name|String
name|repositoryURL
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"workspaceName"
argument_list|)
name|String
name|workspaceName
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|username
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"password"
argument_list|)
name|String
name|password
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"connectionType"
argument_list|)
name|String
name|connectionType
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"serializedGraph"
argument_list|)
name|String
name|serializedGraph
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"url"
argument_list|)
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
if|if
condition|(
name|repositoryURL
operator|==
literal|null
operator|||
name|username
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
operator|||
name|connectionType
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Repository URL, username, password and connection type parameters should not be null"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Repository URL, username, password and connection type parameters should not be null"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ConnectionInfo
name|connectionInfo
init|=
name|formConnectionInfo
argument_list|(
name|repositoryURL
argument_list|,
name|workspaceName
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|connectionType
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Graph
name|g
decl_stmt|;
if|if
condition|(
name|serializedGraph
operator|!=
literal|null
operator|&&
operator|!
name|serializedGraph
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|g
operator|=
name|clerezzaParser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|serializedGraph
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
operator|!
name|url
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|URLConnection
name|uc
init|=
operator|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|g
operator|=
name|clerezzaParser
operator|.
name|parse
argument_list|(
name|uc
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"There is no RDF data source specified"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"There is no RDF data source specified"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Response
name|r
init|=
name|mapRDF
argument_list|(
name|g
argument_list|,
name|connectionInfo
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"RDF mapping finished in: {} seconds"
argument_list|,
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
comment|/**      * Same with {@link #mapRawRDF(String, String, String, String, String, String, String)}. But this service      * allows clients to submit external RDF data through a {@link File} specified in<code>rdfFile</code>      * parameter.      *       * @param repositoryURL      *            URL of the content repository. For JCR repositories<b>RMI protocol</b>, for CMIS      *            repositories<b>AtomPub Binding</b> is used. This parameter should be set according to these      *            connection methods.      * @param workspaceName      *            For JCR repositories this parameter determines the workspace to be connected. On the other      *            hand for CMIS repositories<b>repository ID</b> should be set to this parameter. In case of      *            not setting this parameter, for JCR<b>default workspace</b> is selected, for CMIS the      *<b>first repository</b> obtained through the session object is selected.      * @param username      *            Username to connect to content repository      * @param password      *            Password to connect to content repository      * @param connectionType      *            Connection type; either<b>JCR</b> or<b>CMIS</b>      * @param rdfFile      *            {@link File} containing the RDF to be mapped to the content repository      * @param rdfFileInfo      *            Information related with RDF file      * @return      * @throws IOException      */
annotation|@
name|Path
argument_list|(
literal|"/rdf"
argument_list|)
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA
argument_list|)
specifier|public
name|Response
name|mapRDFFromFile
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"repositoryURL"
argument_list|)
name|String
name|repositoryURL
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"workspaceName"
argument_list|)
name|String
name|workspaceName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"password"
argument_list|)
name|String
name|password
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"connectionType"
argument_list|)
name|String
name|connectionType
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
literal|"rdfFile"
argument_list|)
name|File
name|rdfFile
parameter_list|,
annotation|@
name|FormDataParam
argument_list|(
literal|"rdfFile"
argument_list|)
name|FormDataContentDisposition
name|rdfFileInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|repositoryURL
operator|==
literal|null
operator|||
name|username
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
operator|||
name|connectionType
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Repository URL, username, password and connection type parameters should not be null"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Repository URL, username, password and connection type parameters should not be null"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ConnectionInfo
name|connectionInfo
init|=
name|formConnectionInfo
argument_list|(
name|repositoryURL
argument_list|,
name|workspaceName
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|connectionType
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Graph
name|g
decl_stmt|;
if|if
condition|(
name|rdfFile
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|rdfFile
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|=
name|clerezzaParser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"There is RDF file specified"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"There is no RDF file specified"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|Response
name|r
init|=
name|mapRDF
argument_list|(
name|g
argument_list|,
name|connectionInfo
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"RDF mapping finished in: {} miliseconds"
argument_list|,
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getStatus
argument_list|()
operator|==
name|Response
operator|.
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
return|return
name|get
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|r
return|;
block|}
block|}
specifier|private
name|Response
name|mapRDF
parameter_list|(
name|Graph
name|g
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
block|{
try|try
block|{
name|bridgeManager
operator|.
name|storeRDFToRepository
argument_list|(
name|connectionInfo
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to obtain a session from repository"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Failed to obtain a session from repository"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RDFBridgeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|entity
argument_list|(
literal|"RDF data has been mapped to the content repository"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * This service provides obtaining an RDF from the content repository based on the {@link RDFBridge}      * instances in the environment. Target content content repository objects are determined according to      * path configurations of RDF Bridges. In the first step, content repository objects are converted into an      * RDF. This process is realized by {@link RDFMapper}. For JCR and CMIS repositories there are two      * implementations of this interface namely,<code>JCRRDFMapper</code> and<code>CMISRDFMapper</code>. At      * the end of first step, generated RDF contains only<b>CMS Vocabulary</b> annotations. Afterwards,      * additional assertions are added based on RDF Bridges.      *       *       * @return generated {@link MGraph} wrapped in a {@link Response} in "application/rdf+xml" format      */
annotation|@
name|Path
argument_list|(
literal|"/cms"
argument_list|)
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
name|MediaType
operator|.
name|APPLICATION_FORM_URLENCODED
argument_list|)
annotation|@
name|Produces
argument_list|(
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
specifier|public
name|Response
name|mapCMS
parameter_list|(
annotation|@
name|FormParam
argument_list|(
literal|"repositoryURL"
argument_list|)
name|String
name|repositoryURL
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"workspaceName"
argument_list|)
name|String
name|workspaceName
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"username"
argument_list|)
name|String
name|username
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"password"
argument_list|)
name|String
name|password
parameter_list|,
annotation|@
name|FormParam
argument_list|(
literal|"connectionType"
argument_list|)
name|String
name|connectionType
parameter_list|)
block|{
if|if
condition|(
name|repositoryURL
operator|==
literal|null
operator|||
name|username
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
operator|||
name|connectionType
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Repository URL, username, password and connection type parameters should not be null"
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Repository URL, username, password and connection type parameters should not be null"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|ConnectionInfo
name|connectionInfo
init|=
name|formConnectionInfo
argument_list|(
name|repositoryURL
argument_list|,
name|workspaceName
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|connectionType
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MGraph
name|generatedGraph
init|=
name|bridgeManager
operator|.
name|generateRDFFromRepository
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"CMS mapping finished in: {} seconds"
argument_list|,
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|generatedGraph
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to obtain a session from repository"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Failed to obtain a session from repository"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RDFBridgeException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error while generating RDF from repository"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Error while generating RDF from repository"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|ConnectionInfo
name|formConnectionInfo
parameter_list|(
name|String
name|repositoryURL
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|connectionType
parameter_list|)
block|{
name|ConnectionInfo
name|cInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|cInfo
operator|.
name|setConnectionType
argument_list|(
name|connectionType
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setRepositoryURL
argument_list|(
name|repositoryURL
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setWorkspaceName
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
return|return
name|cInfo
return|;
block|}
block|}
end_class

end_unit

