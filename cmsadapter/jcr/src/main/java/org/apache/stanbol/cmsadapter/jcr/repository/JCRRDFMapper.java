begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|RDFBridgeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RDFMapper} for JCR repositories.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|JCRRDFMapper
implements|implements
name|RDFMapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JCRRDFMapper
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|storeRDFinRepository
parameter_list|(
name|Object
name|session
parameter_list|,
name|String
name|rootPath
parameter_list|,
name|MGraph
name|annotatedGraph
parameter_list|)
block|{
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|rootObjects
init|=
name|RDFBridgeHelper
operator|.
name|getRootObjetsOfGraph
argument_list|(
name|annotatedGraph
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|root
range|:
name|rootObjects
control|)
block|{
name|String
name|nodeName
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|root
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|annotatedGraph
argument_list|)
decl_stmt|;
name|Node
name|parent
init|=
name|checkCreateParentNodes
argument_list|(
name|rootPath
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
decl_stmt|;
name|createNode
argument_list|(
name|parent
argument_list|,
name|root
argument_list|,
name|nodeName
argument_list|,
name|annotatedGraph
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to save JCR session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recursively creates the node itself and its children. If processed node already exists, it is updated      * with the new properties, a new node is created in the repository.      *       * @param parent      *            parent {@link Node} of the the node to be created      * @param nodeSubject      *            URI of the node to be created      * @param nodeName      *            name of the node to be created      * @param graph      *            annotated {@link MGraph}      * @param session      *            {@link Session} object to access repository      */
specifier|private
name|void
name|createNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|NonLiteral
name|nodeSubject
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Node
name|n
init|=
literal|null
decl_stmt|;
name|String
name|parentPath
init|=
literal|""
decl_stmt|;
try|try
block|{
name|parentPath
operator|=
name|parent
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|n
operator|=
name|parent
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|=
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to create node {} for parent {}. "
argument_list|,
operator|new
name|Object
index|[]
block|{
name|parentPath
block|,
name|nodeName
block|}
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// create properties
name|createNodeProperties
argument_list|(
name|n
argument_list|,
name|nodeSubject
argument_list|,
name|graph
argument_list|)
expr_stmt|;
comment|// create children
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|nodeSubject
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|childSubject
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|childName
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|createNode
argument_list|(
name|n
argument_list|,
name|childSubject
argument_list|,
name|childName
argument_list|,
name|graph
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This function creates specified properties for the node given as parameter. If a property already      * exists, it first is nullified then new value is assigned. Properties are accessed through      * {@code CMSAdapterVocabulary#CMS_OBJECT_HAS_PROPERTY} property.      *       * @param n      *            {@link Node} of which properties will be updated/created      * @param subject      *            corresponding URI of the node      * @param graph      *            annotated {@link MGraph}      */
specifier|private
name|void
name|createNodeProperties
parameter_list|(
name|Node
name|n
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_HAS_PROPERTY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UriRef
name|tempPropURI
init|=
operator|new
name|UriRef
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|propName
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|tempPropURI
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PROPERTY_NAME
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|UriRef
name|propURI
init|=
name|RDFBridgeHelper
operator|.
name|getResourceURIValue
argument_list|(
name|tempPropURI
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PROPERTY_URI
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|RDFBridgeHelper
operator|.
name|getResource
argument_list|(
name|subject
argument_list|,
name|propURI
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|propValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|resource
operator|instanceof
name|Literal
condition|)
block|{
name|propValue
operator|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|subject
argument_list|,
name|propURI
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|instanceof
name|UriRef
condition|)
block|{
name|propValue
operator|=
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propValue
operator|=
name|resource
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|int
name|propType
init|=
name|RDFBridgeHelper
operator|.
name|getPropertyType
argument_list|(
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
operator|(
name|Value
operator|)
literal|null
argument_list|)
expr_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|propType
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} property of updated/created with {}"
argument_list|,
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to update property: {} for node {}: "
argument_list|,
name|propName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Takes a path and tries to check nodes that forms that path. If nodes do not exist, they are created.      *       * @param rootPath      *            path in which root objects will be created or existing one will be searched      * @param session      *            session to access repository      * @return the first level parent {@link Node} of the node specified with<code>nodePath</code> if there      *         is not any exception, otherwise returns<code>null</code>.      */
specifier|private
name|Node
name|checkCreateParentNodes
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Node
name|n
decl_stmt|;
name|String
name|currentPath
decl_stmt|;
try|try
block|{
name|n
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|currentPath
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get root node while trying to get Node for path: {}"
argument_list|,
name|rootPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
index|[]
name|pathSections
init|=
name|rootPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pathSections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|n
operator|.
name|hasNode
argument_list|(
name|pathSections
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|addNode
argument_list|(
name|pathSections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|=
name|n
operator|.
name|getNode
argument_list|(
name|pathSections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|currentPath
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get child node for name: {} of node: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pathSections
index|[
name|i
index|]
block|,
name|currentPath
block|}
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|n
return|;
block|}
block|}
end_class

end_unit

