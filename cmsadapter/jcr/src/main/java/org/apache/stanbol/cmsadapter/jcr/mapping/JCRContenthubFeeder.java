begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|utils
operator|.
name|JCRUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|ContentItemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|ContenthubFeeder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|ContenthubFeederException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|solr
operator|.
name|SolrStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is default implementation of {@link ContenthubFeeder} interface for JCR content repositories. It  * basically transforms the {@link Node}s in the content repository to content items in the Contenthub based  * on the paths or IDs of the nodes.  *   *<p>  * Unless the node type of the processed node is<b>nt:file</b> or<b>nt:resource</b>, the content of the node  * is obtained by checking the properties specified in<code>contentProperties</code> list below.  *   *<p>  * If the node type of the processed node is<i>nt:resource</i>, the content of the node is obtained from the  *<b>jcr:data</b> property of the node. Also, if the mime type of the content is specified through the  *<b>jcr:mimeType</b> property, it is set as the mime type of the content item, otherwise  *<i>application/octet-stream</i> is set.  *   *<p>  * If the node type of processed node is<i>nt:file</i>, the content of the node is obtained from the  *<i>nt:resource</i> property of the processed content. Mime type of the the content item is set in the same  * manner explained for<i>nt:resource</i> nodes in previous paragraph.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|ContenthubFeeder
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JCRContenthubFeeder
implements|implements
name|ContenthubFeeder
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JCR_NT_FILE
init|=
literal|"nt:file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_NT_RESOURCE
init|=
literal|"nt:resource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_CONTENT
init|=
literal|"jcr:content"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_DATA
init|=
literal|"jcr:data"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_MIME_TYPE
init|=
literal|"jcr:mimeType"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JCR_ITEM_BY_PATH
init|=
literal|"SELECT * from nt:base WHERE jcr:path = '%s'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JCRContenthubFeeder
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*      * These properties will not be indexed      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|excludedProperties
decl_stmt|;
static|static
block|{
name|excludedProperties
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"jcr:data"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"jcr:uuid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Reference
specifier|private
name|SolrStore
name|solrStore
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|SessionManager
name|sessionManager
decl_stmt|;
specifier|private
name|Session
name|session
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|contentProperties
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemByCMSObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|Node
name|n
init|=
operator|(
name|Node
operator|)
name|o
decl_stmt|;
name|String
name|actualNodeId
init|=
literal|""
decl_stmt|;
try|try
block|{
name|actualNodeId
operator|=
name|n
operator|.
name|getIdentifier
argument_list|()
expr_stmt|;
name|ContentContext
name|contentContext
init|=
name|getContentContextWithBasicInfo
argument_list|(
name|n
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|processContextAndSubmitToContenthub
argument_list|(
name|contentContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get basic information of node having id: {}"
argument_list|,
name|actualNodeId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemByID
parameter_list|(
name|String
name|contentItemID
parameter_list|)
block|{
name|Node
name|n
decl_stmt|;
try|try
block|{
name|n
operator|=
name|getNodeByID
argument_list|(
name|contentItemID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain the item specified by the id: {}"
argument_list|,
name|contentItemID
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|ContentContext
name|contentContext
init|=
name|getContentContextWithBasicInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|processContextAndSubmitToContenthub
argument_list|(
name|contentContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get basic information of node having id: {}"
argument_list|,
name|contentItemID
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemByPath
parameter_list|(
name|String
name|contentItemPath
parameter_list|)
block|{
name|Node
name|n
decl_stmt|;
try|try
block|{
name|n
operator|=
name|getNodeByPath
argument_list|(
name|contentItemPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain the item specified by the path: {}"
argument_list|,
name|contentItemPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|ContentContext
name|contentContext
init|=
name|getContentContextWithBasicInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|processContextAndSubmitToContenthub
argument_list|(
name|contentContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get basic information of node having path: {}"
argument_list|,
name|contentItemPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemsUnderPath
parameter_list|(
name|String
name|rootPath
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
decl_stmt|;
try|try
block|{
name|nodes
operator|=
name|getNodesUnderPath
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain the item specified by the path: {}"
argument_list|,
name|rootPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Node
name|n
range|:
name|nodes
control|)
block|{
name|String
name|path
decl_stmt|;
try|try
block|{
name|path
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain path of node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|ContentContext
name|contentContext
init|=
name|getContentContextWithBasicInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|processContextAndSubmitToContenthub
argument_list|(
name|contentContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get basic information of node having path: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemsByCustomFilter
parameter_list|(
name|ContentItemFilter
name|customContentItemFilter
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is not supported in this implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemByID
parameter_list|(
name|String
name|contentItemID
parameter_list|)
block|{
name|solrStore
operator|.
name|deleteById
argument_list|(
name|contentItemID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemByPath
parameter_list|(
name|String
name|contentItemPath
parameter_list|)
block|{
name|Node
name|n
decl_stmt|;
try|try
block|{
name|n
operator|=
name|getNodeByPath
argument_list|(
name|contentItemPath
argument_list|)
expr_stmt|;
name|solrStore
operator|.
name|deleteById
argument_list|(
name|n
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain the item specified by the path: {}"
argument_list|,
name|contentItemPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemsUnderPath
parameter_list|(
name|String
name|rootPath
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
decl_stmt|;
try|try
block|{
name|nodes
operator|=
name|getNodesUnderPath
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|n
range|:
name|nodes
control|)
block|{
name|solrStore
operator|.
name|deleteById
argument_list|(
name|n
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain the item specified by the path: {}"
argument_list|,
name|rootPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemsByCustomFilter
parameter_list|(
name|ContentItemFilter
name|customContentItemFilter
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is not supported in this implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canFeedWith
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
return|return
name|session
operator|instanceof
name|Session
return|;
block|}
specifier|private
name|void
name|processContextAndSubmitToContenthub
parameter_list|(
name|ContentContext
name|contentContext
parameter_list|)
block|{
name|String
name|id
init|=
name|contentContext
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|populateContentContext
argument_list|(
name|contentContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentContext
operator|.
name|getContent
argument_list|()
operator|==
literal|null
operator|||
name|contentContext
operator|.
name|getContent
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get content for node having id: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
init|=
name|getConstraintsFromNode
argument_list|(
name|contentContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"There is no constraint for the node having id: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|SolrContentItem
name|sci
init|=
name|solrStore
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|contentContext
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|contentContext
operator|.
name|getContent
argument_list|()
argument_list|,
name|contentContext
operator|.
name|getContentType
argument_list|()
argument_list|,
name|constraints
argument_list|)
decl_stmt|;
name|solrStore
operator|.
name|enhanceAndPut
argument_list|(
name|sci
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Document submitted to Contenthub."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Id: {}"
argument_list|,
name|sci
operator|.
name|getUri
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Mime type: {}"
argument_list|,
name|sci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Constraints: {}"
argument_list|,
name|sci
operator|.
name|getConstraints
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getConstraintsFromNode
parameter_list|(
name|ContentContext
name|contentContext
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|PropertyIterator
name|it
init|=
name|contentContext
operator|.
name|getNode
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|javax
operator|.
name|jcr
operator|.
name|Property
name|p
init|=
name|it
operator|.
name|nextProperty
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|propertyVals
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skipProperty
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|propertyVals
operator|.
name|add
argument_list|(
name|JCRUtils
operator|.
name|getTypedPropertyValue
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propertyVals
operator|.
name|addAll
argument_list|(
name|JCRUtils
operator|.
name|getTypedPropertyValues
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|constraints
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|propertyVals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to process properties of node having: {}"
argument_list|,
name|contentContext
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|constraints
return|;
block|}
specifier|private
name|boolean
name|skipProperty
parameter_list|(
name|javax
operator|.
name|jcr
operator|.
name|Property
name|p
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|excludedProperties
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|contentProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|cProp
range|:
name|contentProperties
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cProp
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|populateContentContext
parameter_list|(
name|ContentContext
name|contentContext
parameter_list|)
block|{
name|String
name|nodeName
init|=
name|contentContext
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|nt
init|=
name|contentContext
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|nt
operator|.
name|equals
argument_list|(
name|JCR_NT_FILE
argument_list|)
condition|)
block|{
name|Node
name|content
init|=
name|contentContext
operator|.
name|getNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|JCR_NT_RESOURCE
argument_list|)
condition|)
block|{
name|getContentInfoFromNTResource
argument_list|(
name|contentContext
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContentInfoFromCustomProperty
argument_list|(
name|contentContext
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nt
operator|.
name|equals
argument_list|(
name|JCR_NT_RESOURCE
argument_list|)
condition|)
block|{
name|getContentInfoFromNTResource
argument_list|(
name|contentContext
argument_list|,
name|contentContext
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContentInfoFromCustomProperty
argument_list|(
name|contentContext
argument_list|,
name|contentContext
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve content for node: {}"
argument_list|,
name|nodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get bytes from binary content of node: {}"
argument_list|,
name|nodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getContentInfoFromNTResource
parameter_list|(
name|ContentContext
name|contentContext
parameter_list|,
name|Node
name|dataNode
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
if|if
condition|(
name|dataNode
operator|.
name|hasProperty
argument_list|(
name|JCR_DATA
argument_list|)
condition|)
block|{
name|javax
operator|.
name|jcr
operator|.
name|Property
name|jcrData
init|=
name|dataNode
operator|.
name|getProperty
argument_list|(
name|JCR_DATA
argument_list|)
decl_stmt|;
name|Binary
name|val
init|=
name|jcrData
operator|.
name|getBinary
argument_list|()
decl_stmt|;
name|String
name|encoding
init|=
name|ContentContext
operator|.
name|MEDIA_TYPE_APPLICAION_OCTET_STREAM
decl_stmt|;
if|if
condition|(
name|dataNode
operator|.
name|hasProperty
argument_list|(
name|JCR_MIME_TYPE
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|dataNode
operator|.
name|getProperty
argument_list|(
name|JCR_MIME_TYPE
argument_list|)
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|contentContext
operator|.
name|setContentType
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|contentContext
operator|.
name|setContent
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|val
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|getContentInfoFromCustomProperty
parameter_list|(
name|ContentContext
name|contentContext
parameter_list|,
name|Node
name|dataNode
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|Node
name|n
init|=
name|contentContext
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|contentProperties
control|)
block|{
if|if
condition|(
name|n
operator|.
name|hasProperty
argument_list|(
name|prop
argument_list|)
condition|)
block|{
name|javax
operator|.
name|jcr
operator|.
name|Property
name|p
init|=
name|n
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|STRING
condition|)
block|{
name|String
name|val
init|=
name|p
operator|.
name|getString
argument_list|()
decl_stmt|;
name|contentContext
operator|.
name|setContent
argument_list|(
name|val
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|contentContext
operator|.
name|setContentType
argument_list|(
name|ContentContext
operator|.
name|MEDIA_TYPE_TEXT_PLAIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Binary
name|val
init|=
name|p
operator|.
name|getBinary
argument_list|()
decl_stmt|;
name|contentContext
operator|.
name|setContent
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|val
operator|.
name|getStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|contentContext
operator|.
name|setContentType
argument_list|(
name|ContentContext
operator|.
name|MEDIA_TYPE_APPLICAION_OCTET_STREAM
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"There is no content property specified for node:{}"
argument_list|,
name|contentContext
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ContentContext
name|getContentContextWithBasicInfo
parameter_list|(
name|Node
name|n
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|getContentContextWithBasicInfo
argument_list|(
name|n
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|ContentContext
name|getContentContextWithBasicInfo
parameter_list|(
name|Node
name|n
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ContentContext
name|contentContext
init|=
operator|new
name|ContentContext
argument_list|()
decl_stmt|;
name|contentContext
operator|.
name|setIdentifier
argument_list|(
operator|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|?
name|n
operator|.
name|getIdentifier
argument_list|()
else|:
name|id
argument_list|)
expr_stmt|;
name|contentContext
operator|.
name|setNode
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|contentContext
operator|.
name|setNodeType
argument_list|(
name|n
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|contentContext
operator|.
name|setNodeName
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|contentContext
return|;
block|}
specifier|private
name|Node
name|getNodeByID
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|ItemNotFoundException
throws|,
name|RepositoryException
block|{
return|return
name|session
operator|.
name|getNodeByIdentifier
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|PathNotFoundException
throws|,
name|RepositoryException
block|{
return|return
name|session
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Node
argument_list|>
name|getNodesUnderPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
comment|// get root node
name|Node
name|root
init|=
name|getNodeByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// get child nodes
comment|// TODO use JCR-JOQM or JCR-SQL2 instead of deprecated SQL query type
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|+=
literal|"/"
expr_stmt|;
block|}
name|path
operator|+=
literal|"%"
expr_stmt|;
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|Query
name|query
init|=
name|qm
operator|.
name|createQuery
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|JCR_ITEM_BY_PATH
argument_list|,
name|path
argument_list|)
argument_list|,
name|Query
operator|.
name|SQL
argument_list|)
decl_stmt|;
name|QueryResult
name|queryResult
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|NodeIterator
name|nodes
init|=
name|queryResult
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|n
init|=
name|nodes
operator|.
name|nextNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|&&
name|n
operator|.
name|getParent
argument_list|()
operator|.
name|getPrimaryNodeType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|JCR_NT_FILE
argument_list|)
condition|)
block|{
comment|// skip the jcr:content child of nt:file nodes
continue|continue;
block|}
name|results
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfigs
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configs
parameter_list|)
throws|throws
name|ContenthubFeederException
block|{
try|try
block|{
name|checkSession
argument_list|(
name|configs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContenthubFeederException
argument_list|(
literal|"Failed to set a session for JCRContenthubFeeder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ContenthubFeederException
argument_list|(
literal|"Failed to set a session for JCRContenthubFeeder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|checkContentProp
argument_list|(
name|configs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSession
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|RepositoryAccessException
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROP_SESSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROP_SESSION
argument_list|,
literal|"A valid JCR Session should be provided to activate this component."
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|this
operator|.
name|session
operator|=
operator|(
name|Session
operator|)
name|sessionManager
operator|.
name|getSession
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Session
condition|)
block|{
name|this
operator|.
name|session
operator|=
operator|(
name|Session
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROP_SESSION
argument_list|,
literal|"A valid JCR Session should be provided to activate this component."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|checkContentProp
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Object
name|cProps
init|=
name|properties
operator|.
name|get
argument_list|(
name|PROP_CONTENT_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|cProps
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No content properties specified for JCRContenthubFeeder"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|contentProperties
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|cProps
expr_stmt|;
block|}
block|}
comment|/**      * This context class holding the node itself and information related it exists to prevent repetitive      * request for name, identifier, node type of actual node      */
specifier|private
class|class
name|ContentContext
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_TEXT_PLAIN
init|=
literal|"text/plain"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_APPLICAION_OCTET_STREAM
init|=
literal|"application/octet-stream"
decl_stmt|;
specifier|private
name|Node
name|node
decl_stmt|;
specifier|private
name|String
name|nodeName
decl_stmt|;
specifier|private
name|String
name|nodeType
decl_stmt|;
specifier|private
name|String
name|identifier
decl_stmt|;
specifier|private
name|String
name|contentType
decl_stmt|;
specifier|private
name|byte
index|[]
name|content
decl_stmt|;
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
specifier|public
name|void
name|setNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
specifier|public
name|void
name|setNodeName
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
specifier|public
name|String
name|getNodeType
parameter_list|()
block|{
return|return
name|nodeType
return|;
block|}
specifier|public
name|void
name|setNodeType
parameter_list|(
name|String
name|nodeType
parameter_list|)
block|{
name|this
operator|.
name|nodeType
operator|=
name|nodeType
expr_stmt|;
block|}
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
specifier|public
name|void
name|setIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
specifier|public
name|void
name|setContent
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

