begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|repository
operator|.
name|JCRModelMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|TypeLifter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DatatypeProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|JCRNodeTypeLifter
implements|implements
name|TypeLifter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JCRNodeTypeLifter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MappingEngine
name|engine
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|RepositoryAccess
name|accessor
decl_stmt|;
specifier|private
name|OntologyResourceHelper
name|ontologyResourceHelper
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|liftNodeTypes
parameter_list|(
name|MappingEngine
name|engine
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|initialize
argument_list|(
name|engine
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeTypeManager
name|nodeTypeManager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNodeTypeManager
argument_list|()
decl_stmt|;
name|NodeTypeIterator
name|nodeTypesItr
init|=
name|nodeTypeManager
operator|.
name|getAllNodeTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeTypesItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeType
name|curNodeType
init|=
name|nodeTypesItr
operator|.
name|nextNodeType
argument_list|()
decl_stmt|;
comment|// create the class
name|ObjectTypeDefinition
name|otd
init|=
name|JCRModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|curNodeType
argument_list|)
decl_stmt|;
name|OntClass
name|nodeTypeClass
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|otd
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeTypeClass
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create OntClass for object type definition {}"
argument_list|,
name|otd
operator|.
name|getLocalname
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// create subsumption relationships
name|NodeType
index|[]
name|supertypes
init|=
name|curNodeType
operator|.
name|getDeclaredSupertypes
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeType
name|supertype
range|:
name|supertypes
control|)
block|{
name|otd
operator|=
name|JCRModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|supertype
argument_list|)
expr_stmt|;
name|OntClass
name|s
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|otd
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create OntClass for object type definition {}"
argument_list|,
name|otd
operator|.
name|getLocalname
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|nodeTypeClass
operator|.
name|addSuperClass
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// create properties
name|PropertyDefinition
index|[]
name|propertyDefinitionList
init|=
name|curNodeType
operator|.
name|getDeclaredPropertyDefinitions
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyDefinition
name|jcrPropDef
range|:
name|propertyDefinitionList
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
name|propDef
init|=
name|JCRModelMapper
operator|.
name|getPropertyDefinition
argument_list|(
name|jcrPropDef
argument_list|)
decl_stmt|;
if|if
condition|(
name|jcrPropDef
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// TODO decide how to handle * named properties
block|}
else|else
block|{
if|if
condition|(
operator|(
name|propDef
operator|.
name|getPropertyType
argument_list|()
operator|==
name|PropType
operator|.
name|NAME
operator|)
operator|||
operator|(
name|propDef
operator|.
name|getPropertyType
argument_list|()
operator|==
name|PropType
operator|.
name|PATH
operator|)
operator|||
operator|(
name|propDef
operator|.
name|getPropertyType
argument_list|()
operator|==
name|PropType
operator|.
name|REFERENCE
operator|)
condition|)
block|{
name|ObjectProperty
name|op
init|=
name|ontologyResourceHelper
operator|.
name|createObjectPropertyByPropertyDefinition
argument_list|(
name|propDef
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|nodeTypeClass
block|}
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create ObjectProperty for property definition {}"
argument_list|,
name|propDef
operator|.
name|getLocalname
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DatatypeProperty
name|dtp
init|=
name|ontologyResourceHelper
operator|.
name|createDatatypePropertyByPropertyDefinition
argument_list|(
name|propDef
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|nodeTypeClass
block|}
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dtp
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create DatatypeProperty for property definition {}"
argument_list|,
name|propDef
operator|.
name|getLocalname
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Repository exception while lifting node type definitions "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canLift
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|contentEquals
argument_list|(
literal|"JCR"
argument_list|)
return|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|MappingEngine
name|engine
parameter_list|)
block|{
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
name|this
operator|.
name|session
operator|=
operator|(
name|Session
operator|)
name|engine
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|this
operator|.
name|ontologyResourceHelper
operator|=
name|this
operator|.
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
expr_stmt|;
name|this
operator|.
name|accessor
operator|=
name|this
operator|.
name|engine
operator|.
name|getRepositoryAccessManager
argument_list|()
operator|.
name|getRepositoryAccess
argument_list|(
name|this
operator|.
name|engine
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|accessor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not find suitable accessor"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

