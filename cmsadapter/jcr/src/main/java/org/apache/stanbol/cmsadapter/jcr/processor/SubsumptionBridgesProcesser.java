begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|MappingModelParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|BridgeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|SubsumptionBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_class
specifier|public
class|class
name|SubsumptionBridgesProcesser
extends|extends
name|JCRProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubsumptionBridgesProcesser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SubsumptionBridgesProcesser
parameter_list|(
name|MappingEngine
name|mappingEngine
parameter_list|)
block|{
name|super
argument_list|(
name|mappingEngine
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processUpdates
parameter_list|(
name|List
argument_list|<
name|CMSObject
argument_list|>
name|cmsObjects
parameter_list|)
block|{
name|BridgeDefinitions
name|bridgeDefinitions
init|=
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
decl_stmt|;
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
name|OntologyResourceHelper
name|ontologyResourceHelper
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubsumptionBridge
argument_list|>
name|subsumptionBridges
init|=
name|MappingModelParser
operator|.
name|getSubsumptionBridges
argument_list|(
name|bridgeDefinitions
argument_list|)
decl_stmt|;
for|for
control|(
name|SubsumptionBridge
name|bridge
range|:
name|subsumptionBridges
control|)
block|{
try|try
block|{
for|for
control|(
name|CMSObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|cmsObject
operator|.
name|getPath
argument_list|()
argument_list|,
name|bridge
operator|.
name|getSubjectQuery
argument_list|()
argument_list|)
condition|)
block|{
name|OntClass
name|c
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|cmsObject
argument_list|)
decl_stmt|;
name|processSubsumptionBridge
argument_list|(
name|c
argument_list|,
name|bridge
argument_list|,
name|adapter
operator|.
name|wrapAsDObject
argument_list|(
name|cmsObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error at retrieving nodes on subsumption bridge path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processBridges
parameter_list|()
block|{
name|BridgeDefinitions
name|bridgeDefinitions
init|=
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
decl_stmt|;
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
name|OntologyResourceHelper
name|ontologyResourceHelper
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubsumptionBridge
argument_list|>
name|subsumptionBridges
init|=
name|MappingModelParser
operator|.
name|getSubsumptionBridges
argument_list|(
name|bridgeDefinitions
argument_list|)
decl_stmt|;
for|for
control|(
name|SubsumptionBridge
name|bridge
range|:
name|subsumptionBridges
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|cmsObjects
init|=
name|accessor
operator|.
name|getNodeByPath
argument_list|(
name|bridge
operator|.
name|getSubjectQuery
argument_list|()
argument_list|,
name|session
argument_list|)
decl_stmt|;
for|for
control|(
name|CMSObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
name|OntClass
name|c
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|cmsObject
argument_list|)
decl_stmt|;
name|processSubsumptionBridge
argument_list|(
name|c
argument_list|,
name|bridge
argument_list|,
name|adapter
operator|.
name|wrapAsDObject
argument_list|(
name|cmsObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error at retrieving nodes on subsumption bridge path"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processSubsumptionBridge
parameter_list|(
name|OntClass
name|parentClass
parameter_list|,
name|SubsumptionBridge
name|s
parameter_list|,
name|DObject
name|parentObject
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|String
name|predicateName
init|=
name|s
operator|.
name|getPredicateName
argument_list|()
decl_stmt|;
if|if
condition|(
name|predicateName
operator|.
name|equals
argument_list|(
literal|"child"
argument_list|)
condition|)
block|{
comment|// find all child nodes of the parentMode
for|for
control|(
name|DObject
name|childObject
range|:
name|parentObject
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|OntClass
name|childClass
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|childObject
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|parentClass
operator|.
name|addSubClass
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// find the ranges of the predicate whose subject is parentNode
for|for
control|(
name|DProperty
name|property
range|:
name|parentObject
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|DPropertyDefinition
name|propDef
init|=
name|property
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
comment|// propDef returns null if a * named property comes
comment|// TODO after handling * named properties, remove the null check
if|if
condition|(
name|propDef
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Property definition could not be got for property {}"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|propName
init|=
name|propDef
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|predicateName
argument_list|)
operator|||
name|propName
operator|.
name|contains
argument_list|(
name|predicateName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|propValues
init|=
name|property
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|refValue
range|:
name|propValues
control|)
block|{
try|try
block|{
comment|// TODO check other object property types such WEAKREFERENCE
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|==
name|PropType
operator|.
name|REFERENCE
condition|)
block|{
name|CMSObject
name|childObject
init|=
name|accessor
operator|.
name|getFirstNodeById
argument_list|(
name|refValue
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|OntClass
name|childClass
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|childObject
argument_list|)
decl_stmt|;
name|parentClass
operator|.
name|addSubClass
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|==
name|PropType
operator|.
name|NAME
condition|)
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|childObjects
init|=
name|accessor
operator|.
name|getNodeByName
argument_list|(
name|refValue
argument_list|,
name|session
argument_list|)
decl_stmt|;
for|for
control|(
name|CMSObject
name|child
range|:
name|childObjects
control|)
block|{
name|OntClass
name|childClass
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|parentClass
operator|.
name|addSubClass
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|==
name|PropType
operator|.
name|PATH
condition|)
block|{
name|CMSObject
name|childObject
init|=
name|accessor
operator|.
name|getFirstNodeByPath
argument_list|(
name|refValue
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|OntClass
name|childClass
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|childObject
argument_list|)
decl_stmt|;
name|parentClass
operator|.
name|addSubClass
argument_list|(
name|childClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"ERROR: Predicate path is wrong, the range is not a node"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error at processing subsumption bridge. Skipping..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|contentEquals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Properties added to nt:unstructured types (* named properties) are not handled yet"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

