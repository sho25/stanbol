begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|BaseRDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|RDFBridgeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|utils
operator|.
name|JCRUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RDFMapper} for JCR repositories.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|JCRRDFMapper
extends|extends
name|BaseRDFMapper
implements|implements
name|RDFMapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JCRRDFMapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * This list contains properties that will not be included in the RDF which is generated from content      * repository      */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|UriRef
argument_list|>
name|excludedProperties
decl_stmt|;
static|static
block|{
name|excludedProperties
operator|=
operator|new
name|ArrayList
argument_list|<
name|UriRef
argument_list|>
argument_list|()
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_HAS_URI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeRDFinRepository
parameter_list|(
name|Object
name|session
parameter_list|,
name|MGraph
name|annotatedGraph
parameter_list|)
block|{
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|rootObjects
init|=
name|RDFBridgeHelper
operator|.
name|getRootObjectsOfGraph
argument_list|(
name|annotatedGraph
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|root
range|:
name|rootObjects
control|)
block|{
name|String
name|nodeName
init|=
name|getObjectName
argument_list|(
name|root
argument_list|,
name|annotatedGraph
argument_list|)
decl_stmt|;
name|String
name|nodePath
init|=
name|getObjectPath
argument_list|(
name|root
argument_list|,
name|nodeName
argument_list|,
name|annotatedGraph
argument_list|)
decl_stmt|;
name|Node
name|parent
init|=
name|checkCreateParentNodes
argument_list|(
name|nodePath
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|createNode
argument_list|(
name|parent
argument_list|,
name|root
argument_list|,
name|nodeName
argument_list|,
name|annotatedGraph
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to save JCR session"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recursively creates the node itself and its children. If processed node already exists, it is updated      * with the new properties, a new node is created in the repository.      *       * @param parent      *            parent {@link Node} of the the node to be created      * @param nodeSubject      *            URI of the node to be created      * @param nodeName      *            name of the node to be created      * @param graph      *            annotated {@link MGraph}      * @param session      *            {@link Session} object to access repository      */
specifier|private
name|void
name|createNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|NonLiteral
name|nodeSubject
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Node
name|n
init|=
literal|null
decl_stmt|;
name|String
name|parentPath
init|=
literal|""
decl_stmt|;
try|try
block|{
name|parentPath
operator|=
name|parent
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|n
operator|=
name|createActualNode
argument_list|(
name|parent
argument_list|,
name|nodeSubject
argument_list|,
name|nodeName
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create node %s for parent %s. "
argument_list|,
name|nodeName
argument_list|,
name|parentPath
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create properties
name|createNodeProperties
argument_list|(
name|n
argument_list|,
name|nodeSubject
argument_list|,
name|graph
argument_list|,
name|session
argument_list|)
expr_stmt|;
comment|// create children
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|nodeSubject
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|childSubject
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|childName
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|createNode
argument_list|(
name|n
argument_list|,
name|childSubject
argument_list|,
name|childName
argument_list|,
name|graph
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method creates a node by using the specified parameters. It first check RDF primary type and tries      * to create the node with the type specified it the type is set. In the next step it checks mixin types      * and tries to set if there is any.      *       * @param parent      * @param nodeSubject      * @param nodeName      * @param graph      * @return      * @throws RepositoryException      */
specifier|private
name|Node
name|createActualNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|NonLiteral
name|nodeSubject
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|MGraph
name|graph
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|n
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|hasNode
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|n
operator|=
name|parent
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|nodeType
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|nodeSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|JCR_PRIMARY_TYPE
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeType
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|n
operator|=
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|n
operator|=
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|,
name|nodeType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create node %s with the type %s"
argument_list|,
name|nodeName
argument_list|,
name|nodeType
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|n
operator|=
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check mixin types
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|mixins
init|=
name|graph
operator|.
name|filter
argument_list|(
name|nodeSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|JCR_MIXIN_TYPES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|mixinType
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|mixins
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Resource
name|r
init|=
name|mixins
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
decl_stmt|;
try|try
block|{
name|mixinType
operator|=
name|RDFBridgeHelper
operator|.
name|getShortURIFromResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mixinType
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|n
operator|.
name|addMixin
argument_list|(
name|mixinType
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to set mixin type: {}"
argument_list|,
name|mixinType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|n
return|;
block|}
comment|/**      * Transforms the assertions belonging to a resource in the RDF data as properties in the content      * repository.      *       * @param n      * @param subject      * @param graph      * @param session      */
specifier|private
name|void
name|createNodeProperties
parameter_list|(
name|Node
name|n
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyInfo
argument_list|>
name|propVals
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyInfo
argument_list|>
argument_list|()
decl_stmt|;
name|createDefaultPropertiesForCMS
argument_list|(
name|n
argument_list|,
name|subject
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|propURI
init|=
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|t
operator|.
name|getPredicate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|t
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|propValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|resource
operator|instanceof
name|Literal
condition|)
block|{
name|propValue
operator|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|subject
argument_list|,
name|t
operator|.
name|getPredicate
argument_list|()
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|instanceof
name|UriRef
condition|)
block|{
name|propValue
operator|=
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propValue
operator|=
name|resource
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|propVals
operator|.
name|containsKey
argument_list|(
name|propURI
argument_list|)
condition|)
block|{
name|PropertyInfo
name|pInfo
init|=
name|propVals
operator|.
name|get
argument_list|(
name|propURI
argument_list|)
decl_stmt|;
name|pInfo
operator|.
name|addPropertyValue
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PropertyInfo
name|pInfo
init|=
operator|new
name|PropertyInfo
argument_list|()
decl_stmt|;
name|pInfo
operator|.
name|setPropertyType
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|pInfo
operator|.
name|addPropertyValue
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
name|propVals
operator|.
name|put
argument_list|(
name|propURI
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|propURI
range|:
name|propVals
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PropertyInfo
name|pInfo
init|=
name|propVals
operator|.
name|get
argument_list|(
name|propURI
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|singlePropValList
init|=
name|pInfo
operator|.
name|getPropertyValues
argument_list|()
decl_stmt|;
name|String
index|[]
name|singlePropVals
init|=
operator|new
name|String
index|[
name|singlePropValList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|singlePropValList
operator|.
name|toArray
argument_list|(
name|singlePropVals
argument_list|)
expr_stmt|;
name|String
name|propName
init|=
name|NamespaceEnum
operator|.
name|getShortName
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|propURI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// check whether the namespace prefix is registered in the JCR
comment|// repository
try|try
block|{
name|checkNamespaceForShortURI
argument_list|(
name|session
argument_list|,
name|propName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to check namespace for property: {}"
argument_list|,
name|propURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|boolean
name|isMultiple
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Property
name|p
init|=
name|n
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|isMultiple
operator|=
name|p
operator|.
name|isMultiple
argument_list|()
expr_stmt|;
if|if
condition|(
name|isMultiple
condition|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
operator|(
name|Value
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
operator|(
name|Value
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// assume property not found
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
operator|(
name|Value
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|singlePropVals
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|singlePropVals
index|[
literal|0
index|]
argument_list|,
name|pInfo
operator|.
name|getPropertyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|singlePropVals
argument_list|,
name|pInfo
operator|.
name|getPropertyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"{} property of updated/created with {}"
argument_list|,
name|propName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to update property: {} for node {}: "
argument_list|,
name|propName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createDefaultPropertiesForCMS
parameter_list|(
name|Node
name|n
parameter_list|,
name|NonLiteral
name|subject
parameter_list|)
block|{
name|String
name|uriPropShortURI
init|=
name|NamespaceEnum
operator|.
name|getShortName
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_HAS_URI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|n
operator|.
name|setProperty
argument_list|(
name|uriPropShortURI
argument_list|,
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|subject
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to set URI property of node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Takes a path and tries to check nodes that forms that path. If nodes do not exist, they are created.      *       * @param rootPath      *            path in which root objects will be created or existing one will be searched      * @param session      *            session to access repository      * @return the first level parent {@link Node} of the node specified with<code>nodePath</code> if there      *         is not any exception, otherwise returns<code>null</code>.      */
specifier|private
name|Node
name|checkCreateParentNodes
parameter_list|(
name|String
name|rootPath
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Node
name|n
decl_stmt|;
name|String
name|currentPath
decl_stmt|;
try|try
block|{
name|n
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|currentPath
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get Node for path: {}"
argument_list|,
name|rootPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
index|[]
name|pathSections
init|=
name|rootPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pathSections
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|n
operator|.
name|hasNode
argument_list|(
name|pathSections
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|addNode
argument_list|(
name|pathSections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|n
operator|=
name|n
operator|.
name|getNode
argument_list|(
name|pathSections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|currentPath
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get child node for name: {} of node: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pathSections
index|[
name|i
index|]
block|,
name|currentPath
block|}
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|generateRDFFromRepository
parameter_list|(
name|String
name|baseURI
parameter_list|,
name|Object
name|session
parameter_list|,
name|String
name|rootPath
parameter_list|)
throws|throws
name|RDFBridgeException
block|{
name|MGraph
name|cmsGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|Session
name|jcrSession
init|=
operator|(
name|Session
operator|)
name|session
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|targetNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Node
name|rootNode
init|=
name|jcrSession
operator|.
name|getNode
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|NodeIterator
name|it
init|=
name|rootNode
operator|.
name|getNodes
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|targetNodes
operator|.
name|add
argument_list|(
name|it
operator|.
name|nextNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve node having path: {} or its children"
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RDFBridgeException
argument_list|(
literal|"Failed to node having path: "
operator|+
name|rootPath
operator|+
literal|" or its children"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Node
name|n
range|:
name|targetNodes
control|)
block|{
comment|// get name to show in debug info
name|String
name|name
init|=
literal|""
decl_stmt|;
try|try
block|{
name|name
operator|=
name|n
operator|.
name|getName
argument_list|()
expr_stmt|;
name|cmsGraph
operator|.
name|addAll
argument_list|(
name|getGraphForNode
argument_list|(
name|baseURI
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Repository exception while processing node having name: {}"
argument_list|,
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cmsGraph
return|;
block|}
comment|/**      * Generates an RDF from the specified {@link Node}. It annotates the resource representing the Node with      * {@link CMSAdapterVocabulary#CMS_OBJECT}. In the next step, it transforms the properties of the Node to      * the RDF. In the last step, it checks the child Nodes of the processed Node and executes same operations      * for the child.      *       * @param n      * @return      */
name|MGraph
name|getGraphForNode
parameter_list|(
name|String
name|baseURI
parameter_list|,
name|Node
name|n
parameter_list|)
block|{
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
comment|// create CMS Object annotation
name|NonLiteral
name|subject
init|=
name|getNodeURI
argument_list|(
name|baseURI
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
return|return
name|graph
return|;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|RDFBridgeHelper
operator|.
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
literal|""
decl_stmt|;
try|try
block|{
name|nodeName
operator|=
name|n
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve name of node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// properties
try|try
block|{
name|createPropertiesAsRDF
argument_list|(
name|n
argument_list|,
name|subject
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve properties of node: {}"
argument_list|,
name|nodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// children
name|NodeIterator
name|nit
decl_stmt|;
try|try
block|{
name|nit
operator|=
name|n
operator|.
name|getNodes
argument_list|()
expr_stmt|;
while|while
condition|(
name|nit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Node
name|child
init|=
name|nit
operator|.
name|nextNode
argument_list|()
decl_stmt|;
name|NonLiteral
name|childURI
init|=
name|getNodeURI
argument_list|(
name|baseURI
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childURI
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childURI
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|subject
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|addAll
argument_list|(
name|getGraphForNode
argument_list|(
name|baseURI
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error while processing children of node: {}"
argument_list|,
name|nodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|graph
return|;
block|}
specifier|private
name|void
name|createPropertiesAsRDF
parameter_list|(
name|Node
name|n
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|MGraph
name|graph
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|PropertyIterator
name|pit
init|=
name|n
operator|.
name|getProperties
argument_list|()
decl_stmt|;
while|while
condition|(
name|pit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Property
name|p
init|=
name|pit
operator|.
name|nextProperty
argument_list|()
decl_stmt|;
name|UriRef
name|pURI
init|=
name|getPropertyURI
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pURI
operator|==
literal|null
operator|||
name|excludedProperties
operator|.
name|contains
argument_list|(
name|pURI
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|JCRUtils
operator|.
name|getTypedPropertyValues
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|JCRUtils
operator|.
name|getTypedPropertyValue
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|val
range|:
name|values
control|)
block|{
comment|/*                      * As JCR does not support retrieval of values of URI typed properties, object properties                      * are reflected as String properties in JCR. So, when creating RDF from JCR repository,                      * currently just look at the value of property starts with "http" prefix.                      *                       * TODO: Other dirty workaround may be including some prefixes to the object properties to                      * identify them                      *                       * TODO: Fix this when JCR supports retrieval of URI typed property values                      */
try|try
block|{
name|String
name|valStr
init|=
operator|(
name|String
operator|)
name|val
decl_stmt|;
if|if
condition|(
name|valStr
operator|.
name|startsWith
argument_list|(
literal|"http"
argument_list|)
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|pURI
argument_list|,
operator|new
name|UriRef
argument_list|(
name|valStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore the exception
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|pURI
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to process property of node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|path
init|=
literal|""
decl_stmt|;
try|try
block|{
name|path
operator|=
name|n
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get path of node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
literal|""
decl_stmt|;
try|try
block|{
name|name
operator|=
name|n
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get name of the node"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|RDFBridgeHelper
operator|.
name|createDefaultPropertiesForRDF
argument_list|(
name|subject
argument_list|,
name|graph
argument_list|,
name|path
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|UriRef
name|getNodeURI
parameter_list|(
name|String
name|baseURI
parameter_list|,
name|Node
name|n
parameter_list|)
block|{
name|String
name|uriPropShortURI
init|=
name|NamespaceEnum
operator|.
name|getShortName
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_HAS_URI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
literal|""
decl_stmt|;
name|String
name|nodeURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nodeName
operator|=
name|n
operator|.
name|getName
argument_list|()
expr_stmt|;
name|Property
name|p
init|=
name|n
operator|.
name|getProperty
argument_list|(
name|uriPropShortURI
argument_list|)
decl_stmt|;
name|nodeURI
operator|=
name|p
operator|.
name|getString
argument_list|()
expr_stmt|;
return|return
operator|new
name|UriRef
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|nodeURI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve URI from property for node {}"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|nodeURI
operator|=
name|RDFBridgeHelper
operator|.
name|appendLocalName
argument_list|(
name|baseURI
argument_list|,
name|n
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|UriRef
argument_list|(
name|nodeURI
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve identifer to be used as URI for node {}"
argument_list|,
name|nodeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|UriRef
name|getPropertyURI
parameter_list|(
name|Property
name|p
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|name
operator|=
name|NamespaceEnum
operator|.
name|cms
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|name
expr_stmt|;
block|}
if|if
condition|(
name|RDFBridgeHelper
operator|.
name|isShortNameResolvable
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to resolve property: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|checkNamespaceForShortURI
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|shortURI
parameter_list|)
throws|throws
name|NamespaceException
throws|,
name|RepositoryException
block|{
name|String
name|prefix
init|=
name|shortURI
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|session
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|namespaceURI
init|=
name|NamespaceEnum
operator|.
name|forPrefix
argument_list|(
name|prefix
argument_list|)
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|registerNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canMap
parameter_list|(
name|String
name|connectionType
parameter_list|)
block|{
return|return
name|connectionType
operator|.
name|contentEquals
argument_list|(
literal|"JCR"
argument_list|)
return|;
block|}
specifier|private
class|class
name|PropertyInfo
block|{
specifier|private
name|int
name|type
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|propVals
decl_stmt|;
specifier|public
name|void
name|addPropertyValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|propVals
operator|==
literal|null
condition|)
block|{
name|propVals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|propVals
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPropertyValues
parameter_list|()
block|{
return|return
name|propVals
return|;
block|}
specifier|public
name|void
name|setPropertyType
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|type
operator|=
name|JCRUtils
operator|.
name|getPropertyTypeByResource
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getPropertyType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
block|}
end_class

end_unit

