begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|MappingModelParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|BridgeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|ConceptBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|PropertyBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|SubsumptionBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_class
specifier|public
class|class
name|ConceptBridgesProcesser
extends|extends
name|JCRProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConceptBridgesProcesser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ConceptBridgesProcesser
parameter_list|(
name|MappingEngine
name|mappingEngine
parameter_list|)
block|{
name|super
argument_list|(
name|mappingEngine
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processUpdates
parameter_list|(
name|List
argument_list|<
name|CMSObject
argument_list|>
name|cmsObjects
parameter_list|)
block|{
name|BridgeDefinitions
name|bridgeDefinitions
init|=
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
decl_stmt|;
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ConceptBridge
argument_list|>
name|conceptBridges
init|=
name|MappingModelParser
operator|.
name|getConceptBridges
argument_list|(
name|bridgeDefinitions
argument_list|)
decl_stmt|;
for|for
control|(
name|ConceptBridge
name|bridge
range|:
name|conceptBridges
control|)
block|{
try|try
block|{
name|boolean
name|subsumptionExists
init|=
name|bridge
operator|.
name|getQuery
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/%"
argument_list|)
decl_stmt|;
for|for
control|(
name|CMSObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|cmsObject
operator|.
name|getPath
argument_list|()
argument_list|,
name|bridge
operator|.
name|getQuery
argument_list|()
argument_list|)
condition|)
block|{
name|processConceptBridge
argument_list|(
name|engine
argument_list|,
name|subsumptionExists
argument_list|,
name|adapter
operator|.
name|wrapAsDObject
argument_list|(
name|cmsObject
argument_list|)
argument_list|,
name|bridge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can not process one of the bridges"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processBridges
parameter_list|()
block|{
name|BridgeDefinitions
name|bridgeDefinitions
init|=
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
decl_stmt|;
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ConceptBridge
argument_list|>
name|conceptBridges
init|=
name|MappingModelParser
operator|.
name|getConceptBridges
argument_list|(
name|bridgeDefinitions
argument_list|)
decl_stmt|;
for|for
control|(
name|ConceptBridge
name|bridge
range|:
name|conceptBridges
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|cmsObjects
init|=
name|this
operator|.
name|accessor
operator|.
name|getNodeByPath
argument_list|(
name|bridge
operator|.
name|getQuery
argument_list|()
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|boolean
name|subsumptionExists
init|=
name|bridge
operator|.
name|getQuery
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/%"
argument_list|)
decl_stmt|;
for|for
control|(
name|CMSObject
name|classificationObject
range|:
name|cmsObjects
control|)
block|{
name|processConceptBridge
argument_list|(
name|engine
argument_list|,
name|subsumptionExists
argument_list|,
name|adapter
operator|.
name|wrapAsDObject
argument_list|(
name|classificationObject
argument_list|)
argument_list|,
name|bridge
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can not process one of the bridges"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processConceptBridge
parameter_list|(
name|MappingEngine
name|mappingEngine
parameter_list|,
name|boolean
name|subsumptionExists
parameter_list|,
name|DObject
name|cmsObject
parameter_list|,
name|ConceptBridge
name|conceptBridge
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|OntClass
name|c
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|cmsObject
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subsumptionExists
condition|)
block|{
comment|// if the processed node is located in sublevels add it as a subclass to parent
name|DObject
name|parentObject
init|=
name|cmsObject
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentObject
operator|!=
literal|null
condition|)
block|{
name|OntClass
name|parentClass
init|=
name|ontologyResourceHelper
operator|.
name|createOntClassByCMSObject
argument_list|(
name|parentObject
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|parentClass
operator|.
name|addSubClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If SubsumptionBridgeExists....
name|List
argument_list|<
name|SubsumptionBridge
argument_list|>
name|subsumptionBridgeList
init|=
name|conceptBridge
operator|.
name|getSubsumptionBridge
argument_list|()
decl_stmt|;
name|SubsumptionBridgesProcesser
name|sbp
init|=
operator|new
name|SubsumptionBridgesProcesser
argument_list|(
name|mappingEngine
argument_list|)
decl_stmt|;
for|for
control|(
name|SubsumptionBridge
name|bridge
range|:
name|subsumptionBridgeList
control|)
block|{
comment|// create subsumptionrelationships....
name|sbp
operator|.
name|processSubsumptionBridge
argument_list|(
name|c
argument_list|,
name|bridge
argument_list|,
name|cmsObject
argument_list|)
expr_stmt|;
block|}
comment|// If PropertyBridges Exist.....
name|List
argument_list|<
name|PropertyBridge
argument_list|>
name|propertyBridgeList
init|=
name|conceptBridge
operator|.
name|getPropertyBridge
argument_list|()
decl_stmt|;
name|PropertyBridgesProcesser
name|pbp
init|=
operator|new
name|PropertyBridgesProcesser
argument_list|(
name|mappingEngine
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyBridge
name|bridge
range|:
name|propertyBridgeList
control|)
block|{
comment|// create subsumptionrelationships....
name|pbp
operator|.
name|processConceptPropertyBridge
argument_list|(
name|c
argument_list|,
name|bridge
argument_list|,
name|cmsObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

