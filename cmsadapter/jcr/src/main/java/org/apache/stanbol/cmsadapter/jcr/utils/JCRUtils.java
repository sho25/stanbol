begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TypedLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|NamespaceEnum
import|;
end_import

begin_class
specifier|public
class|class
name|JCRUtils
block|{
specifier|private
specifier|static
specifier|final
name|UriRef
name|base64Uri
init|=
name|dataTypeURI
argument_list|(
literal|"base64Binary"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|dateTimeUri
init|=
name|dataTypeURI
argument_list|(
literal|"dateTime"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|booleanUri
init|=
name|dataTypeURI
argument_list|(
literal|"boolean"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|stringUri
init|=
name|dataTypeURI
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|xsdInteger
init|=
name|dataTypeURI
argument_list|(
literal|"integer"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|xsdInt
init|=
name|dataTypeURI
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|xsdShort
init|=
name|dataTypeURI
argument_list|(
literal|"short"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|xsdLong
init|=
name|dataTypeURI
argument_list|(
literal|"long"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|xsdDouble
init|=
name|dataTypeURI
argument_list|(
literal|"double"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|xsdAnyURI
init|=
name|dataTypeURI
argument_list|(
literal|"anyURI"
argument_list|)
decl_stmt|;
comment|/**      * This method converts the raw values of a property based on the specified property type.      *       * @param propertyType      *            type of a {@link Property}      * @param values      *            values of a {@link Property}      * @return typed values      */
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|getTypedPropertyValues
parameter_list|(
name|int
name|propertyType
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|typedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Value
name|val
range|:
name|values
control|)
block|{
name|typedValues
operator|.
name|add
argument_list|(
name|getTypedPropertyValue
argument_list|(
name|propertyType
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|typedValues
return|;
block|}
comment|/**      * This method converts the raw value of a property based on the specified property type.      *       * @param propertyType      *            type of a {@link Property}      * @param value      *            values of a {@link Property}      * @return typed value      */
specifier|public
specifier|static
name|Object
name|getTypedPropertyValue
parameter_list|(
name|int
name|propertyType
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|RepositoryException
block|{
switch|switch
condition|(
name|propertyType
condition|)
block|{
case|case
name|PropertyType
operator|.
name|STRING
case|:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|BINARY
case|:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|BOOLEAN
case|:
return|return
name|value
operator|.
name|getBoolean
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|DATE
case|:
return|return
name|value
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|URI
case|:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|DOUBLE
case|:
return|return
name|value
operator|.
name|getDouble
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|DECIMAL
case|:
return|return
name|value
operator|.
name|getDecimal
argument_list|()
operator|.
name|toBigInteger
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|LONG
case|:
return|return
name|value
operator|.
name|getLong
argument_list|()
return|;
case|case
name|PropertyType
operator|.
name|PATH
case|:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
default|default:
return|return
name|value
operator|.
name|getString
argument_list|()
return|;
block|}
block|}
comment|/**      * Return related {@link PropertyType} according to data type of a {@link Resource} if it is an instance      * of {@link TypedLiteral} or {@link UriRef}, otherwise it return {@code PropertyType#STRING} as default      * type.      *       * @param r      * @link {@link Resource} instance of which property type is demanded      * @return related {@link PropertyType}      */
specifier|public
specifier|static
name|int
name|getPropertyTypeByResource
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|TypedLiteral
condition|)
block|{
name|UriRef
name|type
init|=
operator|(
operator|(
name|TypedLiteral
operator|)
name|r
operator|)
operator|.
name|getDataType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|stringUri
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|base64Uri
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|BINARY
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|booleanUri
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|BOOLEAN
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|dateTimeUri
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DATE
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|xsdAnyURI
argument_list|)
condition|)
block|{
comment|/*                  * Normally this case should return PropertyType.URI, but JCR API seems to fail when                  * retrieving values of URI typed properties.                  */
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|xsdDouble
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DOUBLE
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|xsdInt
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DECIMAL
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|xsdInteger
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DECIMAL
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|xsdLong
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|LONG
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|xsdShort
argument_list|)
condition|)
block|{
return|return
name|PropertyType
operator|.
name|DECIMAL
return|;
block|}
else|else
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|r
operator|instanceof
name|UriRef
condition|)
block|{
comment|/*              * Normally this case should return PropertyType.URI, but JCR API seems to fail when retrieving              * values of URI typed properties.              */
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
else|else
block|{
return|return
name|PropertyType
operator|.
name|STRING
return|;
block|}
block|}
specifier|private
specifier|static
name|UriRef
name|dataTypeURI
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|xsd
operator|+
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

