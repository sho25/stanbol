begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_class
specifier|public
class|class
name|CMISUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RDF_METADATA_DOCUMENT_EXTENSION
init|=
literal|"_metadata"
decl_stmt|;
comment|/**      * This method converts the raw values of a property based on the specified {@link PropertyType}.      *       * @param property      *            type of a {@link Property}      * @param values      *            values of a {@link Property}      * @return typed values      */
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|getTypedPropertyValues
parameter_list|(
name|PropertyType
name|property
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|typedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|typedValues
operator|.
name|add
argument_list|(
name|getTypedPropertyValue
argument_list|(
name|property
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|typedValues
return|;
block|}
comment|/**      * This method converts raw value of a property based on the specified {@link PropertyType}.      *       * @param propertyType      *            property type of a {@link Property}      * @param value      *            value of a {@link Property}      * @return typed value      */
specifier|public
specifier|static
name|Object
name|getTypedPropertyValue
parameter_list|(
name|PropertyType
name|propertyType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
switch|switch
condition|(
name|propertyType
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
case|case
name|DECIMAL
case|:
return|return
operator|(
name|Integer
operator|)
name|value
return|;
case|case
name|DATETIME
case|:
return|return
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
return|;
case|case
name|HTML
case|:
comment|// not meet with this property
return|return
literal|null
return|;
case|case
name|ID
case|:
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
case|case
name|INTEGER
case|:
return|return
operator|(
operator|(
name|BigInteger
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|STRING
case|:
return|return
name|value
return|;
case|case
name|URI
case|:
comment|// not meet with this property
return|return
operator|new
name|UriRef
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

