begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|data
operator|.
name|ContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|BaseTypeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|repository
operator|.
name|CMISObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|utils
operator|.
name|CMISUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|RDFBridgeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|ContentItemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|ContenthubFeeder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|SolrContentItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|contenthub
operator|.
name|servicesapi
operator|.
name|store
operator|.
name|SolrStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This an implementation of {@link ContenthubFeeder} interface for CMIS repositories. It basically transforms  * {@link Document}s in the CMIS content repository into content items in Contenthub based on the paths or IDs  * of documents. Properties (e.g<i>cmis:createdBy</i>) of the documents that are not included in the  *<code>excludedProperties</code> list below, are indexed as metadata of the content item. Furthermore,  * triples extracted from the metadata documents whose names are formed by<b>"actual_document_name" +  * "_metadata"</b> are also considered as metadata of the actual document in a similar way as default CMIS  * properties. Metadata of the the content items provides faceted search feature in the Contenthub.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|factory
operator|=
name|ContenthubFeeder
operator|.
name|CMIS_CONTENTUB_FEEDER_FACTORY
argument_list|)
specifier|public
class|class
name|CMISContenthubFeeder
implements|implements
name|ContenthubFeeder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CMISContenthubFeeder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|SolrStore
name|solrStore
decl_stmt|;
annotation|@
name|Reference
name|Parser
name|parser
decl_stmt|;
specifier|private
name|Session
name|session
init|=
literal|null
decl_stmt|;
comment|/*      * These properties will not be indexed      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|excludedProperties
decl_stmt|;
static|static
block|{
name|excludedProperties
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:objectId"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:changeToken"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:versionSeriesId"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:versionSeriesCheckedOutId"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:versionSeriesCheckedOutBy"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:contentStreamId"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:contentStreamLength"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:isImmutable"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:isMajorVersion"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:isLatestMajorVersion"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:isVersionSeriesCheckedOut"
argument_list|)
expr_stmt|;
name|excludedProperties
operator|.
name|add
argument_list|(
literal|"cmis:contentStreamFileName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|checkSession
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemByID
parameter_list|(
name|String
name|contentItemID
parameter_list|)
block|{
name|CmisObject
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|session
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|contentItemID
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve document having id: {}"
argument_list|,
name|contentItemID
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|processDocumentAndSubmitToContenthub
argument_list|(
operator|(
name|Document
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemByPath
parameter_list|(
name|String
name|contentItemPath
parameter_list|)
block|{
name|CmisObject
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|session
operator|.
name|getObjectByPath
argument_list|(
name|contentItemPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve document having path: {}"
argument_list|,
name|contentItemPath
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|processDocumentAndSubmitToContenthub
argument_list|(
operator|(
name|Document
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemsUnderPath
parameter_list|(
name|String
name|rootPath
parameter_list|)
block|{
name|CmisObject
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|session
operator|.
name|getObjectByPath
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve object having path: {}"
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|processDocumentAndSubmitToContenthub
argument_list|(
operator|(
name|Document
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Document
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
name|getDocumentsUnderFolder
argument_list|(
operator|(
name|Folder
operator|)
name|o
argument_list|,
name|documents
argument_list|)
expr_stmt|;
for|for
control|(
name|Document
name|d
range|:
name|documents
control|)
block|{
name|processDocumentAndSubmitToContenthub
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitContentItemsByCustomFilter
parameter_list|(
name|ContentItemFilter
name|customContentItemFilter
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is not supported in this implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemByID
parameter_list|(
name|String
name|contentItemID
parameter_list|)
block|{
name|solrStore
operator|.
name|deleteById
argument_list|(
name|contentItemID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemByPath
parameter_list|(
name|String
name|contentItemPath
parameter_list|)
block|{
name|CmisObject
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|session
operator|.
name|getObjectByPath
argument_list|(
name|contentItemPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve document having path: {}"
argument_list|,
name|contentItemPath
argument_list|)
expr_stmt|;
return|return;
block|}
name|solrStore
operator|.
name|deleteById
argument_list|(
name|o
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemsUnderPath
parameter_list|(
name|String
name|rootPath
parameter_list|)
block|{
name|CmisObject
name|o
decl_stmt|;
try|try
block|{
name|o
operator|=
name|session
operator|.
name|getObjectByPath
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve document having path: {}"
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|Document
argument_list|>
name|documents
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|documents
operator|.
name|add
argument_list|(
operator|(
name|Document
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDocumentsUnderFolder
argument_list|(
operator|(
name|Folder
operator|)
name|o
argument_list|,
name|documents
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Document
name|d
range|:
name|documents
control|)
block|{
name|solrStore
operator|.
name|deleteById
argument_list|(
name|d
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContentItemsByCustomFilter
parameter_list|(
name|ContentItemFilter
name|customContentItemFilter
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation is not supported in this implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canFeed
parameter_list|(
name|String
name|connectionType
parameter_list|)
block|{
return|return
name|connectionType
operator|.
name|contentEquals
argument_list|(
name|ConnectionInfo
operator|.
name|CMIS_CONNECTION_STRING
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkSession
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|ContenthubFeeder
operator|.
name|PROP_SESSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROP_SESSION
argument_list|,
literal|"A CMIS Session should be provided to activate this component."
argument_list|)
throw|;
block|}
name|this
operator|.
name|session
operator|=
operator|(
name|Session
operator|)
name|value
expr_stmt|;
block|}
specifier|private
name|void
name|processDocumentAndSubmitToContenthub
parameter_list|(
name|Document
name|d
parameter_list|)
block|{
name|byte
index|[]
name|content
decl_stmt|;
try|try
block|{
name|content
operator|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|d
operator|.
name|getContentStream
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
operator|||
name|content
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve content for node: {}"
argument_list|,
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get bytes from binary content of document: {}"
argument_list|,
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|mimeType
init|=
name|d
operator|.
name|getContentStreamMimeType
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
init|=
name|getConstraintsFromDocument
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|SolrContentItem
name|sci
init|=
name|solrStore
operator|.
name|create
argument_list|(
name|d
operator|.
name|getId
argument_list|()
argument_list|,
name|content
argument_list|,
name|mimeType
argument_list|,
name|constraints
argument_list|)
decl_stmt|;
name|solrStore
operator|.
name|enhanceAndPut
argument_list|(
name|sci
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Document submitted to Contenthub."
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Id: {}"
argument_list|,
name|sci
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Mime type: {}"
argument_list|,
name|sci
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Constraints: {}"
argument_list|,
name|sci
operator|.
name|getConstraints
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getConstraintsFromDocument
parameter_list|(
name|Document
name|d
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|docProps
init|=
name|d
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Property
argument_list|<
name|?
argument_list|>
name|p
range|:
name|docProps
control|)
block|{
if|if
condition|(
operator|!
name|excludedProperties
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getQueryName
argument_list|()
argument_list|)
condition|)
block|{
name|PropertyType
name|t
init|=
name|p
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiValued
argument_list|()
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|CMISUtils
operator|.
name|getTypedPropertyValues
argument_list|(
name|t
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|CMISUtils
operator|.
name|getTypedPropertyValue
argument_list|(
name|t
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|constraints
operator|.
name|put
argument_list|(
name|p
operator|.
name|getQueryName
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
name|checkMetadataDocument
argument_list|(
name|d
argument_list|,
name|constraints
argument_list|)
expr_stmt|;
return|return
name|constraints
return|;
block|}
specifier|private
name|void
name|checkMetadataDocument
parameter_list|(
name|Document
name|d
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|constraints
parameter_list|)
block|{
name|List
argument_list|<
name|Folder
argument_list|>
name|parents
init|=
name|d
operator|.
name|getParents
argument_list|()
decl_stmt|;
for|for
control|(
name|Folder
name|parent
range|:
name|parents
control|)
block|{
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|children
init|=
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CmisObject
name|child
init|=
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasType
argument_list|(
name|child
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
operator|&&
name|child
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getName
argument_list|()
operator|+
name|CMISUtils
operator|.
name|RDF_METADATA_DOCUMENT_EXTENSION
argument_list|)
condition|)
block|{
name|MGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|ContentStream
name|cs
init|=
operator|(
operator|(
name|Document
operator|)
name|child
operator|)
operator|.
name|getContentStream
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|metadata
argument_list|,
name|cs
operator|.
name|getStream
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|triples
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|triples
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|triples
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|predicate
init|=
name|t
operator|.
name|getPredicate
argument_list|()
operator|.
name|getUnicodeString
argument_list|()
decl_stmt|;
name|String
name|shortPredicate
init|=
name|NamespaceEnum
operator|.
name|getShortName
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|t
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|propValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|resource
operator|instanceof
name|Literal
condition|)
block|{
name|propValue
operator|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|instanceof
name|UriRef
condition|)
block|{
name|propValue
operator|=
operator|(
operator|(
name|UriRef
operator|)
name|resource
operator|)
operator|.
name|getUnicodeString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|propValue
operator|=
name|resource
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|constraints
operator|.
name|containsKey
argument_list|(
name|shortPredicate
argument_list|)
condition|)
block|{
name|constraints
operator|.
name|get
argument_list|(
name|shortPredicate
argument_list|)
operator|.
name|add
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|valueList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|valueList
operator|.
name|add
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
name|constraints
operator|.
name|put
argument_list|(
name|shortPredicate
argument_list|,
name|valueList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|getDocumentsUnderFolder
parameter_list|(
name|Folder
name|f
parameter_list|,
name|List
argument_list|<
name|Document
argument_list|>
name|documentList
parameter_list|)
block|{
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|childs
init|=
name|f
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|childs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CmisObject
name|child
init|=
name|childs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasType
argument_list|(
name|child
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_FOLDER
argument_list|)
condition|)
block|{
name|getDocumentsUnderFolder
argument_list|(
operator|(
name|Folder
operator|)
name|child
argument_list|,
name|documentList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasType
argument_list|(
name|child
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|String
name|documentName
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|documentName
operator|.
name|endsWith
argument_list|(
name|CMISUtils
operator|.
name|RDF_METADATA_DOCUMENT_EXTENSION
argument_list|)
condition|)
block|{
name|documentList
operator|.
name|add
argument_list|(
operator|(
name|Document
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|hasType
parameter_list|(
name|CmisObject
name|o
parameter_list|,
name|BaseTypeId
name|type
parameter_list|)
block|{
return|return
name|o
operator|.
name|getBaseTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

