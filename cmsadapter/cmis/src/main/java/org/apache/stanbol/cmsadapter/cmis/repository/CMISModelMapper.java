begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|RelationshipType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|BaseTypeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
import|;
end_import

begin_class
specifier|public
class|class
name|CMISModelMapper
block|{
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|XML_DATETIME_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-mm-dd HH:mm:ssZ"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|CMSObject
name|getCMSObject
parameter_list|(
name|CmisObject
name|object
parameter_list|)
block|{
name|BaseTypeId
name|baseTypeId
init|=
name|object
operator|.
name|getBaseTypeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseTypeId
operator|.
name|equals
argument_list|(
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
return|return
name|getCMSObjectFromDocument
argument_list|(
operator|(
name|Document
operator|)
name|object
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|baseTypeId
operator|.
name|equals
argument_list|(
name|BaseTypeId
operator|.
name|CMIS_FOLDER
argument_list|)
condition|)
block|{
return|return
name|getCMSObjectFromFolder
argument_list|(
operator|(
name|Folder
operator|)
name|object
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected cmis:document or cmis:folder, found "
operator|+
name|object
operator|.
name|getBaseTypeId
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CMSObject
name|getCMSObjectFromDocument
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|CMSObject
name|cmsObject
init|=
operator|new
name|CMSObject
argument_list|()
decl_stmt|;
name|cmsObject
operator|.
name|setUniqueRef
argument_list|(
name|document
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|separateNamespace
argument_list|(
name|document
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cmsObject
operator|.
name|setLocalname
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cmsObject
operator|.
name|setNamespace
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// TODO Handle Documents with multiple paths
name|cmsObject
operator|.
name|setPath
argument_list|(
name|document
operator|.
name|getParents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|+
literal|"/"
operator|+
name|document
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cmsObject
operator|.
name|setObjectTypeRef
argument_list|(
name|document
operator|.
name|getType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// TODO Handle documents with multiple parents
name|cmsObject
operator|.
name|setParentRef
argument_list|(
name|document
operator|.
name|getParents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cmsObject
return|;
block|}
specifier|private
specifier|static
name|CMSObject
name|getCMSObjectFromFolder
parameter_list|(
name|Folder
name|folder
parameter_list|)
block|{
name|CMSObject
name|cmsObject
init|=
operator|new
name|CMSObject
argument_list|()
decl_stmt|;
name|cmsObject
operator|.
name|setUniqueRef
argument_list|(
name|folder
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|separateNamespace
argument_list|(
name|folder
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cmsObject
operator|.
name|setLocalname
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|cmsObject
operator|.
name|setNamespace
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// TODO Handle Folders with multiple paths
name|cmsObject
operator|.
name|setPath
argument_list|(
name|folder
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|cmsObject
operator|.
name|setObjectTypeRef
argument_list|(
name|folder
operator|.
name|getType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|folder
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// TODO Handle folders with multiple parents
name|cmsObject
operator|.
name|setParentRef
argument_list|(
name|folder
operator|.
name|getParents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cmsObject
return|;
block|}
specifier|public
specifier|static
name|ObjectTypeDefinition
name|getObjectTypeDefinition
parameter_list|(
name|ObjectType
name|typeDef
parameter_list|)
block|{
name|ObjectTypeDefinition
name|otd
init|=
operator|new
name|ObjectTypeDefinition
argument_list|()
decl_stmt|;
name|otd
operator|.
name|setLocalname
argument_list|(
name|typeDef
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|otd
operator|.
name|setNamespace
argument_list|(
name|typeDef
operator|.
name|getLocalNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|otd
operator|.
name|setUniqueRef
argument_list|(
name|typeDef
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resolve super types recursively
name|ObjectType
name|parentType
init|=
name|typeDef
operator|.
name|getParentType
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentType
operator|!=
literal|null
condition|)
block|{
name|otd
operator|.
name|getParentRef
argument_list|()
operator|.
name|add
argument_list|(
name|parentType
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|parentType
operator|=
name|parentType
operator|.
name|getParentType
argument_list|()
expr_stmt|;
block|}
return|return
name|otd
return|;
block|}
specifier|public
specifier|static
name|Property
name|getProperty
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Property
argument_list|<
name|?
argument_list|>
name|cmisProperty
parameter_list|)
block|{
name|Property
name|property
init|=
operator|new
name|Property
argument_list|()
decl_stmt|;
name|property
operator|.
name|setLocalname
argument_list|(
name|cmisProperty
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// property.setType(convertPropertyType(cmisProperty.getType()));
name|property
operator|.
name|setContainerObjectRef
argument_list|(
name|node
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setSourceObjectTypeRef
argument_list|(
name|node
operator|.
name|getObjectTypeRef
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|.
name|setPropertyDefinition
argument_list|(
name|getPropertyDefinition
argument_list|(
name|cmisProperty
operator|.
name|getDefinition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmisProperty
operator|.
name|getValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|value
range|:
name|cmisProperty
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|cmisProperty
operator|.
name|getType
argument_list|()
operator|==
name|PropertyType
operator|.
name|DATETIME
condition|)
block|{
name|Calendar
name|cal
init|=
operator|(
name|Calendar
operator|)
name|value
decl_stmt|;
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
name|XML_DATETIME_FORMAT
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|property
return|;
block|}
specifier|public
specifier|static
name|PropertyDefinition
name|getPropertyDefinition
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|definitions
operator|.
name|PropertyDefinition
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|PropertyDefinition
name|propDef
init|=
operator|new
name|PropertyDefinition
argument_list|()
decl_stmt|;
name|propDef
operator|.
name|setUniqueRef
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|separateNamespace
argument_list|(
name|type
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|propDef
operator|.
name|setLocalname
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|propDef
operator|.
name|setNamespace
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|propDef
operator|.
name|setRequired
argument_list|(
name|type
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Set cardinality
name|propDef
operator|.
name|setPropertyType
argument_list|(
name|convertPropertyType
argument_list|(
name|type
operator|.
name|getPropertyType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|propDef
return|;
block|}
specifier|public
specifier|static
name|PropertyDefinition
name|getRelationshipType
parameter_list|(
name|RelationshipType
name|relType
parameter_list|)
block|{
name|PropertyDefinition
name|propDef
init|=
operator|new
name|PropertyDefinition
argument_list|()
decl_stmt|;
name|propDef
operator|.
name|setUniqueRef
argument_list|(
name|relType
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|propDef
operator|.
name|setLocalname
argument_list|(
name|relType
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|propDef
operator|.
name|setNamespace
argument_list|(
name|relType
operator|.
name|getLocalNamespace
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Set cardinality
name|propDef
operator|.
name|setPropertyType
argument_list|(
name|PropType
operator|.
name|REFERENCE
argument_list|)
expr_stmt|;
return|return
name|propDef
return|;
block|}
specifier|private
specifier|static
name|PropType
name|convertPropertyType
parameter_list|(
name|PropertyType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
name|PropType
operator|.
name|BOOLEAN
return|;
case|case
name|DATETIME
case|:
return|return
name|PropType
operator|.
name|DATE
return|;
case|case
name|DECIMAL
case|:
return|return
name|PropType
operator|.
name|DECIMAL
return|;
case|case
name|HTML
case|:
return|return
name|PropType
operator|.
name|HTML
return|;
case|case
name|ID
case|:
return|return
name|PropType
operator|.
name|REFERENCE
return|;
case|case
name|INTEGER
case|:
return|return
name|PropType
operator|.
name|INTEGER
return|;
case|case
name|STRING
case|:
return|return
name|PropType
operator|.
name|STRING
return|;
case|case
name|URI
case|:
return|return
name|PropType
operator|.
name|URI
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|CMSObject
argument_list|>
name|convertCMISObjects
parameter_list|(
name|List
argument_list|<
name|CmisObject
argument_list|>
name|cmisObjects
parameter_list|)
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|cmsObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|CMSObject
argument_list|>
argument_list|(
name|cmisObjects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CmisObject
name|cmisObject
range|:
name|cmisObjects
control|)
block|{
name|cmsObjects
operator|.
name|add
argument_list|(
name|getCMSObject
argument_list|(
name|cmisObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cmsObjects
return|;
block|}
specifier|public
specifier|static
name|void
name|fillProperties
parameter_list|(
name|CmisObject
name|cmisOBject
parameter_list|,
name|CMSObject
name|node
parameter_list|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Property
argument_list|<
name|?
argument_list|>
name|property
range|:
name|cmisOBject
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|node
operator|.
name|getProperty
argument_list|()
operator|.
name|add
argument_list|(
name|getProperty
argument_list|(
name|node
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|fillPropertyDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|ObjectType
name|objectType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|definitions
operator|.
name|PropertyDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|definitions
init|=
name|objectType
operator|.
name|getPropertyDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|definitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|definitions
operator|.
name|PropertyDefinition
argument_list|<
name|?
argument_list|>
name|propDef
range|:
name|definitions
operator|.
name|values
argument_list|()
control|)
block|{
name|instance
operator|.
name|getPropertyDefinition
argument_list|()
operator|.
name|add
argument_list|(
name|getPropertyDefinition
argument_list|(
name|propDef
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|fillChildObjectTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|ObjectType
name|type
parameter_list|)
block|{
name|Iterator
argument_list|<
name|ObjectType
argument_list|>
name|children
init|=
name|type
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectType
name|child
init|=
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|instance
operator|.
name|getObjectTypeDefinition
argument_list|()
operator|.
name|add
argument_list|(
name|getObjectTypeDefinition
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
index|[]
name|separateNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|name
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|name
block|,
literal|""
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|parts
index|[
literal|1
index|]
block|,
name|parts
index|[
literal|0
index|]
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

