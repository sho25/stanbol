begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|PropertyIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|data
operator|.
name|ContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|BaseTypeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|VersioningState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|impl
operator|.
name|dataobjects
operator|.
name|ContentStreamImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|serializedform
operator|.
name|SupportedFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|BaseRDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
operator|.
name|RDFBridgeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RDFMapper} for CMIS repositories.  *<p>  * While updating the content repository based on an RDF data, this implementation creates an additional  * document containing metadata for each CMS object processed as CMIS specification does not allow adding  * custom properties for content repository objects. For detailed explanation about updating content  * repository based on RDF data see {@link #storeRDFinRepository(Object, MGraph)}.  *<p>  * While generating RDF from content repository, this implementation process all content repository object  * located under a given path. All properties of objects are transformed into RDF. Furthermore, hierarchical  * structure of the content repository is reflected to the generated RDF. For more detailed explanation see  * {@link #generateRDFFromRepository(Object, String)}.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|CMISRDFMapper
extends|extends
name|BaseRDFMapper
implements|implements
name|RDFMapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CMISRDFMapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENT_RDF
init|=
literal|"_metadata"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENT_RDF_MIME_TYPE
init|=
literal|"text/plain"
decl_stmt|;
annotation|@
name|Reference
name|Serializer
name|serializer
decl_stmt|;
annotation|@
name|Reference
name|Parser
name|parser
decl_stmt|;
comment|/**      * This implementation of {@link RDFMapper#storeRDFinRepository(Object, MGraph)} realizes a workaround to      * come up with the restriction of not being able to set custom properties to content repository objects.      *<p>      * For each resource having {@link CMSAdapterVocabulary#CMS_OBJECT} as rdf:type in the RDF, an additional      * document containing all resources about a certain content repository object is created in the same      * folder with the actual object. For example, if a single object named<b>MyObject</b> is assumed to be      * created from the annotated RDF data in the content repository, an additional document named      *<b>MyObject_metadata</b> will be created.      *<p>      * The type of the object to be created is determined according to assertions in the RDF. More details can      * be found in      * {@link #createStructureForDocument(String, NonLiteral, NonLiteral, Folder, Session, MGraph)}.      *       * @param session      *            {@link Session} object to access the repository      * @param annotatedGraph      *            annotated {@link MGraph} with CMS vocabulary annotations. For details see      *            {@link RDFMapper#storeRDFinRepository(Object, MGraph)}      */
annotation|@
name|Override
specifier|public
name|void
name|storeRDFinRepository
parameter_list|(
name|Object
name|session
parameter_list|,
name|MGraph
name|annotatedGraph
parameter_list|)
block|{
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|rootObjects
init|=
name|RDFBridgeHelper
operator|.
name|getRootObjectsOfGraph
argument_list|(
name|annotatedGraph
argument_list|)
decl_stmt|;
for|for
control|(
name|NonLiteral
name|root
range|:
name|rootObjects
control|)
block|{
name|String
name|documentName
init|=
name|getObjectName
argument_list|(
name|root
argument_list|,
name|annotatedGraph
argument_list|)
decl_stmt|;
name|String
name|documentPath
init|=
name|getObjectPath
argument_list|(
name|root
argument_list|,
name|documentName
argument_list|,
name|annotatedGraph
argument_list|)
decl_stmt|;
name|Folder
name|rootFolder
init|=
name|checkCreateParentFolders
argument_list|(
name|documentPath
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootFolder
operator|!=
literal|null
condition|)
block|{
name|createObject
argument_list|(
name|rootFolder
argument_list|,
name|root
argument_list|,
literal|null
argument_list|,
name|documentName
argument_list|,
name|annotatedGraph
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get Folder for path: {}"
argument_list|,
name|documentPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createObject
parameter_list|(
name|Folder
name|parent
parameter_list|,
name|NonLiteral
name|documentURI
parameter_list|,
name|NonLiteral
name|parentURI
parameter_list|,
name|String
name|documentName
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Folder
name|containerFolder
init|=
name|createStructureForDocument
argument_list|(
name|documentName
argument_list|,
name|documentURI
argument_list|,
name|parentURI
argument_list|,
name|parent
argument_list|,
name|session
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|documentURI
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|childSubject
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|childName
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|createObject
argument_list|(
name|containerFolder
argument_list|,
name|childSubject
argument_list|,
name|documentURI
argument_list|,
name|childName
argument_list|,
name|graph
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method creates the actual object in the content repository. The type of the object to be created      * is determined by following conditions:      *<p>      * First if its base type is set by {@link CMSAdapterVocabulary#CMIS_BASE_TYPE_ID} predicate and it is set as      *<b>cmis:folder</b> or<b>cmis:document</b>.      *<p>      * If the base type of the object is not set, its parent assertion is checked. If it has a parent      * assertion through {@link CMSAdapterVocabulary#CMS_OBJECT_PARENT_REF}, is rdf:type assertion is checked.      * If the URI specified in<code>parentURI</code> is one of the<b>rdf:type</b>s of processed object. The      * object is created as a {@link Document} under the folder specified by<code>parentFolder</code>.      * Otherwise, it is created as a {@link Folder} even if it does not have any children. This assumption is      * done based on the idea that the created object is a part of a hierarchy.      *<p>      * If the parent assertion of the processed object is not set, this means that a root object is being      * created. If this object has any child objects it is created as a {@link Folder}, otherwise it is      * created as a {@link Document} based on the assumption that the object represents a single      * {@link Document}.      *<p>      * For any object created an additional metadata document is created. This document has the name<b>      *<code>objectName + {@link #DOCUMENT_RDF}</code></b>. This document is created so that content      * management systems would manage semantic information content repository object within their own      * systems.      *       * @param objectName      * @param documentURI      * @param parentURI      * @param parentFolder      * @param session      * @param graph      * @return      */
specifier|private
name|Folder
name|createStructureForDocument
parameter_list|(
name|String
name|objectName
parameter_list|,
name|NonLiteral
name|documentURI
parameter_list|,
name|NonLiteral
name|parentURI
parameter_list|,
name|Folder
name|parentFolder
parameter_list|,
name|Session
name|session
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|String
name|objectPath
decl_stmt|;
name|String
name|parentPath
init|=
name|parentFolder
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|boolean
name|createFolder
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|parentPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|objectPath
operator|=
name|parentPath
operator|+
name|objectName
expr_stmt|;
block|}
else|else
block|{
name|objectPath
operator|=
name|parentPath
operator|+
literal|"/"
operator|+
name|objectName
expr_stmt|;
block|}
comment|// determine whether a document or a folder will be created
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Class
name|type
init|=
name|hasBaseType
argument_list|(
name|documentURI
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Document
operator|.
name|class
argument_list|)
condition|)
block|{
name|createFolder
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|parentURI
operator|==
literal|null
condition|)
block|{
comment|// root object is being created
if|if
condition|(
operator|!
name|hasChildren
argument_list|(
name|documentURI
argument_list|,
name|graph
argument_list|)
condition|)
block|{
name|createFolder
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hasParentAsType
argument_list|(
name|documentURI
argument_list|,
name|parentURI
argument_list|,
name|graph
argument_list|)
condition|)
block|{
name|createFolder
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|Folder
name|createdFolder
init|=
literal|null
decl_stmt|;
name|CmisObject
name|createdObject
decl_stmt|;
if|if
condition|(
name|createFolder
condition|)
block|{
name|createdFolder
operator|=
name|createFolderByPath
argument_list|(
name|parentFolder
argument_list|,
name|objectName
argument_list|,
name|objectPath
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|createdObject
operator|=
name|createdFolder
expr_stmt|;
block|}
else|else
block|{
name|createdObject
operator|=
name|createDocumentByPath
argument_list|(
name|parentFolder
argument_list|,
name|objectName
argument_list|,
name|objectPath
argument_list|,
literal|null
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
name|String
name|rdfDocumentName
init|=
name|objectName
operator|+
name|DOCUMENT_RDF
decl_stmt|;
name|String
name|rdfDocumentPath
init|=
name|objectPath
operator|+
name|DOCUMENT_RDF
decl_stmt|;
name|createDocumentByPath
argument_list|(
name|parentFolder
argument_list|,
name|rdfDocumentName
argument_list|,
name|rdfDocumentPath
argument_list|,
name|getDocumentContentStream
argument_list|(
name|createdObject
argument_list|,
name|rdfDocumentName
argument_list|,
name|documentURI
argument_list|,
name|graph
argument_list|)
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|createdFolder
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Class
name|hasBaseType
parameter_list|(
name|NonLiteral
name|uri
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|uri
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMIS_BASE_TYPE_ID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|type
init|=
name|RDFBridgeHelper
operator|.
name|parseStringValue
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|contentEquals
argument_list|(
name|BaseTypeId
operator|.
name|CMIS_FOLDER
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Folder
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|contentEquals
argument_list|(
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
operator|.
name|value
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Document
operator|.
name|class
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Base type: {} is not supported yet"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|boolean
name|hasChildren
parameter_list|(
name|NonLiteral
name|uri
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|hasParentAsType
parameter_list|(
name|NonLiteral
name|uri
parameter_list|,
name|NonLiteral
name|parentURI
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|uri
argument_list|,
name|RDFBridgeHelper
operator|.
name|RDF_TYPE
argument_list|,
name|parentURI
argument_list|)
decl_stmt|;
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|private
name|ContentStream
name|getDocumentContentStream
parameter_list|(
name|CmisObject
name|createdObject
parameter_list|,
name|String
name|documentName
parameter_list|,
name|NonLiteral
name|documentURI
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|MGraph
name|documentMGraph
init|=
name|collectedDocumentResources
argument_list|(
name|createdObject
argument_list|,
name|documentURI
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|baos
argument_list|,
name|documentMGraph
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serializedGraph
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|BigInteger
name|length
init|=
operator|new
name|BigInteger
argument_list|(
name|serializedGraph
operator|.
name|length
operator|+
literal|""
argument_list|)
decl_stmt|;
name|ContentStream
name|contentStream
init|=
operator|new
name|ContentStreamImpl
argument_list|(
name|documentName
argument_list|,
name|length
argument_list|,
name|DOCUMENT_RDF_MIME_TYPE
argument_list|,
name|stream
argument_list|)
decl_stmt|;
return|return
name|contentStream
return|;
block|}
specifier|private
name|MGraph
name|collectedDocumentResources
parameter_list|(
name|CmisObject
name|createdObject
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|boolean
name|sameObject
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|createdObject
operator|.
name|getId
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|subject
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|sameObject
operator|=
literal|false
expr_stmt|;
block|}
name|MGraph
name|documentMGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sameObject
condition|)
block|{
name|UriRef
name|pURI
init|=
name|t
operator|.
name|getPredicate
argument_list|()
decl_stmt|;
if|if
condition|(
name|pURI
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|NamespaceEnum
operator|.
name|cmis
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|documentMGraph
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|documentMGraph
return|;
block|}
comment|/**      * Takes a document path and checks folders in which document will be created/updated. If folders do not      * exist, they are created.      *       * @param documentPath      *            path in which root objects will be created or existing one will be searched      * @param session      *            session to access repository      * @return {@link Folder} one level up from the document      */
specifier|private
name|Folder
name|checkCreateParentFolders
parameter_list|(
name|String
name|documentPath
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Folder
name|f
init|=
name|session
operator|.
name|getRootFolder
argument_list|()
decl_stmt|;
name|String
index|[]
name|pathSections
init|=
name|documentPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|currentPath
init|=
literal|"/"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pathSections
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|folderName
init|=
name|pathSections
index|[
name|i
index|]
decl_stmt|;
name|currentPath
operator|+=
name|folderName
expr_stmt|;
name|f
operator|=
name|createFolderByPath
argument_list|(
name|f
argument_list|,
name|folderName
argument_list|,
name|currentPath
argument_list|,
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|currentPath
operator|+=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|f
return|;
block|}
specifier|private
name|Folder
name|createFolderByPath
parameter_list|(
name|Folder
name|root
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Folder
name|f
decl_stmt|;
try|try
block|{
name|CmisObject
name|o
init|=
name|session
operator|.
name|getObjectByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_FOLDER
argument_list|)
condition|)
block|{
name|f
operator|=
operator|(
name|Folder
operator|)
name|o
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Object having path: {} does not have Folder base type. It should have Folder base type to allow create documents in it"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|CmisObjectNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Object having path: {} does not exists, a new one will be created"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|f
operator|=
name|root
operator|.
name|createFolder
argument_list|(
name|getProperties
argument_list|(
name|BaseTypeId
operator|.
name|CMIS_FOLDER
operator|.
name|value
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
specifier|private
name|Document
name|createDocumentByPath
parameter_list|(
name|Folder
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|ContentStream
name|contentStream
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Document
name|d
decl_stmt|;
try|try
block|{
name|CmisObject
name|o
init|=
name|session
operator|.
name|getObjectByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|d
operator|=
operator|(
name|Document
operator|)
name|o
expr_stmt|;
if|if
condition|(
name|contentStream
operator|!=
literal|null
condition|)
block|{
name|d
operator|.
name|setContentStream
argument_list|(
name|contentStream
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Object having path: {} does not have Folder base type. It should have Folder base type to allow create documents in it"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|CmisObjectNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Object having path: {} does not exists, a new one will be created"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|d
operator|=
name|parent
operator|.
name|createDocument
argument_list|(
name|getProperties
argument_list|(
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
operator|.
name|value
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|,
name|contentStream
argument_list|,
name|VersioningState
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|(
name|String
modifier|...
name|properties
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
name|properties
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
name|properties
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|propMap
return|;
block|}
specifier|private
name|boolean
name|hasType
parameter_list|(
name|CmisObject
name|o
parameter_list|,
name|BaseTypeId
name|type
parameter_list|)
block|{
return|return
name|o
operator|.
name|getBaseTypeId
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MGraph
name|generateRDFFromRepository
parameter_list|(
name|Object
name|session
parameter_list|,
name|String
name|rootPath
parameter_list|)
throws|throws
name|RDFBridgeException
block|{
name|MGraph
name|cmsGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|Session
name|cmisSession
init|=
operator|(
name|Session
operator|)
name|session
decl_stmt|;
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|cmisObjectIt
decl_stmt|;
name|CmisObject
name|rootObject
decl_stmt|;
try|try
block|{
name|rootObject
operator|=
name|cmisSession
operator|.
name|getObjectByPath
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisObjectNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RDFBridgeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is Cmis Object in the path: %s"
argument_list|,
name|rootPath
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasType
argument_list|(
name|rootObject
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_FOLDER
argument_list|)
condition|)
block|{
name|cmisObjectIt
operator|=
operator|(
operator|(
name|Folder
operator|)
name|rootObject
operator|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RDFBridgeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A folder object is expected at the path: %s"
argument_list|,
name|rootPath
argument_list|)
argument_list|)
throw|;
block|}
while|while
condition|(
name|cmisObjectIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CmisObject
name|o
init|=
name|cmisObjectIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|cmsGraph
operator|.
name|addAll
argument_list|(
name|getGraphForObject
argument_list|(
name|o
argument_list|,
operator|(
name|Folder
operator|)
name|rootObject
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cmsGraph
return|;
block|}
specifier|private
name|MGraph
name|getGraphForObject
parameter_list|(
name|CmisObject
name|o
parameter_list|,
name|Folder
name|parentFolder
parameter_list|,
name|NonLiteral
name|parentURI
parameter_list|)
block|{
name|MGraph
name|graph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
comment|// check metadata
if|if
condition|(
name|o
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|DOCUMENT_RDF
argument_list|)
condition|)
block|{
return|return
name|graph
return|;
block|}
name|MGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|metadata
operator|=
name|checkMetadata
argument_list|(
name|parentFolder
argument_list|,
name|o
argument_list|)
expr_stmt|;
comment|// create CMS Object annotation
name|NonLiteral
name|subject
init|=
name|getObjectURI
argument_list|(
name|o
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|RDFBridgeHelper
operator|.
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
comment|// add parent assertion
if|if
condition|(
name|parentURI
operator|!=
literal|null
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|parentURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_FOLDER
argument_list|)
condition|)
block|{
name|Folder
name|f
init|=
operator|(
name|Folder
operator|)
name|o
decl_stmt|;
name|putObjectPropertiesIntoGraph
argument_list|(
name|f
argument_list|,
name|subject
argument_list|,
name|metadata
argument_list|,
name|graph
argument_list|)
expr_stmt|;
comment|// process children
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|childIt
init|=
name|f
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|childIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CmisObject
name|child
init|=
name|childIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|graph
operator|.
name|addAll
argument_list|(
name|getGraphForObject
argument_list|(
name|child
argument_list|,
name|f
argument_list|,
name|subject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hasType
argument_list|(
name|o
argument_list|,
name|BaseTypeId
operator|.
name|CMIS_DOCUMENT
argument_list|)
condition|)
block|{
name|putObjectPropertiesIntoGraph
argument_list|(
name|o
argument_list|,
name|subject
argument_list|,
name|metadata
argument_list|,
name|graph
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentURI
operator|!=
literal|null
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|RDFBridgeHelper
operator|.
name|RDF_TYPE
argument_list|,
name|parentURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|graph
return|;
block|}
specifier|private
name|void
name|putObjectPropertiesIntoGraph
parameter_list|(
name|CmisObject
name|o
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|MGraph
name|metadata
parameter_list|,
name|MGraph
name|g
parameter_list|)
block|{
name|g
operator|.
name|addAll
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|docProps
init|=
name|o
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Property
argument_list|<
name|?
argument_list|>
name|p
range|:
name|docProps
control|)
block|{
name|PropertyType
name|t
init|=
name|p
operator|.
name|getType
argument_list|()
decl_stmt|;
name|UriRef
name|pURI
init|=
name|getPropertyURI
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|pURI
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isMultiValued
argument_list|()
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|getTypedPropertyValues
argument_list|(
name|t
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|getTypedPropertyValue
argument_list|(
name|t
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|val
range|:
name|values
control|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|UriRef
condition|)
block|{
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|pURI
argument_list|,
operator|(
name|UriRef
operator|)
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|pURI
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*          * TODO handle multiple paths both transforming an RDF into repository and generating an RDF from          * repository          */
name|String
name|path
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Folder
condition|)
block|{
name|path
operator|=
operator|(
operator|(
name|Folder
operator|)
name|o
operator|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Document
condition|)
block|{
name|path
operator|=
operator|(
operator|(
name|Document
operator|)
name|o
operator|)
operator|.
name|getPaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|RDFBridgeHelper
operator|.
name|createDefaultPropertiesForRDF
argument_list|(
name|subject
argument_list|,
name|g
argument_list|,
name|path
argument_list|,
name|o
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getTypedPropertyValues
parameter_list|(
name|PropertyType
name|property
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|typedValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|v
range|:
name|values
control|)
block|{
name|typedValues
operator|.
name|add
argument_list|(
name|getTypedPropertyValue
argument_list|(
name|property
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|typedValues
return|;
block|}
specifier|private
name|Object
name|getTypedPropertyValue
parameter_list|(
name|PropertyType
name|propertyType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
switch|switch
condition|(
name|propertyType
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
case|case
name|DECIMAL
case|:
return|return
operator|(
name|Integer
operator|)
name|value
return|;
case|case
name|DATETIME
case|:
return|return
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
return|;
case|case
name|HTML
case|:
comment|// not meet with this property
return|return
literal|null
return|;
case|case
name|ID
case|:
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
case|case
name|INTEGER
case|:
return|return
operator|(
operator|(
name|BigInteger
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
case|case
name|STRING
case|:
return|return
name|value
return|;
case|case
name|URI
case|:
comment|// not meet with this property
return|return
operator|new
name|UriRef
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
name|NonLiteral
name|getObjectURI
parameter_list|(
name|CmisObject
name|o
parameter_list|,
name|MGraph
name|metadata
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|metadata
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
return|;
block|}
name|String
name|baseURI
init|=
name|CMSAdapterVocabulary
operator|.
name|CMS_ADAPTER_VOCABULARY_URI
decl_stmt|;
name|String
name|nodeURI
init|=
name|RDFBridgeHelper
operator|.
name|appendLocalName
argument_list|(
name|baseURI
argument_list|,
name|o
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|UriRef
argument_list|(
name|nodeURI
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|UriRef
name|getPropertyURI
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getQueryName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|name
operator|=
name|NamespaceEnum
operator|.
name|cms
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|name
expr_stmt|;
block|}
if|if
condition|(
name|RDFBridgeHelper
operator|.
name|isShortNameResolvable
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to resolve property: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|MGraph
name|checkMetadata
parameter_list|(
name|Folder
name|parentFolder
parameter_list|,
name|CmisObject
name|object
parameter_list|)
block|{
name|MGraph
name|metadata
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|it
init|=
name|parentFolder
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CmisObject
name|o
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Document
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|getName
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|object
operator|.
name|getName
argument_list|()
operator|+
name|DOCUMENT_RDF
argument_list|)
condition|)
block|{
name|ContentStream
name|cs
init|=
operator|(
operator|(
name|Document
operator|)
name|o
operator|)
operator|.
name|getContentStream
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|metadata
argument_list|,
name|cs
operator|.
name|getStream
argument_list|()
argument_list|,
name|SupportedFormat
operator|.
name|RDF_XML
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canMap
parameter_list|(
name|String
name|connectionType
parameter_list|)
block|{
return|return
name|connectionType
operator|.
name|contentEquals
argument_list|(
literal|"CMIS"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

