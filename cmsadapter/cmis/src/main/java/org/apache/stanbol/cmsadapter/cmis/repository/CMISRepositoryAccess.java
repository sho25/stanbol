begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|SessionParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Service
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|CMISRepositoryAccess
implements|implements
name|RepositoryAccess
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CMISRepositoryAccess
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|SessionFactory
name|sessionFactory
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|getSession
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
comment|// Session parameters are set
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|SessionParameter
operator|.
name|BINDING_TYPE
argument_list|,
name|BindingType
operator|.
name|ATOMPUB
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|SessionParameter
operator|.
name|ATOMPUB_URL
argument_list|,
name|connectionInfo
operator|.
name|getRepositoryURL
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|SessionParameter
operator|.
name|USER
argument_list|,
name|connectionInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|SessionParameter
operator|.
name|PASSWORD
argument_list|,
name|connectionInfo
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Repository
argument_list|>
name|repositories
init|=
name|sessionFactory
operator|.
name|getRepositories
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|String
name|workspace
init|=
name|connectionInfo
operator|.
name|getWorkspaceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|workspace
operator|==
literal|null
operator|||
name|workspace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|SessionParameter
operator|.
name|REPOSITORY_ID
argument_list|,
name|repositories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parameters
operator|.
name|put
argument_list|(
name|SessionParameter
operator|.
name|REPOSITORY_ID
argument_list|,
name|workspace
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|session
operator|=
name|sessionFactory
operator|.
name|createSession
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Connected to repository: {}"
argument_list|,
name|connectionInfo
operator|.
name|getRepositoryURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Failed to connect to repository: "
operator|+
name|connectionInfo
operator|.
name|getRepositoryURL
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|session
return|;
block|}
specifier|private
name|List
argument_list|<
name|CmisObject
argument_list|>
name|listCmisItemsByQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
return|return
name|listCmisItemsByQuery
argument_list|(
name|query
argument_list|,
name|session
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CmisObject
argument_list|>
name|listCmisItemsByQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|max
parameter_list|)
block|{
comment|// FIXME does this code handles pagination?
name|List
argument_list|<
name|CmisObject
argument_list|>
name|resultObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|CmisObject
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|QueryResult
argument_list|>
name|results
init|=
name|session
operator|.
name|query
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasNext
argument_list|()
operator|&&
name|index
operator|<
name|max
condition|)
block|{
name|QueryResult
name|result
init|=
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|result
operator|.
name|getPropertyValueById
argument_list|(
name|CMISProperty
operator|.
name|ID
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|resultObjects
operator|.
name|add
argument_list|(
name|session
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
return|return
name|resultObjects
return|;
block|}
specifier|private
name|List
argument_list|<
name|CMSObject
argument_list|>
name|convertResult
parameter_list|(
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|cmisObjects
parameter_list|)
block|{
comment|// FIXME we should not accumulate iterator on a list while we can directly use it
name|List
argument_list|<
name|CmisObject
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|CmisObject
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|cmisObjects
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|cmisObjects
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|CMISModelMapper
operator|.
name|convertCMISObjects
argument_list|(
name|results
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CMSObject
argument_list|>
name|executeAndConvertQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
return|return
name|CMISModelMapper
operator|.
name|convertCMISObjects
argument_list|(
name|listCmisItemsByQuery
argument_list|(
name|query
argument_list|,
name|session
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CMSObject
argument_list|>
name|executeAndConvertQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Session
name|session
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|CMISModelMapper
operator|.
name|convertCMISObjects
argument_list|(
name|listCmisItemsByQuery
argument_list|(
name|query
argument_list|,
name|session
argument_list|,
name|max
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|getNodeByPath
argument_list|(
name|path
argument_list|,
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|getNodeById
argument_list|(
name|id
argument_list|,
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CmisObject
argument_list|>
name|queryResults
init|=
operator|new
name|ArrayList
argument_list|<
name|CmisObject
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|recursive
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|recursive
operator|=
literal|true
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|CmisObject
name|node
init|=
name|cmisSession
operator|.
name|getObjectByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|queryResults
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
name|accumulateChildren
argument_list|(
name|queryResults
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|CMISModelMapper
operator|.
name|convertCMISObjects
argument_list|(
name|queryResults
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|CmisObject
argument_list|>
name|accumulateChildren
parameter_list|(
name|List
argument_list|<
name|CmisObject
argument_list|>
name|childrenList
parameter_list|,
name|CmisObject
name|node
parameter_list|)
block|{
comment|// FIXME May need to breadth rather than depth first
name|childrenList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Folder
condition|)
block|{
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|childs
init|=
operator|(
operator|(
name|Folder
operator|)
name|node
operator|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|childs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CmisObject
name|child
init|=
name|childs
operator|.
name|next
argument_list|()
decl_stmt|;
name|accumulateChildren
argument_list|(
name|childrenList
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|childrenList
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|checkSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CMSObject
index|[]
block|{
name|CMISModelMapper
operator|.
name|getCMSObject
argument_list|(
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|checkSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|String
index|[]
name|query
init|=
name|CMISQueryHelper
operator|.
name|getCMISIdByNameQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CMSObject
argument_list|>
name|results
init|=
name|executeAndConvertQuery
argument_list|(
name|query
index|[
literal|0
index|]
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|executeAndConvertQuery
argument_list|(
name|query
index|[
literal|1
index|]
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|getNodeByName
argument_list|(
name|name
argument_list|,
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|getFirstNodeByPath
argument_list|(
name|path
argument_list|,
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|getFirstNodeById
argument_list|(
name|id
argument_list|,
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|CmisObject
name|node
init|=
name|cmisSession
operator|.
name|getObjectByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|CMISModelMapper
operator|.
name|getCMSObject
argument_list|(
name|node
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
return|return
name|CMISModelMapper
operator|.
name|getCMSObject
argument_list|(
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|checkSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|String
index|[]
name|query
init|=
name|CMISQueryHelper
operator|.
name|getCMISIdByNameQuery
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CMSObject
argument_list|>
name|results
init|=
name|executeAndConvertQuery
argument_list|(
name|query
index|[
literal|0
index|]
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|executeAndConvertQuery
argument_list|(
name|query
index|[
literal|1
index|]
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|session
init|=
operator|(
name|Session
operator|)
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|getFirstNodeByName
argument_list|(
name|name
argument_list|,
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getChildren
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|checkSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|CmisObject
name|cmisObject
init|=
name|getByCMISObject
argument_list|(
name|node
argument_list|,
operator|(
name|Session
operator|)
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmisObject
operator|instanceof
name|Folder
condition|)
block|{
name|Folder
name|cmisFolder
init|=
operator|(
name|Folder
operator|)
name|cmisObject
decl_stmt|;
comment|// FIXME Is this code handles pagination
name|Iterator
argument_list|<
name|CmisObject
argument_list|>
name|childIter
init|=
name|cmisFolder
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|convertResult
argument_list|(
name|childIter
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CMSObject
index|[]
block|{}
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectTypeDefinition
name|getObjectTypeDefinition
parameter_list|(
name|String
name|typeRef
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
return|return
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|cmisSession
operator|.
name|getTypeDefinition
argument_list|(
name|typeRef
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|CmisObject
name|cmisObject
init|=
name|cmisSession
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|node
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CMISModelMapper
operator|.
name|fillProperties
argument_list|(
name|cmisObject
argument_list|,
name|node
argument_list|)
expr_stmt|;
return|return
name|node
operator|.
name|getProperty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getPropertyDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|ObjectType
name|objectType
init|=
name|cmisSession
operator|.
name|getTypeDefinition
argument_list|(
name|instance
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
decl_stmt|;
name|CMISModelMapper
operator|.
name|fillPropertyDefinitions
argument_list|(
name|instance
argument_list|,
name|objectType
argument_list|)
expr_stmt|;
return|return
name|instance
operator|.
name|getPropertyDefinition
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|getParentTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|ObjectType
name|type
init|=
name|cmisSession
operator|.
name|getTypeDefinition
argument_list|(
name|instance
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|typeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectTypeDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectType
name|parentTypeDef
init|=
name|type
operator|.
name|getParentType
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentTypeDef
operator|!=
literal|null
condition|)
block|{
name|typeDefinitions
operator|.
name|add
argument_list|(
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|parentTypeDef
argument_list|)
argument_list|)
expr_stmt|;
name|parentTypeDef
operator|=
name|parentTypeDef
operator|.
name|getParentType
argument_list|()
expr_stmt|;
block|}
return|return
name|typeDefinitions
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getContainerObject
parameter_list|(
name|Property
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|CmisObject
name|cmisObject
init|=
name|cmisSession
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|instance
operator|.
name|getContainerObjectRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|CMISModelMapper
operator|.
name|getCMSObject
argument_list|(
name|cmisObject
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
name|getPropertyDefinition
parameter_list|(
name|Property
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|definitions
operator|.
name|PropertyDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|definitions
init|=
name|cmisSession
operator|.
name|getTypeDefinition
argument_list|(
name|instance
operator|.
name|getSourceObjectTypeRef
argument_list|()
argument_list|)
operator|.
name|getPropertyDefinitions
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|definitions
operator|.
name|PropertyDefinition
argument_list|<
name|?
argument_list|>
name|definition
range|:
name|definitions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|definition
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|instance
operator|.
name|getLocalname
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO Property creation and then resolving propertydefinition from property should be
comment|// tested.
comment|// Problems may occur when comparing Properties localname vs definitions localname/id
return|return
name|CMISModelMapper
operator|.
name|getPropertyDefinition
argument_list|(
name|definition
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
comment|// TODO Fix here
return|return
name|prefix
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRetrieve
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
block|{
try|try
block|{
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error at trying to get session from connection info"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRetrieve
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
return|return
name|session
operator|instanceof
name|Session
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getParentByNode
parameter_list|(
name|CMSObject
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|CmisObject
name|cmisObject
init|=
name|cmisSession
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|instance
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|.
name|getParentRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|CMISModelMapper
operator|.
name|getCMSObject
argument_list|(
name|cmisSession
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|instance
operator|.
name|getParentRef
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|cmisObject
operator|instanceof
name|Folder
condition|)
block|{
name|Folder
name|folder
init|=
operator|(
name|Folder
operator|)
name|cmisObject
decl_stmt|;
for|for
control|(
name|Folder
name|parent
range|:
name|folder
operator|.
name|getParents
argument_list|()
control|)
block|{
comment|// TODO handle multiple parents
return|return
name|CMISModelMapper
operator|.
name|getCMSObject
argument_list|(
name|parent
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|CmisObject
name|getByCMISObject
parameter_list|(
name|CMSObject
name|cmsObject
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
return|return
name|session
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|cmsObject
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Session
name|checkSession
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|Session
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected "
operator|+
name|Session
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"found "
operator|+
name|session
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|(
name|Session
operator|)
name|session
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|getChildObjectTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
name|Session
name|cmisSession
init|=
name|checkSession
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|CmisObject
name|node
init|=
name|cmisSession
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|instance
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|ObjectType
condition|)
block|{
name|ObjectType
name|type
init|=
operator|(
name|ObjectType
operator|)
name|node
decl_stmt|;
name|CMISModelMapper
operator|.
name|fillChildObjectTypeDefinitions
argument_list|(
name|instance
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|instance
operator|.
name|getObjectTypeDefinition
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"No object type with id "
operator|+
name|instance
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at accessing repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

