begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|RelationshipType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisBaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|repository
operator|.
name|CMISObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|Individual
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntProperty
import|;
end_import

begin_comment
comment|/**  * TODO: This processer is not tested yet.  *   * This processor creates OWL object property assertions from CMIS {@link Relationship}s. Subject is the  * individual generated for the source object of the relationship. Property is the property generated for the  * type of the relationship. Object is the individual generated for the target object of the relationship.  *   * @author cihan  *   */
end_comment

begin_class
annotation|@
name|Service
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|RelationshipProcessor
implements|implements
name|Processor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RelationshipProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|canProcess
parameter_list|(
name|Object
name|cmsObject
parameter_list|,
name|Object
name|session
parameter_list|)
block|{
comment|// here we assume Document and Folder types of CMIS spec is converted to CMSObjects
return|return
name|cmsObject
operator|instanceof
name|CMSObject
operator|&&
name|session
operator|instanceof
name|Session
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createObjects
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
if|if
condition|(
name|objects
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|object
argument_list|,
name|engine
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|CMSObject
name|cmsObject
init|=
operator|(
name|CMSObject
operator|)
name|object
decl_stmt|;
name|CmisObject
name|node
init|=
operator|(
operator|(
name|Session
operator|)
name|engine
operator|.
name|getSession
argument_list|()
operator|)
operator|.
name|getObject
argument_list|(
name|CMISObjectId
operator|.
name|getObjectId
argument_list|(
name|cmsObject
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Relationship
argument_list|>
name|relations
init|=
name|node
operator|.
name|getRelationships
argument_list|()
decl_stmt|;
comment|// FIXME find a better way to reuse cmislifters' func.
name|CMISNodeTypeLifter
name|lifter
init|=
operator|new
name|CMISNodeTypeLifter
argument_list|(
name|engine
argument_list|)
decl_stmt|;
for|for
control|(
name|Relationship
name|relation
range|:
name|relations
control|)
block|{
name|processRelation
argument_list|(
name|cmsObject
argument_list|,
name|relation
argument_list|,
name|engine
argument_list|,
name|lifter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Class cast exception at processing Object: {} "
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Exception is "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisBaseException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Repository exception at processing Object: {}"
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Exception is "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Incompatible type given as argument: {}. Skipping ..."
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processRelation
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Relationship
name|relation
parameter_list|,
name|MappingEngine
name|engine
parameter_list|,
name|CMISNodeTypeLifter
name|lifter
parameter_list|)
block|{
name|OntologyResourceHelper
name|orh
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
name|RelationshipType
name|type
init|=
operator|(
name|RelationshipType
operator|)
name|relation
operator|.
name|getType
argument_list|()
decl_stmt|;
name|lifter
operator|.
name|createObjectPropertyDefForRelationshipTypes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|RelationshipType
index|[]
block|{
name|type
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|OntProperty
name|prop
init|=
name|orh
operator|.
name|getDatatypePropertyByReference
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Individual
name|ind
init|=
name|orh
operator|.
name|getIndividualByReference
argument_list|(
name|node
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
decl_stmt|;
name|Individual
name|target
init|=
name|orh
operator|.
name|getIndividualByReference
argument_list|(
name|relation
operator|.
name|getTarget
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ind
operator|.
name|addProperty
argument_list|(
name|prop
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Added triple by relationship processor, {}, {}, {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ind
operator|.
name|getURI
argument_list|()
block|,
name|prop
operator|.
name|getURI
argument_list|()
block|,
name|target
operator|.
name|getURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteObjects
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Other processors should have already deleted my triples because I only add property assertions to an individual"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

