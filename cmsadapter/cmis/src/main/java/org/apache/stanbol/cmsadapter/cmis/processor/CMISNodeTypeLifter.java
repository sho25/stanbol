begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|RelationshipType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|definitions
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisInvalidArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|cmis
operator|.
name|repository
operator|.
name|CMISModelMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_class
specifier|public
class|class
name|CMISNodeTypeLifter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CMISNodeTypeLifter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// FIXME Make adjustable
specifier|private
specifier|static
specifier|final
name|int
name|DESCENDANT_DEPTH
init|=
literal|1000
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|OntologyResourceHelper
name|orh
decl_stmt|;
specifier|public
name|CMISNodeTypeLifter
parameter_list|(
name|MappingEngine
name|engine
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
operator|(
name|Session
operator|)
name|engine
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|this
operator|.
name|orh
operator|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ObjectType
argument_list|>
name|accumulateTypesOnTree
parameter_list|(
name|Tree
argument_list|<
name|ObjectType
argument_list|>
name|tree
parameter_list|)
block|{
name|List
argument_list|<
name|ObjectType
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectType
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tree
argument_list|<
name|ObjectType
argument_list|>
argument_list|>
name|children
init|=
name|tree
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|tree
operator|.
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tree
argument_list|<
name|ObjectType
argument_list|>
name|child
range|:
name|children
control|)
block|{
name|types
operator|.
name|addAll
argument_list|(
name|accumulateTypesOnTree
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
specifier|private
name|List
argument_list|<
name|ObjectType
argument_list|>
name|getAllTypes
parameter_list|(
name|String
name|baseType
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Getting all types"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ObjectType
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectType
argument_list|>
argument_list|()
decl_stmt|;
name|ObjectType
name|baseTypeObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseTypeObj
operator|=
name|session
operator|.
name|getTypeDefinition
argument_list|(
name|baseType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmisObjectNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Type not found "
operator|+
name|baseType
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|CmisInvalidArgumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Invalid base type: {}"
argument_list|,
name|baseType
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|Tree
argument_list|<
name|ObjectType
argument_list|>
argument_list|>
name|types
init|=
name|baseTypeObj
operator|.
name|getDescendants
argument_list|(
name|DESCENDANT_DEPTH
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectType
argument_list|>
name|objTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
argument_list|<
name|ObjectType
argument_list|>
name|typeTree
range|:
name|types
control|)
block|{
name|objTypes
operator|.
name|addAll
argument_list|(
name|accumulateTypesOnTree
argument_list|(
name|typeTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|objTypes
operator|.
name|add
argument_list|(
name|baseTypeObj
argument_list|)
expr_stmt|;
return|return
name|objTypes
return|;
block|}
specifier|private
name|List
argument_list|<
name|ObjectType
argument_list|>
name|getAllDocumentTypes
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getAllTypes
argument_list|(
name|ObjectType
operator|.
name|DOCUMENT_BASETYPE_ID
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ObjectType
argument_list|>
name|getAllFolderTypes
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getAllTypes
argument_list|(
name|ObjectType
operator|.
name|FOLDER_BASETYPE_ID
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RelationshipType
argument_list|>
name|getAllRelationshipTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ObjectType
argument_list|>
name|objTypes
init|=
name|getAllTypes
argument_list|(
name|ObjectType
operator|.
name|RELATIONSHIP_BASETYPE_ID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RelationshipType
argument_list|>
name|relTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|RelationshipType
argument_list|>
argument_list|(
name|objTypes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectType
name|objType
range|:
name|objTypes
control|)
block|{
if|if
condition|(
name|objType
operator|instanceof
name|RelationshipType
condition|)
block|{
name|relTypes
operator|.
name|add
argument_list|(
operator|(
name|RelationshipType
operator|)
name|objType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|relTypes
return|;
block|}
comment|/**      * Extracts semantics through CMIS interface      *       * @param mappingFileContent      * @throws Exception      */
specifier|public
name|void
name|liftNodes
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
try|try
block|{
comment|// Create classes for Folder Object Type and its descendants
name|createClassesForObjectTypes
argument_list|(
name|getAllFolderTypes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create classes for Document Object Type and its descendants
name|createClassesForObjectTypes
argument_list|(
name|getAllDocumentTypes
argument_list|()
argument_list|)
expr_stmt|;
comment|// create object property definitions for relationship object types
name|createObjectPropertyDefForRelationshipTypes
argument_list|(
name|getAllRelationshipTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Error at CMIS node type lifting"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// TODO ID ler icin gereken deisiklik 2-
comment|/**      * Creates classes for the given Object Types Furthermore, creates subsumption relations using the      * parentId field      *       * @param objectTypes      * @throws Exception      */
specifier|private
name|void
name|createClassesForObjectTypes
parameter_list|(
name|List
argument_list|<
name|ObjectType
argument_list|>
name|objectTypes
parameter_list|)
throws|throws
name|Exception
block|{
comment|// FIXME What about caching Common Domain model instances
comment|// for each object type create a class
for|for
control|(
name|ObjectType
name|type
range|:
name|objectTypes
control|)
block|{
name|OntClass
name|klass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyDefinition
argument_list|<
name|?
argument_list|>
name|propDef
range|:
name|type
operator|.
name|getPropertyDefinitions
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
name|propertyDef
init|=
name|CMISModelMapper
operator|.
name|getPropertyDefinition
argument_list|(
name|propDef
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectPropertyCheck
argument_list|(
name|propertyDef
argument_list|)
condition|)
block|{
name|orh
operator|.
name|createObjectPropertyByPropertyDefinition
argument_list|(
name|propertyDef
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|klass
block|}
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|orh
operator|.
name|createDatatypePropertyByPropertyDefinition
argument_list|(
name|propertyDef
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|klass
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for each parent id create a superclass relation
for|for
control|(
name|ObjectType
name|type
range|:
name|objectTypes
control|)
block|{
name|ObjectType
name|parentType
init|=
name|type
operator|.
name|getParentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentType
operator|!=
literal|null
condition|)
block|{
name|OntClass
name|klass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|OntClass
name|parentClass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|parentType
argument_list|)
argument_list|)
decl_stmt|;
name|klass
operator|.
name|addSuperClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Create ObjectProperty definition for each relationship type      *       * @param relationshipTypes      */
specifier|public
name|void
name|createObjectPropertyDefForRelationshipTypes
parameter_list|(
name|List
argument_list|<
name|RelationshipType
argument_list|>
name|relationshipTypes
parameter_list|)
block|{
for|for
control|(
name|RelationshipType
name|relType
range|:
name|relationshipTypes
control|)
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|domains
init|=
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Resource
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectType
argument_list|>
name|allowedSourceTypes
init|=
name|relType
operator|.
name|getAllowedSourceTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|allowedSourceTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ObjectType
name|type
range|:
name|allowedSourceTypes
control|)
block|{
name|OntClass
name|klass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|domains
operator|.
name|add
argument_list|(
name|klass
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ObjectType
argument_list|>
name|allowedTargetTypes
init|=
name|relType
operator|.
name|getAllowedTargetTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|allowedTargetTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ObjectType
name|type
range|:
name|allowedTargetTypes
control|)
block|{
name|OntClass
name|klass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|CMISModelMapper
operator|.
name|getObjectTypeDefinition
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|klass
argument_list|)
expr_stmt|;
block|}
block|}
name|orh
operator|.
name|createObjectPropertyByPropertyDefinition
argument_list|(
name|CMISModelMapper
operator|.
name|getRelationshipType
argument_list|(
name|relType
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|orh
operator|.
name|createUnionClass
argument_list|(
name|domains
argument_list|)
block|}
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|orh
operator|.
name|createUnionClass
argument_list|(
name|ranges
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create super property relations
for|for
control|(
name|RelationshipType
name|relType
range|:
name|relationshipTypes
control|)
block|{
name|OntProperty
name|prop
init|=
name|orh
operator|.
name|getPropertyByReference
argument_list|(
name|relType
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectType
name|parentType
init|=
name|relType
operator|.
name|getParentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentType
operator|!=
literal|null
condition|)
block|{
comment|// TODO Check if parent type is correctly resolved to an ont class
name|OntProperty
name|parentProp
init|=
name|orh
operator|.
name|getPropertyByReference
argument_list|(
name|parentType
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|prop
operator|.
name|addSuperProperty
argument_list|(
name|parentProp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Boolean
name|objectPropertyCheck
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
name|prop
parameter_list|)
block|{
name|PropType
name|propType
init|=
name|prop
operator|.
name|getPropertyType
argument_list|()
decl_stmt|;
comment|// TODO consider all object properties
if|if
condition|(
name|propType
operator|==
name|PropType
operator|.
name|REFERENCE
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

