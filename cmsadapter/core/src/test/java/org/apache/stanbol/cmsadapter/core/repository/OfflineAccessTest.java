begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|decorated
operator|.
name|CMSObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|decorated
operator|.
name|ObjectTypeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|decorated
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|decorated
operator|.
name|PropertyDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
specifier|public
class|class
name|OfflineAccessTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PX_ROOT
init|=
literal|"root"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_O_11
init|=
literal|"child11"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_O_12
init|=
literal|"child12"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_O_21
init|=
literal|"child21"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_O_13
init|=
literal|"child13"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_PD_1
init|=
literal|"propdef1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_PD_2
init|=
literal|"propdef2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_PD_3
init|=
literal|"propdef3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_P_1
init|=
literal|"prop1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_P_2
init|=
literal|"prop2"
decl_stmt|;
comment|// private static final String PX_P_3 = "prop3";
specifier|private
specifier|static
specifier|final
name|String
name|PX_OT_1
init|=
literal|"objectype1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_OT_2
init|=
literal|"objectype2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PX_OT_3
init|=
literal|"objectype3"
decl_stmt|;
comment|// Simulate an input repository(will be submitted through rest services)
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|repository
decl_stmt|;
specifier|private
specifier|static
name|RepositoryAccessManagerImpl
name|accessManager
decl_stmt|;
specifier|private
specifier|static
name|OfflineAccess
name|offlineAccess
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize a dummy repository
name|repository
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|PropertyDefinition
name|pd1
init|=
operator|new
name|PropertyDefinitionBuilder
argument_list|(
name|PX_PD_1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PropertyDefinition
name|pd2
init|=
operator|new
name|PropertyDefinitionBuilder
argument_list|(
name|PX_PD_2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PropertyDefinition
name|pd3
init|=
operator|new
name|PropertyDefinitionBuilder
argument_list|(
name|PX_PD_3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Property
name|p1
init|=
operator|new
name|PropertyBuilder
argument_list|(
name|PX_P_1
argument_list|)
operator|.
name|propertyDefinition
argument_list|(
name|pd1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Property
name|p2
init|=
operator|new
name|PropertyBuilder
argument_list|(
name|PX_P_2
argument_list|)
operator|.
name|propertyDefinition
argument_list|(
name|pd2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CMSObject
name|root
init|=
operator|new
name|CMSObjectBuilder
argument_list|(
name|PX_ROOT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CMSObject
name|child11
init|=
operator|new
name|CMSObjectBuilder
argument_list|(
name|PX_O_11
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CMSObject
name|child12
init|=
operator|new
name|CMSObjectBuilder
argument_list|(
name|PX_O_12
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CMSObject
name|child21
init|=
operator|new
name|CMSObjectBuilder
argument_list|(
name|PX_O_21
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CMSObject
name|child13
init|=
operator|new
name|CMSObjectBuilder
argument_list|(
name|PX_O_13
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectTypeDefinition
name|type1
init|=
operator|new
name|ObjectTypeBuilder
argument_list|(
name|PX_OT_1
argument_list|)
operator|.
name|propertyDefinition
argument_list|(
name|pd1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectTypeDefinition
name|type2
init|=
operator|new
name|ObjectTypeBuilder
argument_list|(
name|PX_OT_2
argument_list|)
operator|.
name|propertyDefinition
argument_list|(
name|pd2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectTypeDefinition
name|type3
init|=
operator|new
name|ObjectTypeBuilder
argument_list|(
name|PX_OT_3
argument_list|)
operator|.
name|propertyDefinition
argument_list|(
name|pd3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|root
operator|.
name|setObjectTypeRef
argument_list|(
name|type1
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|child11
operator|.
name|setObjectTypeRef
argument_list|(
name|type1
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|child12
operator|.
name|setObjectTypeRef
argument_list|(
name|type2
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|child13
operator|.
name|setObjectTypeRef
argument_list|(
name|type2
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|child21
operator|.
name|setObjectTypeRef
argument_list|(
name|type3
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setContainerObjectRef
argument_list|(
name|root
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|getProperty
argument_list|()
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|root
operator|.
name|getProperty
argument_list|()
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|child11
argument_list|)
expr_stmt|;
name|child11
operator|.
name|setParentRef
argument_list|(
name|root
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|child12
argument_list|)
expr_stmt|;
name|child12
operator|.
name|setParentRef
argument_list|(
name|root
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|child11
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|child21
argument_list|)
expr_stmt|;
name|child21
operator|.
name|setParentRef
argument_list|(
name|child11
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
comment|// child13 has the same name as child11
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|child13
argument_list|)
expr_stmt|;
name|child13
operator|.
name|setParentRef
argument_list|(
name|root
operator|.
name|getUniqueRef
argument_list|()
argument_list|)
expr_stmt|;
name|child13
operator|.
name|setLocalname
argument_list|(
name|child11
operator|.
name|getLocalname
argument_list|()
argument_list|)
expr_stmt|;
name|processPaths
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|repository
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|root
block|,
name|child11
block|,
name|child12
block|,
name|child13
block|,
name|child21
block|,
name|type1
block|,
name|type2
block|,
name|type3
block|,
name|pd1
block|,
name|pd2
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfflineAccess
parameter_list|()
block|{
try|try
block|{
name|offlineAccess
operator|=
operator|new
name|OfflineAccess
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception in constructor: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSession
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getSession
argument_list|(
operator|new
name|ConnectionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeByPath
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|real
init|=
name|offlineAccess
operator|.
name|getNodeByPath
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Check only the root is returned
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|real
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|real
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CMSObject
argument_list|>
name|all
init|=
name|offlineAccess
operator|.
name|getNodeByPath
argument_list|(
literal|"/%"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|all
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getNodeByPath
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeById
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|expected
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CMSObject
argument_list|>
name|real
init|=
name|offlineAccess
operator|.
name|getNodeById
argument_list|(
name|expected
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|real
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|real
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|RepositoryAccessException
operator|.
name|class
argument_list|)
expr_stmt|;
name|real
operator|=
name|offlineAccess
operator|.
name|getNodeById
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|real
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNodeByName
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|c11
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CMSObject
name|c13
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CMSObject
argument_list|>
name|real
init|=
name|offlineAccess
operator|.
name|getNodeByName
argument_list|(
name|c11
operator|.
name|getLocalname
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|real
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|c11
argument_list|,
name|real
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|c13
argument_list|,
name|real
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getNodeByName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFirstNodeByPath
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|real
init|=
name|offlineAccess
operator|.
name|getFirstNodeByPath
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Check only the root is returned
name|assertSame
argument_list|(
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|real
argument_list|)
expr_stmt|;
name|CMSObject
name|all
init|=
name|offlineAccess
operator|.
name|getFirstNodeByPath
argument_list|(
literal|"/%"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getFirstNodeByPath
argument_list|(
literal|"/"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFirstNodeById
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|expected
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CMSObject
name|real
init|=
name|offlineAccess
operator|.
name|getFirstNodeById
argument_list|(
name|expected
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|real
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|RepositoryAccessException
operator|.
name|class
argument_list|)
expr_stmt|;
name|real
operator|=
name|offlineAccess
operator|.
name|getFirstNodeById
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFirstNodeByName
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|c11
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CMSObject
name|c13
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|CMSObject
name|real
init|=
name|offlineAccess
operator|.
name|getFirstNodeByName
argument_list|(
name|c11
operator|.
name|getLocalname
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c11
operator|==
name|real
operator|||
name|c13
operator|==
name|real
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getNodeByName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetObjectTypeDefinition
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|root
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectTypeDefinition
name|expected
init|=
operator|(
name|ObjectTypeDefinition
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ObjectTypeDefinition
name|typeDef
init|=
name|offlineAccess
operator|.
name|getObjectTypeDefinition
argument_list|(
name|root
operator|.
name|getObjectTypeRef
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|typeDef
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getObjectTypeDefinition
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * TODO Implement when the semantics gets clear*      *       * @Test public void testGetParentTypeDefinitions() {}      *       * @Test public void testGetChildObjectTypeDefinitions() {}      *       * @Test public void testGetAllowableTypeDef() {}      */
annotation|@
name|Test
specifier|public
name|void
name|testGetContainerObject
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|root
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|root
operator|.
name|getProperty
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CMSObject
name|real
init|=
name|offlineAccess
operator|.
name|getContainerObject
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|root
argument_list|,
name|real
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getContainerObject
argument_list|(
name|p
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropertyDefinition
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|root
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|expected
init|=
operator|(
name|PropertyDefinition
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|Property
name|p
init|=
name|root
operator|.
name|getProperty
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PropertyDefinition
name|propDef
init|=
name|offlineAccess
operator|.
name|getPropertyDefinition
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expected
argument_list|,
name|propDef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespaceURI
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|String
name|nsURI
init|=
name|offlineAccess
operator|.
name|getNamespaceURI
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nsURI
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanRetrieveConnectionInfo
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|canRetrieve
argument_list|(
operator|(
name|ConnectionInfo
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanRetrieveObject
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|canRetrieve
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetParentByNode
parameter_list|()
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|child11
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CMSObject
name|root
init|=
operator|(
name|CMSObject
operator|)
name|repository
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CMSObject
name|parent
init|=
name|offlineAccess
operator|.
name|getParentByNode
argument_list|(
name|child11
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|root
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|offlineAccess
operator|.
name|getParentByNode
argument_list|(
name|child11
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Helper for assigning CMSOBject paths
specifier|private
specifier|static
name|void
name|processPaths
parameter_list|(
name|CMSObject
name|root
parameter_list|)
block|{
name|String
name|path
init|=
literal|"/"
decl_stmt|;
name|root
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|processCMSObjectPath
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|processCMSObjectPath
parameter_list|(
name|List
argument_list|<
name|CMSObject
argument_list|>
name|cmsObjects
parameter_list|,
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|CMSObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
name|String
name|newPath
init|=
name|path
operator|+
name|cmsObject
operator|.
name|getLocalname
argument_list|()
decl_stmt|;
name|cmsObject
operator|.
name|setPath
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|processCMSObjectPath
argument_list|(
name|cmsObject
operator|.
name|getChildren
argument_list|()
argument_list|,
name|newPath
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

