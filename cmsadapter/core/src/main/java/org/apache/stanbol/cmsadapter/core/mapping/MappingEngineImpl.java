begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|decorated
operator|.
name|DObjectFactoryImp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|jcr
operator|.
name|processor
operator|.
name|JCRNodeTypeLifter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|NamingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|BridgeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|AdapterMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|ProcessorProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|ontologymanager
operator|.
name|store
operator|.
name|rest
operator|.
name|client
operator|.
name|RestClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFWriter
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|factory
operator|=
literal|"org.apache.stanbol.cmsadapter.servicesapi.mapping.MappingEngineFactory"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|MappingEngineImpl
implements|implements
name|MappingEngine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MappingEngineImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ProcessorComparator
name|COMPARATOR
init|=
operator|new
name|ProcessorComparator
argument_list|()
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|Processor
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindProcessor"
argument_list|,
name|unbind
operator|=
literal|"unbindProcessor"
argument_list|)
specifier|private
name|List
argument_list|<
name|Processor
argument_list|>
name|processors
init|=
operator|new
name|ArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|RestClient
name|storeClient
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|RepositoryAccessManager
name|accessManager
decl_stmt|;
specifier|private
name|RepositoryAccess
name|accessor
decl_stmt|;
specifier|private
name|Object
name|session
decl_stmt|;
specifier|private
name|OntModel
name|ontModel
decl_stmt|;
specifier|private
name|String
name|ontologyURI
decl_stmt|;
specifier|private
name|BridgeDefinitions
name|bridgeDefinitions
decl_stmt|;
specifier|private
name|OntologyResourceHelper
name|ontologyResourceHelper
decl_stmt|;
specifier|private
name|DObjectAdapter
name|adapter
decl_stmt|;
specifier|private
name|NamingStrategy
name|namingStrategy
decl_stmt|;
specifier|private
name|void
name|runProcessors
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|cmsObjects
parameter_list|,
name|String
name|mode
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Processor
argument_list|>
name|processorIterator
decl_stmt|;
synchronized|synchronized
init|(
name|processors
init|)
block|{
name|processorIterator
operator|=
name|processors
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|processorIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Processor
name|processor
init|=
name|processorIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mode
operator|.
name|contentEquals
argument_list|(
literal|"create"
argument_list|)
condition|)
block|{
name|processor
operator|.
name|createObjects
argument_list|(
name|cmsObjects
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|contentEquals
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|processor
operator|.
name|deleteObjects
argument_list|(
name|cmsObjects
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} processor completed execution in {} miliseconds"
argument_list|,
name|processor
operator|.
name|toString
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mapCR
parameter_list|(
name|MappingConfiguration
name|conf
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|initializeEngine
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|connectionType
init|=
name|conf
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionType
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionType
operator|.
name|contentEquals
argument_list|(
literal|"JCR"
argument_list|)
condition|)
block|{
operator|new
name|JCRNodeTypeLifter
argument_list|(
name|this
argument_list|)
operator|.
name|lift
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connectionType
operator|.
name|contentEquals
argument_list|(
literal|"CMIS"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Currently there is no lifter for CMIS protocol"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Lifting error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|runProcessors
argument_list|(
literal|null
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
name|OntologyResourceHelper
operator|.
name|saveConnectionInfo
argument_list|(
name|conf
operator|.
name|getConnectionInfo
argument_list|()
argument_list|,
name|this
operator|.
name|ontModel
argument_list|)
expr_stmt|;
name|OntologyResourceHelper
operator|.
name|saveBridgeDefinitions
argument_list|(
name|conf
operator|.
name|getBridgeDefinitions
argument_list|()
argument_list|,
name|this
operator|.
name|ontModel
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Total process time for ontology {} is {} ms"
argument_list|,
name|ontologyURI
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
try|try
block|{
name|storeOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestClientException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to store ontology for ontologyURI {}"
argument_list|,
name|ontologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createModel
parameter_list|(
name|MappingConfiguration
name|conf
parameter_list|)
block|{
try|try
block|{
name|initializeEngine
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to obtain session for ontologyURI {}"
argument_list|,
name|ontologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|runProcessors
argument_list|(
name|conf
operator|.
name|getObjects
argument_list|()
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Total process time for ontology {} is {} ms"
argument_list|,
name|ontologyURI
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
try|try
block|{
name|storeOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestClientException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to store ontology for ontologyURI {}"
argument_list|,
name|ontologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateModel
parameter_list|(
name|MappingConfiguration
name|conf
parameter_list|)
block|{
try|try
block|{
name|initializeEngine
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to obtain session for ontologyURI {}"
argument_list|,
name|ontologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|runProcessors
argument_list|(
name|conf
operator|.
name|getObjects
argument_list|()
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|runProcessors
argument_list|(
name|conf
operator|.
name|getObjects
argument_list|()
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Total process time for ontology {} is {} ms"
argument_list|,
name|ontologyURI
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
try|try
block|{
name|storeOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestClientException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to store ontology for ontologyURI {}"
argument_list|,
name|ontologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteModel
parameter_list|(
name|MappingConfiguration
name|conf
parameter_list|)
block|{
try|try
block|{
name|initializeEngine
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to initialized Mapping Engine"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|runProcessors
argument_list|(
name|conf
operator|.
name|getObjects
argument_list|()
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Total process time for ontology {} is {} ms"
argument_list|,
name|ontologyURI
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
try|try
block|{
name|storeOntology
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RestClientException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to store ontology for ontologyURI {}"
argument_list|,
name|ontologyURI
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RepositoryAccessManager
name|getRepositoryAccessManager
parameter_list|()
block|{
return|return
name|accessManager
return|;
block|}
annotation|@
name|Override
specifier|public
name|DObjectAdapter
name|getDObjectAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntModel
name|getOntModel
parameter_list|()
block|{
return|return
name|ontModel
return|;
block|}
annotation|@
name|Override
specifier|public
name|BridgeDefinitions
name|getBridgeDefinitions
parameter_list|()
block|{
return|return
name|bridgeDefinitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|OntologyResourceHelper
name|getOntologyResourceHelper
parameter_list|()
block|{
return|return
name|ontologyResourceHelper
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOntologyURI
parameter_list|()
block|{
return|return
name|ontologyURI
return|;
block|}
annotation|@
name|Override
specifier|public
name|NamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|namingStrategy
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryAccess
name|getRepositoryAccess
parameter_list|()
block|{
return|return
name|accessor
return|;
block|}
specifier|private
name|void
name|initializeEngine
parameter_list|(
name|MappingConfiguration
name|conf
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
if|if
condition|(
name|conf
operator|.
name|getOntModel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|ontModel
operator|=
name|conf
operator|.
name|getOntModel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|ontModel
operator|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|)
expr_stmt|;
block|}
name|AdapterMode
name|adapterMode
init|=
name|conf
operator|.
name|getAdapterMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|adapterMode
operator|==
literal|null
condition|)
block|{
name|adapterMode
operator|=
name|AdapterMode
operator|.
name|ONLINE
expr_stmt|;
block|}
name|ConnectionInfo
name|connectionInfo
init|=
name|conf
operator|.
name|getConnectionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|adapterMode
operator|.
name|equals
argument_list|(
name|AdapterMode
operator|.
name|STRICT_OFFLINE
argument_list|)
condition|)
block|{
name|connectionInfo
operator|=
name|OntologyResourceHelper
operator|.
name|getConnectionInfo
argument_list|(
name|this
operator|.
name|ontModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionInfo
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve connection info from ontmodel"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|offlineObjects
init|=
name|conf
operator|.
name|getObjects
argument_list|()
decl_stmt|;
if|if
condition|(
name|adapterMode
operator|.
name|equals
argument_list|(
name|AdapterMode
operator|.
name|ONLINE
argument_list|)
condition|)
block|{
name|accessor
operator|=
name|accessManager
operator|.
name|getRepositoryAccessor
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|accessor
operator|.
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
operator|new
name|DObjectFactoryImp
argument_list|(
name|accessor
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|adapterMode
operator|.
name|equals
argument_list|(
name|AdapterMode
operator|.
name|TOLERATED_OFFLINE
argument_list|)
condition|)
block|{
try|try
block|{
name|accessor
operator|=
name|accessManager
operator|.
name|getRepositoryAccessor
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|accessor
operator|.
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|RepositoryAccess
name|offlineAccess
init|=
name|accessManager
operator|.
name|getRepositoryAccess
argument_list|(
name|offlineObjects
argument_list|)
decl_stmt|;
name|this
operator|.
name|adapter
operator|=
operator|new
name|DObjectFactoryImp
argument_list|(
name|accessor
argument_list|,
name|offlineAccess
argument_list|,
name|session
argument_list|,
name|adapterMode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|accessor
operator|=
name|accessManager
operator|.
name|getRepositoryAccess
argument_list|(
name|offlineObjects
argument_list|)
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
operator|new
name|DObjectFactoryImp
argument_list|(
name|accessor
argument_list|,
name|session
argument_list|,
name|AdapterMode
operator|.
name|STRICT_OFFLINE
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|adapterMode
operator|.
name|equals
argument_list|(
name|AdapterMode
operator|.
name|STRICT_OFFLINE
argument_list|)
condition|)
block|{
name|accessor
operator|=
name|accessManager
operator|.
name|getRepositoryAccess
argument_list|(
name|offlineObjects
argument_list|)
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
operator|new
name|DObjectFactoryImp
argument_list|(
name|accessor
argument_list|,
name|session
argument_list|,
name|adapterMode
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bridgeDefinitions
operator|=
name|conf
operator|.
name|getBridgeDefinitions
argument_list|()
expr_stmt|;
name|this
operator|.
name|ontologyURI
operator|=
name|conf
operator|.
name|getOntologyURI
argument_list|()
expr_stmt|;
name|this
operator|.
name|namingStrategy
operator|=
operator|new
name|DefaultNamingStrategy
argument_list|(
name|accessor
argument_list|,
name|session
argument_list|,
name|this
operator|.
name|ontModel
argument_list|)
expr_stmt|;
name|this
operator|.
name|ontologyResourceHelper
operator|=
operator|new
name|OntologyResourceHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeOntology
parameter_list|()
throws|throws
name|RestClientException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|RDFWriter
name|rdfWriter
init|=
name|ontModel
operator|.
name|getWriter
argument_list|(
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|rdfWriter
operator|.
name|setProperty
argument_list|(
literal|"xmlbase"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|rdfWriter
operator|.
name|write
argument_list|(
name|ontModel
argument_list|,
name|bos
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ontologyContentAsByteArray
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|ontologyContentAsString
init|=
operator|new
name|String
argument_list|(
name|ontologyContentAsByteArray
argument_list|)
decl_stmt|;
name|storeClient
operator|.
name|saveOntology
argument_list|(
name|ontologyContentAsString
argument_list|,
name|ontologyURI
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|bindProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
synchronized|synchronized
init|(
name|processors
init|)
block|{
name|processors
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|processors
argument_list|,
name|COMPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unbindProcessor
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
synchronized|synchronized
init|(
name|processors
init|)
block|{
name|processors
operator|.
name|remove
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|ProcessorComparator
implements|implements
name|Comparator
argument_list|<
name|Processor
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Processor
name|proc1
parameter_list|,
name|Processor
name|proc2
parameter_list|)
block|{
name|Integer
name|order1
init|=
name|getOrder
argument_list|(
name|proc1
argument_list|)
decl_stmt|;
name|Integer
name|order2
init|=
name|getOrder
argument_list|(
name|proc2
argument_list|)
decl_stmt|;
return|return
name|order1
operator|.
name|compareTo
argument_list|(
name|order2
argument_list|)
return|;
block|}
specifier|public
name|int
name|getOrder
parameter_list|(
name|Processor
name|engine
parameter_list|)
block|{
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Engine can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|engine
operator|instanceof
name|ProcessorProperties
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|ProcessorProperties
operator|)
name|engine
operator|)
operator|.
name|getProcessorProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ProcessorProperties
operator|.
name|PROCESSING_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
return|;
block|}
block|}
return|return
name|ProcessorProperties
operator|.
name|CMSOBJECT_POST
return|;
block|}
block|}
block|}
end_class

end_unit

