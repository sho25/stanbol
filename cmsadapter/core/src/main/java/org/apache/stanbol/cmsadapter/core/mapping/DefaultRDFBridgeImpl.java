begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridgeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link RDFBridge} interface. It basically provides annotation of raw RDF data  * using the {@link RDFBridgeConfiguration} instances available in the environment.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|DefaultRDFBridgeImpl
implements|implements
name|RDFBridge
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|RDFBridgeConfiguration
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindRDFBridgeConfiguration"
argument_list|,
name|unbind
operator|=
literal|"unbindRDFBridgeConfiguration"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
name|List
argument_list|<
name|RDFBridgeConfiguration
argument_list|>
name|defaultBridgeConfigs
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|RDFBridgeConfiguration
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|MGraph
name|annotateGraph
parameter_list|(
name|Graph
name|rawRDF
parameter_list|)
block|{
name|MGraph
name|annotatedGraph
init|=
operator|new
name|SimpleMGraph
argument_list|(
name|rawRDF
argument_list|)
decl_stmt|;
name|addAnnotationsToGraph
argument_list|(
name|annotatedGraph
argument_list|)
expr_stmt|;
return|return
name|annotatedGraph
return|;
block|}
comment|/**      * Adds annotations according to available {@link RDFBridgeConfiguration} instances<br>      *<br>      * It first select target resources by using the configurations obtained from      * {@link RDFBridgeConfiguration#getTargetPropertyResources()} and      * {@link RDFBridgeConfiguration#getTargetResourceValue()}.<br>      *<br>      * In the next step, parent/child relations are set according to configuration values obtained from      * {@link RDFBridgeConfiguration#getChildrenResources()}. In case of multiple children having same name,      * an integer value added to the end of the name incrementally e.g      *<b>name</b>,<b>name1</b>,<b>name2</b>,...<br>      *<br>      * Then property annotations are added to according configuration values obtained from      * {@link RDFBridgeConfiguration#getTargetPropertyResources()}. Name of a property is kept for each bridge      * to to make possible giving different names for the same property in different bridges.<br>      *<br>      *       * @param graph      *            {@link MGraph} keeping the raw RDF data      */
specifier|private
name|void
name|addAnnotationsToGraph
parameter_list|(
name|MGraph
name|graph
parameter_list|)
block|{
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|children
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
for|for
control|(
name|RDFBridgeConfiguration
name|config
range|:
name|defaultBridgeConfigs
control|)
block|{
name|children
operator|=
name|config
operator|.
name|getChildrenResources
argument_list|()
expr_stmt|;
name|properties
operator|=
name|config
operator|.
name|getTargetPropertyResources
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|tripleIterator
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|config
operator|.
name|getTargetResourcePredicate
argument_list|()
argument_list|,
name|config
operator|.
name|getTargetResourceValue
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|nameProp
init|=
name|config
operator|.
name|getNameResource
argument_list|()
decl_stmt|;
comment|// add cms object annotations
while|while
condition|(
name|tripleIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|tripleIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|subject
init|=
name|t
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|subject
argument_list|,
name|nameProp
argument_list|,
name|graph
argument_list|)
decl_stmt|;
comment|// There should be a valid name for CMS Object
if|if
condition|(
operator|!
name|name
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|RDFBridgeHelper
operator|.
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
comment|// if this object has already has name and path annotations, it means that it's already
comment|// processed as child of another object. So, don't put new name and path annotations
if|if
condition|(
operator|!
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check children and add child and parent annotations
name|checkChildren
argument_list|(
name|children
argument_list|,
name|subject
argument_list|,
name|graph
argument_list|)
expr_stmt|;
comment|// check desired properties to be mapped
name|checkProperties
argument_list|(
name|properties
argument_list|,
name|subject
argument_list|,
name|config
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkChildren
parameter_list|(
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|children
parameter_list|,
name|NonLiteral
name|objectURI
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|childPropURI
range|:
name|children
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|childrenIt
init|=
name|graph
operator|.
name|filter
argument_list|(
name|objectURI
argument_list|,
name|childPropURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|childNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|childrenIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|child
init|=
name|childrenIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|childSubject
init|=
operator|new
name|UriRef
argument_list|(
name|RDFBridgeHelper
operator|.
name|removeEndCharacters
argument_list|(
name|child
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|childName
init|=
name|getNameOfProperty
argument_list|(
name|childSubject
argument_list|,
name|children
operator|.
name|get
argument_list|(
name|childPropURI
argument_list|)
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childName
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|RDFBridgeHelper
operator|.
name|removeExistingTriple
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|RDFBridgeHelper
operator|.
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|objectURI
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|getChildName
argument_list|(
name|childName
argument_list|,
name|childNames
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain a name for child property: {}"
argument_list|,
name|childPropURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|checkProperties
parameter_list|(
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|NonLiteral
name|subject
parameter_list|,
name|RDFBridgeConfiguration
name|bridge
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
name|propertiesNamesInBridge
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|propURI
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|propertyName
init|=
name|getNameOfProperty
argument_list|(
name|subject
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|propURI
argument_list|)
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyName
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|propertiesNamesInBridge
operator|.
name|containsKey
argument_list|(
name|propURI
argument_list|)
condition|)
block|{
name|UriRef
name|tempRef
init|=
operator|new
name|UriRef
argument_list|(
name|propertyName
operator|+
literal|"Prop"
operator|+
name|bridge
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|propertiesNamesInBridge
operator|.
name|put
argument_list|(
name|propURI
argument_list|,
name|tempRef
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|tempRef
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PROPERTY_NAME
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|propertyName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|tempRef
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PROPERTY_URI
argument_list|,
name|propURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_HAS_PROPERTY
argument_list|,
name|propertiesNamesInBridge
operator|.
name|get
argument_list|(
name|propURI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain a name for property: {}"
argument_list|,
name|propURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getNameOfProperty
parameter_list|(
name|NonLiteral
name|subject
parameter_list|,
name|Object
name|nameProp
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
if|if
condition|(
name|nameProp
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|nameProp
return|;
block|}
elseif|else
if|if
condition|(
name|nameProp
operator|instanceof
name|UriRef
condition|)
block|{
return|return
name|RDFBridgeHelper
operator|.
name|getResourceStringValue
argument_list|(
name|subject
argument_list|,
operator|(
name|UriRef
operator|)
name|nameProp
argument_list|,
name|graph
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Only String and UriRef instance can be passed to specify property name"
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getChildName
parameter_list|(
name|String
name|candidateName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|childNames
parameter_list|)
block|{
name|Integer
name|childNameCount
init|=
name|childNames
operator|.
name|get
argument_list|(
name|candidateName
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNameCount
operator|!=
literal|null
condition|)
block|{
name|candidateName
operator|+=
operator|(
name|childNameCount
operator|+
literal|1
operator|)
expr_stmt|;
name|childNames
operator|.
name|put
argument_list|(
name|candidateName
argument_list|,
operator|(
name|childNameCount
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childNames
operator|.
name|put
argument_list|(
name|candidateName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|candidateName
return|;
block|}
specifier|protected
name|void
name|bindRDFBridgeConfiguration
parameter_list|(
name|RDFBridgeConfiguration
name|rdfBridgeConfiguration
parameter_list|)
block|{
name|defaultBridgeConfigs
operator|.
name|add
argument_list|(
name|rdfBridgeConfiguration
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindRDFBridgeConfiguration
parameter_list|(
name|RDFBridgeConfiguration
name|rdfBridgeConfiguration
parameter_list|)
block|{
name|defaultBridgeConfigs
operator|.
name|remove
argument_list|(
name|rdfBridgeConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

