begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
specifier|public
class|class
name|RepositoryAccessManagerImpl
implements|implements
name|RepositoryAccessManager
block|{
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|RepositoryAccess
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindRepositoryAccess"
argument_list|,
name|unbind
operator|=
literal|"unbindRepositoryAccess"
argument_list|)
specifier|private
name|List
argument_list|<
name|RepositoryAccess
argument_list|>
name|accessors
init|=
operator|new
name|ArrayList
argument_list|<
name|RepositoryAccess
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryAccessManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RepositoryAccess
name|getRepositoryAccessor
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
block|{
name|Iterator
argument_list|<
name|RepositoryAccess
argument_list|>
name|rai
decl_stmt|;
synchronized|synchronized
init|(
name|accessors
init|)
block|{
name|rai
operator|=
name|accessors
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|rai
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryAccess
name|ra
init|=
name|rai
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ra
operator|.
name|canRetrieve
argument_list|(
name|connectionInfo
argument_list|)
condition|)
block|{
return|return
name|ra
return|;
block|}
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"No suitable repository access implementation for connection type {} "
argument_list|,
name|connectionInfo
operator|.
name|getConnectionType
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RepositoryAccess
name|getRepositoryAccess
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
name|Iterator
argument_list|<
name|RepositoryAccess
argument_list|>
name|rai
decl_stmt|;
synchronized|synchronized
init|(
name|accessors
init|)
block|{
name|rai
operator|=
name|accessors
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|rai
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RepositoryAccess
name|ra
init|=
name|rai
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ra
operator|.
name|canRetrieve
argument_list|(
name|session
argument_list|)
condition|)
block|{
return|return
name|ra
return|;
block|}
block|}
if|if
condition|(
name|session
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
try|try
block|{
return|return
operator|new
name|OfflineAccess
argument_list|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|session
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Using offline accessor"
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"No suitable repository access implementation for session {} "
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_class

begin_function
specifier|protected
name|void
name|bindRepositoryAccess
parameter_list|(
name|RepositoryAccess
name|repositoryAccess
parameter_list|)
block|{
synchronized|synchronized
init|(
name|accessors
init|)
block|{
name|accessors
operator|.
name|add
argument_list|(
name|repositoryAccess
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|protected
name|void
name|unbindRepositoryAccess
parameter_list|(
name|RepositoryAccess
name|repositoryAccess
parameter_list|)
block|{
synchronized|synchronized
init|(
name|repositoryAccess
init|)
block|{
name|accessors
operator|.
name|remove
argument_list|(
name|repositoryAccess
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

