begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|facade
operator|.
name|JenaGraph
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFWriter
import|;
end_import

begin_comment
comment|/**  * This class is a client for basic ontology level functionalities through Clerezza {@link TcManager}  *   * @author suat  *   */
end_comment

begin_class
specifier|public
class|class
name|TcManagerClient
block|{
specifier|private
name|TcManager
name|tcManager
decl_stmt|;
specifier|public
name|TcManagerClient
parameter_list|(
name|TcManager
name|tcManager
parameter_list|)
block|{
name|this
operator|.
name|tcManager
operator|=
name|tcManager
expr_stmt|;
block|}
comment|/**      * Checks the {@link MGraph} specified with<code>ontologyURI</code> exists      *       * @param ontologyURI      *            URI of the ontology      * @return whether the {@link MGraph} specified exists      */
specifier|public
name|boolean
name|modelExists
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|Set
argument_list|<
name|UriRef
argument_list|>
name|graphs
init|=
name|tcManager
operator|.
name|listMGraphs
argument_list|()
decl_stmt|;
if|if
condition|(
name|graphs
operator|.
name|contains
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Gets the ontology specified with<code>ontologyURI</code> through {@link TcManager}. Obtained      * {@link MGraph} is used to create a {@link JenaGraph}. If the graph does not exists, a new is created.      *       * @param ontologyURI      *            URI of the ontology      * @return {@link Model} specified by<code>ontologyURI</code>      */
specifier|public
name|Model
name|getModel
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|MGraph
name|graph
decl_stmt|;
if|if
condition|(
name|modelExists
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|graph
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|graph
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JenaGraph
name|jenaGraph
init|=
operator|new
name|JenaGraph
argument_list|(
name|graph
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|ModelFactory
operator|.
name|createModelForGraph
argument_list|(
name|jenaGraph
argument_list|)
decl_stmt|;
return|return
name|model
return|;
block|}
comment|/**      * Stores the ontology specified by<code>ontology</code> through {@link TcManager}. If a graph specified      * by<code>ontologyURI</code> already exists, it is deleted, then a new one is created.      *       * @param ontology      *            content of the ontology passed in a {@link Model} object      * @param ontologyURI      *            URI of the ontology      */
specifier|public
name|void
name|saveOntology
parameter_list|(
name|Model
name|ontology
parameter_list|,
name|String
name|ontologyURI
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|RDFWriter
name|rdfWriter
init|=
name|ontology
operator|.
name|getWriter
argument_list|(
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|rdfWriter
operator|.
name|setProperty
argument_list|(
literal|"xmlbase"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|rdfWriter
operator|.
name|write
argument_list|(
name|ontology
argument_list|,
name|baos
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelExists
argument_list|(
name|ontologyURI
argument_list|)
condition|)
block|{
name|deleteModel
argument_list|(
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
name|MGraph
name|graph
init|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
decl_stmt|;
name|JenaGraph
name|jenaGraph
init|=
operator|new
name|JenaGraph
argument_list|(
name|graph
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|ModelFactory
operator|.
name|createModelForGraph
argument_list|(
name|jenaGraph
argument_list|)
decl_stmt|;
name|model
operator|.
name|read
argument_list|(
name|bais
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|supportsTransactions
argument_list|()
condition|)
block|{
name|model
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteModel
parameter_list|(
name|String
name|ontologyURI
parameter_list|)
block|{
name|tcManager
operator|.
name|deleteTripleCollection
argument_list|(
operator|new
name|UriRef
argument_list|(
name|ontologyURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

