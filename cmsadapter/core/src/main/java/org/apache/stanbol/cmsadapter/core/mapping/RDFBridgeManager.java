begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Graph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|access
operator|.
name|TcManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|helper
operator|.
name|TcManagerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridgeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This manager class keeps track of {@link RDFBridge}s and {@link RDFMapper}s in the OSGi environment. It  * provides methods to map populate content repository using external RDF data and mapping structure of  * content repository into RDF. In both direction, {@link RDFBridge}s and {@link RDFMapper}s are used.  *<p>  * While populating the content repository, {@link RDFBridge} instances add additional information to external  * RDF so that it can be mapped to content repository by {@link RDFMapper}s. In other direction, first  * {@link RDFMapper} produces an RDF containing only information regarding the content repository, after that  * {@link RDFBridge}s add other resource to generated RDF based on their implementation.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|RDFBridgeManager
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RDFBridgeManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RDFBridgeManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|RDFBridge
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindRDFBridge"
argument_list|,
name|unbind
operator|=
literal|"unbindRDFBridge"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
name|List
argument_list|<
name|RDFBridge
argument_list|>
name|rdfBridges
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|RDFBridge
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|RDFMapper
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindRDFMapper"
argument_list|,
name|unbind
operator|=
literal|"unbindRDFMapper"
argument_list|,
name|strategy
operator|=
name|ReferenceStrategy
operator|.
name|EVENT
argument_list|)
name|List
argument_list|<
name|RDFMapper
argument_list|>
name|rdfMappers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|RDFMapper
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Reference
name|SessionManager
name|sessionManager
decl_stmt|;
annotation|@
name|Reference
name|TcManager
name|tcManager
decl_stmt|;
comment|/**      * In the first step, this method runs the {@link RDFBridge}s on the RDF data passed in a {@link Graph}      * instance. After this execution new assertions are added to initial graph to map the graph to content      * repository. For example, an assertion stating<b>rdf:type</b> as      * {@link CMSAdapterVocabulary#CMS_OBJECT} is added to each resource to be mapped to the content      * repository.      *<p>      * In the second step, annotated RDF is mapped to the repository by an {@link RDFMapper} instance. This      * instance is also determined according to session object which will be obtained with the      *<code>sessionKey</code> parameter.      *       * @param sessionKey      *            Session key to retrieve previously cached session to access the repository      * @param rawRDFData      *            RDF to be annotated      * @throws RepositoryAccessException      * @throws RDFBridgeException      */
specifier|public
name|void
name|storeRDFToRepository
parameter_list|(
name|String
name|sessionKey
parameter_list|,
name|Graph
name|rawRDFData
parameter_list|)
throws|throws
name|RepositoryAccessException
throws|,
name|RDFBridgeException
block|{
name|Object
name|session
init|=
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sessionKey
argument_list|)
decl_stmt|;
name|storeRDFToRepository
argument_list|(
name|session
argument_list|,
name|rawRDFData
argument_list|)
expr_stmt|;
block|}
comment|/**      * In the first step, this method runs the {@link RDFBridge}s on the RDF data passed in a {@link Graph}      * instance. After this execution new assertions are added to initial graph to map the graph to content      * repository. For example, an assertion stating<b>rdf:type</b> as      * {@link CMSAdapterVocabulary#CMS_OBJECT} is added to each resource to be mapped to the content      * repository.      *<p>      * In the second step, annotated RDF is mapped to the repository by an {@link RDFMapper} instance. This      * instance is also determined according to<code>session</code> object.      *       * @param session      *            Session to access repository      * @param rawRDFData      *            RDF to be annotated      * @throws RepositoryAccessException      * @throws RDFBridgeException      */
specifier|public
name|void
name|storeRDFToRepository
parameter_list|(
name|Object
name|session
parameter_list|,
name|Graph
name|rawRDFData
parameter_list|)
throws|throws
name|RepositoryAccessException
throws|,
name|RDFBridgeException
block|{
if|if
condition|(
name|rdfBridges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"There is no RDF Bridge to execute"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// According to connection type get RDF mapper, repository accessor,
comment|// session
name|RDFMapper
name|mapper
init|=
name|getRDFMapper
argument_list|(
name|session
argument_list|)
decl_stmt|;
comment|// Annotate raw RDF with CMS vocabulary annotations according to bridges
name|log
operator|.
name|info
argument_list|(
literal|"Graph annotation starting..."
argument_list|)
expr_stmt|;
name|MGraph
name|annotatedGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|RDFBridge
name|bridge
range|:
name|rdfBridges
control|)
block|{
name|long
name|startAnnotation
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|annotatedGraph
operator|.
name|addAll
argument_list|(
name|bridge
operator|.
name|annotateGraph
argument_list|(
name|rawRDFData
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Graph annotated in: "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startAnnotation
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Graph annotation finished"
argument_list|)
expr_stmt|;
comment|// Store annotated RDF in repository
name|log
operator|.
name|info
argument_list|(
literal|"Annotated graph mapping started..."
argument_list|)
expr_stmt|;
name|long
name|startMap
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|storeRDFinRepository
argument_list|(
name|session
argument_list|,
name|annotatedGraph
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Annotated graph mapped in: "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startMap
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method gets the RDF from the content repository based on the path configurations of      * {@link RDFBridge}s and annotate them using {@link RDFBridge#annotateCMSGraph(MGraph)}.      *<p>      * This method maps structure of content repository into an RDF      *       * @param baseURI      *            Base URI for the RDF to be generated      * @param sessionKey      *            Session key to retrieve previously cached session to access the repository      * @param store      *            If this parameter is set as<code>true</code>, the generated RDF is stored persistently      * @param update      *            This parameter is considered only if the<code>store</code> parameter is set      *<code>true</code>. If so and if this parameter is also set to true<code>true</code>, newly      *            generated graph will be merged with the existing one having the same base URI, otherwise a      *            new will be created.      * @return {@link MGraph} formed by the aggregation of generated RDF for each RDF bridge      * @throws RepositoryAccessException      * @throws RDFBridgeException      */
specifier|public
name|MGraph
name|generateRDFFromRepository
parameter_list|(
name|String
name|baseURI
parameter_list|,
name|String
name|sessionKey
parameter_list|,
name|boolean
name|store
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|RepositoryAccessException
throws|,
name|RDFBridgeException
block|{
name|Object
name|session
init|=
name|sessionManager
operator|.
name|getSession
argument_list|(
name|sessionKey
argument_list|)
decl_stmt|;
return|return
name|generateRDFFromRepository
argument_list|(
name|baseURI
argument_list|,
name|session
argument_list|,
name|store
argument_list|,
name|update
argument_list|)
return|;
block|}
comment|/**      * This method gets the RDF from the content repository based on the path configurations of      * {@link RDFBridge}s and annotate them using {@link RDFBridge#annotateCMSGraph(MGraph)}.      *       * @param baseURI      *            Base URI for the RDF to be generated      * @param session      *            Session to access repository      * @param store      *            If this parameter is set as<code>true</code>, the generated RDF is stored persistently      * @param update      *            This parameter is considered only if the<code>store</code> parameter is set      *<code>true</code>. If so and if this parameter is also set to true<code>true</code>, newly      *            generated graph will be merged with the existing one having the same base URI, otherwise a      *            new will be created.      * @return {@link MGraph} formed by the aggregation of generated RDF for each RDF bridge      * @throws RepositoryAccessException      * @throws RDFBridgeException      */
specifier|public
name|MGraph
name|generateRDFFromRepository
parameter_list|(
name|String
name|baseURI
parameter_list|,
name|Object
name|session
parameter_list|,
name|boolean
name|store
parameter_list|,
name|boolean
name|update
parameter_list|)
throws|throws
name|RepositoryAccessException
throws|,
name|RDFBridgeException
block|{
if|if
condition|(
name|rdfBridges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"There is no RDF Bridge to execute"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleMGraph
argument_list|()
return|;
block|}
name|RDFMapper
name|mapper
init|=
name|getRDFMapper
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|MGraph
name|cmsGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
for|for
control|(
name|RDFBridge
name|bridge
range|:
name|rdfBridges
control|)
block|{
name|MGraph
name|generatedGraph
init|=
name|mapper
operator|.
name|generateRDFFromRepository
argument_list|(
name|baseURI
argument_list|,
name|session
argument_list|,
name|bridge
operator|.
name|getCMSPath
argument_list|()
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|annotateCMSGraph
argument_list|(
name|generatedGraph
argument_list|)
expr_stmt|;
name|cmsGraph
operator|.
name|addAll
argument_list|(
name|generatedGraph
argument_list|)
expr_stmt|;
block|}
name|MGraph
name|persistentGraph
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|store
condition|)
block|{
name|TcManagerClient
name|tcManagerClient
init|=
operator|new
name|TcManagerClient
argument_list|(
name|tcManager
argument_list|)
decl_stmt|;
name|boolean
name|graphExists
init|=
name|tcManagerClient
operator|.
name|modelExists
argument_list|(
name|baseURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|update
condition|)
block|{
if|if
condition|(
name|graphExists
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Getting the existing triple collection having base URI: {}"
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
name|persistentGraph
operator|=
name|tcManager
operator|.
name|getMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|baseURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|persistentGraph
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|baseURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|graphExists
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting the triple collection having base URI: {}"
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
name|tcManager
operator|.
name|deleteTripleCollection
argument_list|(
operator|new
name|UriRef
argument_list|(
name|baseURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|persistentGraph
operator|=
name|tcManager
operator|.
name|createMGraph
argument_list|(
operator|new
name|UriRef
argument_list|(
name|baseURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Saving the triple collection having base URI: {}"
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
name|persistentGraph
operator|.
name|addAll
argument_list|(
name|cmsGraph
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|persistentGraph
operator|=
name|cmsGraph
expr_stmt|;
block|}
return|return
name|persistentGraph
return|;
block|}
specifier|private
name|RDFMapper
name|getRDFMapper
parameter_list|(
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|RDFMapper
name|mapper
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RDFMapper
name|rdfMapper
range|:
name|rdfMappers
control|)
block|{
if|if
condition|(
name|rdfMapper
operator|.
name|canMapWith
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|mapper
operator|=
operator|(
name|RDFMapper
operator|)
name|rdfMapper
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve RDFMapper for session: {}"
argument_list|,
name|session
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to retrieve RDFMapper for session: "
operator|+
name|session
argument_list|)
throw|;
block|}
return|return
name|mapper
return|;
block|}
specifier|protected
name|void
name|bindRDFBridge
parameter_list|(
name|RDFBridge
name|rdfBridge
parameter_list|)
block|{
name|rdfBridges
operator|.
name|add
argument_list|(
name|rdfBridge
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindRDFBridge
parameter_list|(
name|RDFBridge
name|rdfBridge
parameter_list|)
block|{
name|rdfBridges
operator|.
name|remove
argument_list|(
name|rdfBridge
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|bindRDFMapper
parameter_list|(
name|RDFMapper
name|rdfMapper
parameter_list|)
block|{
name|rdfMappers
operator|.
name|add
argument_list|(
name|rdfMapper
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindRDFMapper
parameter_list|(
name|RDFMapper
name|rdfMapper
parameter_list|)
block|{
name|rdfMappers
operator|.
name|remove
argument_list|(
name|rdfMapper
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

