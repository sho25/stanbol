begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|LiteralFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|MGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|NonLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|TripleCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|SimpleMGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|impl
operator|.
name|TripleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|jena
operator|.
name|facade
operator|.
name|JenaGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|RDFWriter
import|;
end_import

begin_class
specifier|public
class|class
name|CMSVocabularyAnnotator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UriRef
name|RDF_TYPE
init|=
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"Type"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|addAnnotationsToGraph
parameter_list|(
name|List
argument_list|<
name|RDFBridge
argument_list|>
name|rdfBridges
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|children
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
for|for
control|(
name|RDFBridge
name|bridge
range|:
name|rdfBridges
control|)
block|{
name|children
operator|=
name|bridge
operator|.
name|getChildrenResources
argument_list|()
expr_stmt|;
name|properties
operator|=
name|bridge
operator|.
name|getTargetPropertyResources
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|tripleIterator
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|bridge
operator|.
name|getTargetResourcePredicate
argument_list|()
argument_list|,
name|bridge
operator|.
name|getTargetResourceValue
argument_list|()
argument_list|)
decl_stmt|;
name|UriRef
name|nameProp
init|=
name|bridge
operator|.
name|getNameResource
argument_list|()
decl_stmt|;
name|String
name|targetRootPath
init|=
name|bridge
operator|.
name|getTargetCMSPath
argument_list|()
decl_stmt|;
comment|// add cms object annotations
while|while
condition|(
name|tripleIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|tripleIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|subject
init|=
name|t
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getResourceStringValue
argument_list|(
name|subject
argument_list|,
name|nameProp
argument_list|,
name|graph
argument_list|)
decl_stmt|;
comment|// There should be a valid name for CMS Object
if|if
condition|(
operator|!
name|name
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
comment|// if this object has already has name and path annotations, it means that it's already
comment|// processed as child of another object. So, don't put new name and path annotations
if|if
condition|(
operator|!
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check children and add child and parent annotations
for|for
control|(
name|UriRef
name|childPropURI
range|:
name|children
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|childrenIt
init|=
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|childPropURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|childNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|childrenIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|child
init|=
name|childrenIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|NonLiteral
name|childSubject
init|=
operator|new
name|UriRef
argument_list|(
name|replaceEndCharacters
argument_list|(
name|child
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|childName
init|=
name|getNameOfProperty
argument_list|(
name|childSubject
argument_list|,
name|children
operator|.
name|get
argument_list|(
name|childPropURI
argument_list|)
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childName
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|removeExistingTriple
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|subject
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|getChildName
argument_list|(
name|childName
argument_list|,
name|childNames
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain a name for child property: {}"
argument_list|,
name|childPropURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check desired properties to be mapped
name|Map
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
name|propertiesNamesInBridge
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|UriRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UriRef
name|propURI
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|propertyName
init|=
name|getNameOfProperty
argument_list|(
name|subject
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|propURI
argument_list|)
argument_list|,
name|graph
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertyName
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|propertiesNamesInBridge
operator|.
name|containsKey
argument_list|(
name|propURI
argument_list|)
condition|)
block|{
name|UriRef
name|tempRef
init|=
operator|new
name|UriRef
argument_list|(
name|propertyName
operator|+
literal|"Prop"
operator|+
name|bridge
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
name|propertiesNamesInBridge
operator|.
name|put
argument_list|(
name|propURI
argument_list|,
name|tempRef
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|tempRef
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PROPERTY_NAME
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|propertyName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|tempRef
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PROPERTY_URI
argument_list|,
name|propURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_HAS_PROPERTY
argument_list|,
name|propertiesNamesInBridge
operator|.
name|get
argument_list|(
name|propURI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to obtain a name for property: {}"
argument_list|,
name|propURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*              * it is assumed that any two object to be created from different bridges will not be related with              * each other. Otherwise, it is necessary to assign target cms path for each CMS Object              */
name|annotatePaths
argument_list|(
name|targetRootPath
argument_list|,
name|graph
argument_list|)
expr_stmt|;
block|}
comment|// remove code
try|try
block|{
name|saveOntology
argument_list|(
name|graph
argument_list|,
name|ontologyURI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|annotatePaths
parameter_list|(
name|String
name|targetRootPath
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
comment|// first detect root objects
name|List
argument_list|<
name|NonLiteral
argument_list|>
name|roots
init|=
operator|new
name|ArrayList
argument_list|<
name|NonLiteral
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|RDF_TYPE
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRoot
argument_list|(
name|t
argument_list|,
name|graph
argument_list|)
condition|)
block|{
name|roots
operator|.
name|add
argument_list|(
name|t
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// assign paths to children recursively
name|LiteralFactory
name|literalFactory
init|=
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|NonLiteral
name|root
range|:
name|roots
control|)
block|{
name|assignChildrenPaths
argument_list|(
name|targetRootPath
argument_list|,
name|root
argument_list|,
name|graph
argument_list|,
name|literalFactory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assignChildrenPaths
parameter_list|(
name|String
name|cmsRootPath
parameter_list|,
name|NonLiteral
name|root
parameter_list|,
name|MGraph
name|graph
parameter_list|,
name|LiteralFactory
name|literalFactory
parameter_list|,
name|boolean
name|firstLevel
parameter_list|)
block|{
name|String
name|rootName
init|=
name|getResourceStringValue
argument_list|(
name|root
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|String
name|rootPath
init|=
name|cmsRootPath
decl_stmt|;
if|if
condition|(
name|firstLevel
condition|)
block|{
name|rootPath
operator|=
name|formRootPath
argument_list|(
name|cmsRootPath
argument_list|,
name|rootName
argument_list|)
expr_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|root
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PATH
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|rootPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
literal|null
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
name|root
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NonLiteral
name|childSubject
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|childName
init|=
name|getResourceStringValue
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_NAME
argument_list|,
name|graph
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|formRootPath
argument_list|(
name|rootPath
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|graph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|childSubject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PATH
argument_list|,
name|literalFactory
operator|.
name|createTypedLiteral
argument_list|(
name|childPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assignChildrenPaths
argument_list|(
name|childPath
argument_list|,
name|childSubject
argument_list|,
name|graph
argument_list|,
name|literalFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isRoot
parameter_list|(
name|Triple
name|cmsObjectTriple
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|NonLiteral
name|subject
init|=
name|cmsObjectTriple
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|CMSAdapterVocabulary
operator|.
name|CMS_OBJECT_PARENT_REF
argument_list|,
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|formRootPath
parameter_list|(
name|String
name|targetRootPath
parameter_list|,
name|String
name|objectName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|targetRootPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|targetRootPath
operator|+=
literal|"/"
expr_stmt|;
block|}
return|return
name|targetRootPath
operator|+
name|objectName
return|;
block|}
specifier|private
specifier|static
name|String
name|getNameOfProperty
parameter_list|(
name|NonLiteral
name|subject
parameter_list|,
name|Object
name|nameProp
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
if|if
condition|(
name|nameProp
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|nameProp
return|;
block|}
elseif|else
if|if
condition|(
name|nameProp
operator|instanceof
name|UriRef
condition|)
block|{
return|return
name|getResourceStringValue
argument_list|(
name|subject
argument_list|,
operator|(
name|UriRef
operator|)
name|nameProp
argument_list|,
name|graph
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Only String and UriRef instance can be passed to specify property name"
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getChildName
parameter_list|(
name|String
name|candidateName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|childNames
parameter_list|)
block|{
name|Integer
name|childNameCount
init|=
name|childNames
operator|.
name|get
argument_list|(
name|candidateName
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNameCount
operator|!=
literal|null
condition|)
block|{
name|candidateName
operator|+=
operator|(
name|childNameCount
operator|+
literal|1
operator|)
expr_stmt|;
name|childNames
operator|.
name|put
argument_list|(
name|candidateName
argument_list|,
operator|(
name|childNameCount
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|childNames
operator|.
name|put
argument_list|(
name|candidateName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|candidateName
return|;
block|}
specifier|private
specifier|static
name|String
name|replaceEndCharacters
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|.
name|replace
argument_list|(
literal|"<"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getResourceStringValue
parameter_list|(
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|nameProp
parameter_list|,
name|MGraph
name|graph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|graph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|nameProp
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Triple
name|t
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Resource
name|r
init|=
name|t
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|Literal
condition|)
block|{
return|return
operator|(
operator|(
name|Literal
operator|)
name|r
operator|)
operator|.
name|getLexicalForm
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Resource value is not a Literal for triple: {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to get name from subject: {} and name property: {}"
argument_list|,
name|subject
argument_list|,
name|nameProp
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|removeExistingTriple
parameter_list|(
name|NonLiteral
name|subject
parameter_list|,
name|UriRef
name|predicate
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Triple
argument_list|>
name|it
init|=
name|mGraph
operator|.
name|filter
argument_list|(
name|subject
argument_list|,
name|predicate
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|mGraph
operator|.
name|remove
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// /////////////////////////////////////
specifier|private
specifier|static
name|String
name|ontologyURI
init|=
literal|"http://deneme#"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|CMSVocabularyAnnotator
name|cmsVocabularyAnnotator
init|=
operator|new
name|CMSVocabularyAnnotator
argument_list|()
decl_stmt|;
name|cmsVocabularyAnnotator
operator|.
name|fillCMSObjects
argument_list|()
expr_stmt|;
block|}
specifier|private
name|MGraph
name|fillCMSObjects
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
name|MGraph
name|mGraph
init|=
operator|new
name|SimpleMGraph
argument_list|()
decl_stmt|;
name|UriRef
name|cmsObject1
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"Concept1"
argument_list|)
decl_stmt|;
name|UriRef
name|cmsObject2
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"Concept2"
argument_list|)
decl_stmt|;
name|UriRef
name|cmsObject3
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"Concept3"
argument_list|)
decl_stmt|;
name|UriRef
name|populatedPlace2
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"PopulatedPlace2"
argument_list|)
decl_stmt|;
name|UriRef
name|populatedPlace3
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"PopulatedPlace3"
argument_list|)
decl_stmt|;
name|UriRef
name|city1
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"City1"
argument_list|)
decl_stmt|;
name|UriRef
name|city2
init|=
operator|new
name|UriRef
argument_list|(
name|ontologyURI
operator|+
literal|"City2"
argument_list|)
decl_stmt|;
comment|// types
name|addProperty
argument_list|(
name|cmsObject1
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"Type"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject2
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"Type"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject3
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"Type"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"Concept"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|populatedPlace2
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"Type"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"PopulatedPlace"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|populatedPlace3
argument_list|,
name|NamespaceEnum
operator|.
name|rdf
operator|+
literal|"Type"
argument_list|,
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|dbpediaOnt
operator|+
literal|"PopulatedPlace"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
comment|// labels
name|addProperty
argument_list|(
name|cmsObject1
argument_list|,
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
literal|null
argument_list|,
literal|"CMSObject1"
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject2
argument_list|,
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
literal|null
argument_list|,
literal|"CMSObject2"
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject3
argument_list|,
name|NamespaceEnum
operator|.
name|rdfs
operator|+
literal|"label"
argument_list|,
literal|null
argument_list|,
literal|"CMSObject3"
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
comment|// children
name|addProperty
argument_list|(
name|cmsObject1
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"narrower"
argument_list|,
name|cmsObject2
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject3
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"narrower"
argument_list|,
name|cmsObject3
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject1
argument_list|,
name|NamespaceEnum
operator|.
name|dbpediaProp
operator|+
literal|"city"
argument_list|,
name|city1
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject2
argument_list|,
name|NamespaceEnum
operator|.
name|dbpediaProp
operator|+
literal|"city"
argument_list|,
name|city2
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
comment|// prop
name|addProperty
argument_list|(
name|cmsObject2
argument_list|,
name|NamespaceEnum
operator|.
name|dbpediaProp
operator|+
literal|"place"
argument_list|,
name|populatedPlace2
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject3
argument_list|,
name|NamespaceEnum
operator|.
name|dbpediaProp
operator|+
literal|"place"
argument_list|,
name|populatedPlace3
argument_list|,
literal|null
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject1
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"definition"
argument_list|,
literal|null
argument_list|,
literal|"CMSObject1Def"
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject2
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"definition"
argument_list|,
literal|null
argument_list|,
literal|"CMSObject2Def"
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|cmsObject3
argument_list|,
name|NamespaceEnum
operator|.
name|skos
operator|+
literal|"definition"
argument_list|,
literal|null
argument_list|,
literal|"CMSObject3Def"
argument_list|,
name|mGraph
argument_list|)
expr_stmt|;
name|saveOntology
argument_list|(
name|mGraph
argument_list|,
name|ontologyURI
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mGraph
return|;
block|}
specifier|private
name|void
name|addProperty
parameter_list|(
name|UriRef
name|subject
parameter_list|,
name|String
name|predicate
parameter_list|,
name|UriRef
name|object
parameter_list|,
name|Object
name|litObject
parameter_list|,
name|MGraph
name|mGraph
parameter_list|)
block|{
name|UriRef
name|prop
init|=
operator|new
name|UriRef
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|prop
argument_list|,
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|litObject
operator|!=
literal|null
condition|)
block|{
name|mGraph
operator|.
name|add
argument_list|(
operator|new
name|TripleImpl
argument_list|(
name|subject
argument_list|,
name|prop
argument_list|,
name|LiteralFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createTypedLiteral
argument_list|(
name|litObject
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|saveOntology
parameter_list|(
name|TripleCollection
name|tc
parameter_list|,
name|String
name|ontologyURI
parameter_list|,
name|boolean
name|output
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|JenaGraph
name|jenaGraph
init|=
operator|new
name|JenaGraph
argument_list|(
name|tc
argument_list|)
decl_stmt|;
name|Model
name|model
init|=
name|ModelFactory
operator|.
name|createModelForGraph
argument_list|(
name|jenaGraph
argument_list|)
decl_stmt|;
name|OntModel
name|ontModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|,
name|model
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
decl_stmt|;
if|if
condition|(
name|output
condition|)
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
literal|"/home/srdc/Desktop/cmsAdapterTest/rdfmap/Outmgraph"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
literal|"/home/srdc/Desktop/cmsAdapterTest/rdfmap/mgraph"
argument_list|)
expr_stmt|;
block|}
name|RDFWriter
name|rdfWriter
init|=
name|ontModel
operator|.
name|getWriter
argument_list|(
literal|"RDF/XML"
argument_list|)
decl_stmt|;
name|rdfWriter
operator|.
name|setProperty
argument_list|(
literal|"xmlbase"
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
name|rdfWriter
operator|.
name|write
argument_list|(
name|ontModel
argument_list|,
name|fos
argument_list|,
name|ontologyURI
argument_list|)
expr_stmt|;
block|}
comment|// /////////////////////////////////////
block|}
end_class

end_unit

