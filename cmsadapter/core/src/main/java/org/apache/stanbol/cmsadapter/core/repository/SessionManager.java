begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides session management of content repositories in the scope of CMS Adapter. Sessions are  * cached such that they can be fetched later using a corresponding to session key. Same session key (so the  * same session) can be used in multiple operations.  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|SessionManager
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SessionManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SessionManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Reference
name|RepositoryAccessManager
name|repositoryAccessManager
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SessionContext
argument_list|>
name|sessions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SessionContext
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Creates a unique identifier (session key) for the cached session.      *       * @param session      *            Session object to be cached      * @param type      *            The protocol type of the cached session e.g<b>JCR</b>,<b>CMIS</b>.      * @return a {@link UUID} generated unique identifier.      */
specifier|public
name|String
name|createSessionKey
parameter_list|(
name|Object
name|session
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|ConnectionInfo
name|cInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|cInfo
operator|.
name|setConnectionType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|cacheSessionContext
argument_list|(
operator|new
name|SessionContext
argument_list|(
name|session
argument_list|,
name|cInfo
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Creates a unique identifier (session key) for the cached session. First the session is obtained using      * the connection parameters.      *       * @param repositoryURL      *            URL of the content repository. For JCR repositories<b>RMI protocol</b>, for CMIS      *            repositories<b>AtomPub Binding</b> is used. This parameter should be set according to these      *            connection methods.      * @param workspaceIdentifier      *            For JCR repositories this parameter determines the workspace to be connected. On the other      *            hand for CMIS repositories<b>repository ID</b> should be set to this parameter. In case of      *            not setting this parameter, for JCR<b>default workspace</b> is selected, for CMIS the      *<b>first repository</b> obtained through the session object is selected.      * @param username      *            Username to connect to content repository      * @param password      *            Password to connect to content repository      * @param connectionType      *            Connection type; either<b>JCR</b> or<b>CMIS</b>      * @return a {@link UUID} generated unique identifier.      * @throws RepositoryAccessException      */
specifier|public
name|String
name|createSessionKey
parameter_list|(
name|String
name|repositoryURL
parameter_list|,
name|String
name|workspaceIdentifier
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|connectionType
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|ConnectionInfo
name|connectionInfo
init|=
name|formConnectionInfo
argument_list|(
name|repositoryURL
argument_list|,
name|workspaceIdentifier
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|connectionType
argument_list|)
decl_stmt|;
name|RepositoryAccess
name|repositoryAccess
init|=
name|repositoryAccessManager
operator|.
name|getRepositoryAccessor
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryAccess
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is no suitable RepositoryAccess instance in the environment. \n Repository URL: %s\n Workspace identifier: %s\n Username: %s\n Password: %s\n Connection type: %s"
argument_list|,
name|repositoryURL
argument_list|,
name|workspaceIdentifier
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|connectionType
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"There is no suitable RepositoryAccess instance in the environment. Please refer to logs"
argument_list|)
throw|;
block|}
name|Object
name|session
init|=
name|repositoryAccess
operator|.
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
return|return
name|cacheSessionContext
argument_list|(
operator|new
name|SessionContext
argument_list|(
name|session
argument_list|,
name|connectionInfo
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the cached session based on the given<code>session key</code>. If the session is not valid, it      * tries to get another session using the previous connection parameters.      *       * @param sessionKey      *            session identifier through which the session itself will be obtained      * @return session object      * @throws RepositoryAccessException      */
specifier|public
name|Object
name|getSession
parameter_list|(
name|String
name|sessionKey
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|SessionContext
name|sessionContext
init|=
name|sessions
operator|.
name|get
argument_list|(
name|sessionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|!=
literal|null
condition|)
block|{
name|Object
name|session
init|=
name|sessionContext
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|RepositoryAccess
name|repositoryAccess
init|=
name|repositoryAccessManager
operator|.
name|getRepositoryAccess
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryAccess
operator|!=
literal|null
condition|)
block|{
name|boolean
name|validSession
init|=
name|repositoryAccess
operator|.
name|isSessionValid
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|validSession
condition|)
block|{
return|return
name|session
return|;
block|}
else|else
block|{
name|ConnectionInfo
name|connectionInfo
init|=
name|sessionContext
operator|.
name|getConnectionInfo
argument_list|()
decl_stmt|;
name|session
operator|=
name|repositoryAccess
operator|.
name|getSession
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Session was invalid for the connection info. \n Repository URL: %s\n Workspace identifier: %s\n Username: %s\n Password: %s\n Connection type: %s"
argument_list|,
name|connectionInfo
operator|.
name|getRepositoryURL
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getUsername
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getPassword
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getConnectionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"New session is created for the provided key: {}"
argument_list|,
name|sessionKey
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|put
argument_list|(
name|sessionKey
argument_list|,
operator|new
name|SessionContext
argument_list|(
name|session
argument_list|,
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
block|}
else|else
block|{
name|ConnectionInfo
name|connectionInfo
init|=
name|sessionContext
operator|.
name|getConnectionInfo
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is no suitable RepositoryAccess instance in the environment. \n Repository URL: %s\n Workspace identifier: %s\n Username: %s\n Password: %s\n Connection type: %s"
argument_list|,
name|connectionInfo
operator|.
name|getRepositoryURL
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getWorkspaceName
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getUsername
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getPassword
argument_list|()
argument_list|,
name|connectionInfo
operator|.
name|getConnectionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"There is no suitable RepositoryAccess instance in the environment. Please refer to logs"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"There is no cached session for the key: {}"
argument_list|,
name|sessionKey
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is no cached session for the key: %s"
argument_list|,
name|sessionKey
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the protocol type e.g<b>JCR</b>,<b>CMIS</b> based on the given session key.      */
specifier|public
name|String
name|getConnectionTypeBySessionKey
parameter_list|(
name|String
name|sessionKey
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|SessionContext
name|sessionContext
init|=
name|sessions
operator|.
name|get
argument_list|(
name|sessionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|!=
literal|null
condition|)
block|{
return|return
name|sessionContext
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionType
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"There is no cached session for the key: {}"
argument_list|,
name|sessionKey
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"There is no cached session for the key: %s"
argument_list|,
name|sessionKey
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|cacheSessionContext
parameter_list|(
name|SessionContext
name|sessionContext
parameter_list|)
block|{
name|String
name|newUUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sessions
operator|.
name|put
argument_list|(
name|newUUID
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
return|return
name|newUUID
return|;
block|}
specifier|private
name|ConnectionInfo
name|formConnectionInfo
parameter_list|(
name|String
name|repositoryURL
parameter_list|,
name|String
name|workspaceIdentifier
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|connectionType
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
name|cInfo
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|cInfo
operator|.
name|setRepositoryURL
argument_list|(
name|repositoryURL
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setWorkspaceName
argument_list|(
name|workspaceIdentifier
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|cInfo
operator|.
name|setConnectionType
argument_list|(
name|connectionType
argument_list|)
expr_stmt|;
return|return
name|cInfo
return|;
block|}
specifier|private
class|class
name|SessionContext
block|{
specifier|private
name|Object
name|session
decl_stmt|;
specifier|private
name|ConnectionInfo
name|connectionInfo
decl_stmt|;
specifier|public
name|SessionContext
parameter_list|(
name|Object
name|session
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|connectionInfo
operator|=
name|connectionInfo
expr_stmt|;
block|}
specifier|public
name|Object
name|getSession
parameter_list|()
block|{
return|return
name|this
operator|.
name|session
return|;
block|}
specifier|public
name|ConnectionInfo
name|getConnectionInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionInfo
return|;
block|}
block|}
block|}
end_class

end_unit

