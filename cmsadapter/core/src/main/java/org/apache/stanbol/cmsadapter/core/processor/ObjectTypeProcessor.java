begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|ProcessorProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|DatatypeProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * This processer can process CMS Objects of type {@link ObjectTypeDefinition}. A type definition corresponds  * to an OWL Class and properties defined on the type corresponds to OWL datatype or OWL object properties.<br/>  * A property is converted to an OWL object property if it is type is amongst following:  *<ul>  *<li>{@link PropType#NAME}</li>  *<li>{@link PropType#PATH}</li>  *<li>{@link PropType#REFERENCE}</li>  *</ul>  * Otherwise the property is converted to an OWL datatype property.<br/>  *   * @author Suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ObjectTypeProcessor
implements|implements
name|Processor
implements|,
name|ProcessorProperties
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClassificationObjectProcesser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
static|static
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROCESSING_ORDER
argument_list|,
name|OBJECT_TYPE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|canProcess
parameter_list|(
name|Object
name|cmsObject
parameter_list|,
name|Object
name|session
parameter_list|)
block|{
return|return
name|cmsObject
operator|instanceof
name|ObjectTypeDefinition
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createObjects
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|List
argument_list|<
name|DObjectType
argument_list|>
name|objectTypes
init|=
name|cmsObject2dobjectType
argument_list|(
name|objects
argument_list|,
name|engine
argument_list|)
decl_stmt|;
name|createDecoratedObjectTypes
argument_list|(
name|objectTypes
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createDecoratedObjectTypes
parameter_list|(
name|List
argument_list|<
name|DObjectType
argument_list|>
name|objectTypes
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
for|for
control|(
name|DObjectType
name|objectType
range|:
name|objectTypes
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|objectType
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
try|try
block|{
name|OntClass
name|parentClass
init|=
name|processType
argument_list|(
name|objectType
argument_list|,
name|engine
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentClass
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|processProperties
argument_list|(
name|objectType
argument_list|,
name|parentClass
argument_list|,
name|engine
argument_list|)
expr_stmt|;
comment|// process children
name|List
argument_list|<
name|DObjectType
argument_list|>
name|children
init|=
name|objectType
operator|.
name|getChildDefinitions
argument_list|()
decl_stmt|;
name|createDecoratedObjectTypes
argument_list|(
name|children
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to process ObjectTypeDefinition {}"
argument_list|,
name|objectType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|OntClass
name|processType
parameter_list|(
name|DObjectType
name|objectType
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|OntologyResourceHelper
name|orh
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
name|OntClass
name|parentClass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|objectType
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentClass
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed create class from CMS Object {}"
argument_list|,
name|objectType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|DObjectType
argument_list|>
name|children
init|=
name|objectType
operator|.
name|getChildDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DObjectType
name|child
range|:
name|children
control|)
block|{
name|OntClass
name|childClass
init|=
name|orh
operator|.
name|createOntClassByObjectTypeDefinition
argument_list|(
name|child
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childClass
operator|!=
literal|null
condition|)
block|{
name|orh
operator|.
name|addSubsumptionAssertion
argument_list|(
name|parentClass
argument_list|,
name|childClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create OntClass for child object {} while processing type {}"
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|objectType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|parentClass
return|;
block|}
specifier|private
name|void
name|processProperties
parameter_list|(
name|DObjectType
name|objectType
parameter_list|,
name|OntClass
name|subjectClass
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
for|for
control|(
name|DPropertyDefinition
name|propDef
range|:
name|objectType
operator|.
name|getPropertyDefinitions
argument_list|()
control|)
block|{
name|OntologyResourceHelper
name|orh
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|propDef
operator|.
name|getPropertyType
argument_list|()
operator|==
name|PropType
operator|.
name|NAME
operator|)
operator|||
operator|(
name|propDef
operator|.
name|getPropertyType
argument_list|()
operator|==
name|PropType
operator|.
name|PATH
operator|)
operator|||
operator|(
name|propDef
operator|.
name|getPropertyType
argument_list|()
operator|==
name|PropType
operator|.
name|REFERENCE
operator|)
condition|)
block|{
name|ObjectProperty
name|op
init|=
name|orh
operator|.
name|createObjectPropertyByPropertyDefinition
argument_list|(
name|propDef
operator|.
name|getInstance
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|subjectClass
block|}
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create ObjectProperty for property definition {}"
argument_list|,
name|propDef
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DatatypeProperty
name|dtp
init|=
name|orh
operator|.
name|createDatatypePropertyByPropertyDefinition
argument_list|(
name|propDef
operator|.
name|getInstance
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|subjectClass
block|}
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dtp
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create DatatypeProperty for property definition {}"
argument_list|,
name|propDef
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteObjects
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|List
argument_list|<
name|DObjectType
argument_list|>
name|objectTypes
init|=
name|cmsObject2dobjectType
argument_list|(
name|objects
argument_list|,
name|engine
argument_list|)
decl_stmt|;
name|deleteDecoratedObjectTypes
argument_list|(
name|objectTypes
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteDecoratedObjectTypes
parameter_list|(
name|List
argument_list|<
name|DObjectType
argument_list|>
name|objectTypes
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|OntologyResourceHelper
name|orh
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
for|for
control|(
name|DObjectType
name|objectType
range|:
name|objectTypes
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|objectType
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|orh
operator|.
name|deleteStatementsByReference
argument_list|(
name|objectType
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|deletePropertyDefinitions
argument_list|(
name|objectType
operator|.
name|getID
argument_list|()
argument_list|,
name|orh
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DObjectType
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|DObjectType
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|children
operator|=
name|objectType
operator|.
name|getChildDefinitions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
comment|// Not expected
block|}
name|deleteDecoratedObjectTypes
argument_list|(
name|children
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|deletePropertyDefinitions
parameter_list|(
name|String
name|objectTypeRef
parameter_list|,
name|OntologyResourceHelper
name|orh
parameter_list|)
block|{
name|orh
operator|.
name|deleteObjectTypeProperties
argument_list|(
name|objectTypeRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProcessorProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
specifier|private
name|List
argument_list|<
name|DObjectType
argument_list|>
name|cmsObject2dobjectType
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|List
argument_list|<
name|DObjectType
argument_list|>
name|dObjectTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|DObjectType
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|objects
operator|!=
literal|null
condition|)
block|{
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|objects
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|o
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|dObjectTypes
operator|.
name|add
argument_list|(
name|adapter
operator|.
name|wrapAsDObjectType
argument_list|(
operator|(
name|ObjectTypeDefinition
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dObjectTypes
return|;
block|}
block|}
end_class

end_unit

