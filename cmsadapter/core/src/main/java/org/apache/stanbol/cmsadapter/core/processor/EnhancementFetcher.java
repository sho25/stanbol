begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|CMSAdapterVocabulary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|MappingModelParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|helper
operator|.
name|OntologyResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|MappingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|BridgeDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
operator|.
name|InstanceBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ContentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DObjectAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|decorated
operator|.
name|DProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|BaseProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
operator|.
name|ProcessorProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|enhancer
operator|.
name|servicesapi
operator|.
name|rdf
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|ontology
operator|.
name|OntModelSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ModelFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|ResourceFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|rdf
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hp
operator|.
name|hpl
operator|.
name|jena
operator|.
name|vocabulary
operator|.
name|RDF
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|EnhancementFetcher
extends|extends
name|BaseProcessor
implements|implements
name|Processor
implements|,
name|ProcessorProperties
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnhancementFetcher
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Prefix to identify assignment of an enhancement to a cms object.      */
specifier|private
specifier|static
specifier|final
name|String
name|ENHANCEMENT_PREFIX
init|=
literal|"Enh-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CONTENT_PROPERTY
init|=
literal|"org.apache.stanbol.cmsadapter.core.processor.EnhancementFetcher.contentProperty"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROP_CONTENT_PROPERTY
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
block|{
literal|"content"
block|}
argument_list|)
specifier|private
name|String
index|[]
name|contentProperties
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CONTENTHUB_RESOURCE
init|=
literal|"org.apache.stanbol.cmsadapter.core.processort.EnhancementFetcher.contentHubResource"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|PROP_CONTENTHUB_RESOURCE
argument_list|,
name|value
operator|=
literal|"http://localhost:8080/contenthub/"
argument_list|)
specifier|private
name|String
name|engineRootResource
decl_stmt|;
annotation|@
name|Reference
name|Store
name|store
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
static|static
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PROCESSING_ORDER
argument_list|,
name|CMSOBJECT_POST
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Client
name|client
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProcessorProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|canProcess
parameter_list|(
name|Object
name|cmsObject
parameter_list|)
block|{
return|return
name|cmsObject
operator|instanceof
name|ContentObject
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createObjects
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|List
argument_list|<
name|DObject
argument_list|>
name|cmsObjects
init|=
name|object2dobject
argument_list|(
name|objects
argument_list|,
name|engine
argument_list|)
decl_stmt|;
if|if
condition|(
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BridgeDefinitions
name|bridgeDefinitions
init|=
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
decl_stmt|;
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InstanceBridge
argument_list|>
name|instanceBridges
init|=
name|MappingModelParser
operator|.
name|getInstanceBridges
argument_list|(
name|bridgeDefinitions
argument_list|)
decl_stmt|;
name|RepositoryAccess
name|accessor
init|=
name|engine
operator|.
name|getRepositoryAccess
argument_list|()
decl_stmt|;
name|Object
name|session
init|=
name|engine
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|boolean
name|emptyList
init|=
operator|(
name|cmsObjects
operator|==
literal|null
operator|||
name|cmsObjects
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|InstanceBridge
name|ib
range|:
name|instanceBridges
control|)
block|{
comment|// cms objects will be null in the case of initial bridge execution or update of bridge
comment|// definitions
if|if
condition|(
name|emptyList
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|retrievedObjects
init|=
name|accessor
operator|.
name|getNodeByPath
argument_list|(
name|ib
operator|.
name|getQuery
argument_list|()
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|cmsObjects
operator|=
operator|new
name|ArrayList
argument_list|<
name|DObject
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CMSObject
name|o
range|:
name|retrievedObjects
control|)
block|{
name|cmsObjects
operator|.
name|add
argument_list|(
name|adapter
operator|.
name|wrapAsDObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to obtain CMS Objects for query {}"
argument_list|,
name|ib
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
for|for
control|(
name|DObject
name|contentObject
range|:
name|cmsObjects
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|contentObject
operator|.
name|getPath
argument_list|()
argument_list|,
name|ib
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|&&
operator|!
name|isRootNode
argument_list|(
name|ib
operator|.
name|getQuery
argument_list|()
argument_list|,
name|contentObject
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|getEnhancements
argument_list|(
name|contentObject
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// work without bridge definitions
for|for
control|(
name|DObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|cmsObject
operator|.
name|getInstance
argument_list|()
argument_list|)
condition|)
block|{
name|getEnhancements
argument_list|(
name|cmsObject
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|getEnhancements
parameter_list|(
name|DObject
name|cmsObject
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|WebResource
name|webResource
init|=
name|client
operator|.
name|resource
argument_list|(
name|engineRootResource
operator|+
literal|"content/"
operator|+
name|cmsObject
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getTextContent
argument_list|(
name|cmsObject
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|content
operator|.
name|contentEquals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
name|webResource
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
operator|.
name|put
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to create content item for cms object: {}"
argument_list|,
name|cmsObject
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|webResource
operator|=
name|client
operator|.
name|resource
argument_list|(
name|engineRootResource
operator|+
literal|"metadata/"
operator|+
name|cmsObject
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|enh
init|=
name|webResource
operator|.
name|accept
argument_list|(
literal|"application/rdf+xml"
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|mergeEnhancements
argument_list|(
name|cmsObject
argument_list|,
name|enh
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Empty content for object {}"
argument_list|,
name|cmsObject
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mergeEnhancements
parameter_list|(
name|DObject
name|cmsObject
parameter_list|,
name|String
name|enhancements
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|Model
name|enhModel
init|=
name|ModelFactory
operator|.
name|createDefaultModel
argument_list|()
decl_stmt|;
name|enhModel
operator|.
name|read
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|enhancements
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// first remove previously added enhancements from ontology
name|deleteEnhancementsOfCMSObject
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|DObject
index|[]
block|{
name|cmsObject
block|}
argument_list|)
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|engine
operator|.
name|getOntModel
argument_list|()
operator|.
name|add
argument_list|(
name|assignCMSObjectReferencesToEnhancements
argument_list|(
name|enhModel
argument_list|,
name|cmsObject
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add unique reference of cms objects to each enhancement of the types<b>Enhancement,      * EntityAnnotation</b> and<b>Text Annotation</b> to be able to delete the annotations in delete      * operation.      *       * @param enhModel      * @param reference      * @return {@link OntModel} which contains enhancements having      *         {@code CMSAdapterVocabulary.CMSAD_RESOURCE_REF_PROP}      */
specifier|private
name|OntModel
name|assignCMSObjectReferencesToEnhancements
parameter_list|(
name|Model
name|enhModel
parameter_list|,
name|String
name|reference
parameter_list|)
block|{
name|OntModel
name|enhOntModel
init|=
name|ModelFactory
operator|.
name|createOntologyModel
argument_list|(
name|OntModelSpec
operator|.
name|OWL_DL_MEM
argument_list|)
decl_stmt|;
name|enhOntModel
operator|.
name|add
argument_list|(
name|enhModel
argument_list|)
expr_stmt|;
name|reference
operator|=
name|ENHANCEMENT_PREFIX
operator|+
name|reference
expr_stmt|;
name|String
name|URI
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|processedURIs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Statement
argument_list|>
name|enhs
init|=
name|enhOntModel
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|NamespaceEnum
operator|.
name|enhancer
operator|+
literal|"Enhancement"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
for|for
control|(
name|Statement
name|stmt
range|:
name|enhs
control|)
block|{
name|URI
operator|=
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|getURI
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processedURIs
operator|.
name|contains
argument_list|(
name|URI
argument_list|)
condition|)
block|{
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|addProperty
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMSAD_RESOURCE_REF_PROP
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|processedURIs
operator|.
name|add
argument_list|(
name|URI
argument_list|)
expr_stmt|;
block|}
block|}
name|enhs
operator|=
name|enhOntModel
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|NamespaceEnum
operator|.
name|enhancer
operator|+
literal|"EntityAnnotation"
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
for|for
control|(
name|Statement
name|stmt
range|:
name|enhs
control|)
block|{
name|URI
operator|=
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|getURI
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processedURIs
operator|.
name|contains
argument_list|(
name|URI
argument_list|)
condition|)
block|{
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|addProperty
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMSAD_RESOURCE_REF_PROP
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|processedURIs
operator|.
name|add
argument_list|(
name|URI
argument_list|)
expr_stmt|;
block|}
block|}
name|enhs
operator|=
name|enhOntModel
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|NamespaceEnum
operator|.
name|enhancer
operator|+
literal|"TextAnnotation"
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
for|for
control|(
name|Statement
name|stmt
range|:
name|enhs
control|)
block|{
name|URI
operator|=
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|getURI
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|processedURIs
operator|.
name|contains
argument_list|(
name|URI
argument_list|)
condition|)
block|{
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|addProperty
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMSAD_RESOURCE_REF_PROP
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|processedURIs
operator|.
name|add
argument_list|(
name|URI
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|enhOntModel
return|;
block|}
specifier|private
name|String
name|getTextContent
parameter_list|(
name|DObject
name|cmsObject
parameter_list|)
block|{
name|List
argument_list|<
name|DProperty
argument_list|>
name|properties
init|=
literal|null
decl_stmt|;
try|try
block|{
name|properties
operator|=
name|cmsObject
operator|.
name|getProperties
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve properties for object {}"
argument_list|,
name|cmsObject
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
for|for
control|(
name|String
name|propertyName
range|:
operator|(
name|String
index|[]
operator|)
name|contentProperties
control|)
block|{
for|for
control|(
name|DProperty
name|property
range|:
name|properties
control|)
block|{
if|if
condition|(
name|property
operator|.
name|getName
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
comment|// assumed content property is single valued
return|return
name|property
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteObjects
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|List
argument_list|<
name|DObject
argument_list|>
name|cmsObjects
init|=
name|object2dobject
argument_list|(
name|objects
argument_list|,
name|engine
argument_list|)
decl_stmt|;
comment|// if there is bridge definitions try to fetch concept bridges
if|if
condition|(
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|InstanceBridge
argument_list|>
name|instanceBridges
init|=
name|MappingModelParser
operator|.
name|getInstanceBridges
argument_list|(
name|engine
operator|.
name|getBridgeDefinitions
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|InstanceBridge
name|ib
range|:
name|instanceBridges
control|)
block|{
name|List
argument_list|<
name|DObject
argument_list|>
name|processableObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|cmsObject
operator|.
name|getPath
argument_list|()
argument_list|,
name|ib
operator|.
name|getQuery
argument_list|()
argument_list|)
condition|)
block|{
name|processableObjects
operator|.
name|add
argument_list|(
name|cmsObject
argument_list|)
expr_stmt|;
block|}
block|}
name|deleteEnhancementsOfCMSObject
argument_list|(
name|processableObjects
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|DObject
argument_list|>
name|processableObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|cmsObject
operator|.
name|getInstance
argument_list|()
argument_list|)
condition|)
block|{
name|processableObjects
operator|.
name|add
argument_list|(
name|cmsObject
argument_list|)
expr_stmt|;
block|}
block|}
name|deleteEnhancementsOfCMSObject
argument_list|(
name|processableObjects
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteEnhancementsOfCMSObject
parameter_list|(
name|List
argument_list|<
name|DObject
argument_list|>
name|cmsObjects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|OntModel
name|model
init|=
name|engine
operator|.
name|getOntModel
argument_list|()
decl_stmt|;
name|OntologyResourceHelper
name|orh
init|=
name|engine
operator|.
name|getOntologyResourceHelper
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Statement
argument_list|>
name|enhs
init|=
name|model
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|ResourceFactory
operator|.
name|createResource
argument_list|(
name|NamespaceEnum
operator|.
name|enhancer
operator|+
literal|"Enhancement"
argument_list|)
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|deleteEnhancements
argument_list|(
name|cmsObjects
argument_list|,
name|enhs
argument_list|,
name|orh
argument_list|)
expr_stmt|;
name|enhs
operator|=
name|model
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|NamespaceEnum
operator|.
name|enhancer
operator|+
literal|"EntityAnnotation"
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|deleteEnhancements
argument_list|(
name|cmsObjects
argument_list|,
name|enhs
argument_list|,
name|orh
argument_list|)
expr_stmt|;
name|enhs
operator|=
name|model
operator|.
name|listStatements
argument_list|(
literal|null
argument_list|,
name|RDF
operator|.
name|type
argument_list|,
name|NamespaceEnum
operator|.
name|enhancer
operator|+
literal|"TextAnnotation"
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|deleteEnhancements
argument_list|(
name|cmsObjects
argument_list|,
name|enhs
argument_list|,
name|orh
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteEnhancements
parameter_list|(
name|List
argument_list|<
name|DObject
argument_list|>
name|cmsObjects
parameter_list|,
name|List
argument_list|<
name|Statement
argument_list|>
name|enhs
parameter_list|,
name|OntologyResourceHelper
name|orh
parameter_list|)
block|{
name|String
name|enhOwner
decl_stmt|;
name|String
name|reference
decl_stmt|;
for|for
control|(
name|Statement
name|stmt
range|:
name|enhs
control|)
block|{
name|Statement
name|refStmt
init|=
name|stmt
operator|.
name|getSubject
argument_list|()
operator|.
name|getProperty
argument_list|(
name|CMSAdapterVocabulary
operator|.
name|CMSAD_RESOURCE_REF_PROP
argument_list|)
decl_stmt|;
name|enhOwner
operator|=
name|refStmt
operator|.
name|getObject
argument_list|()
operator|.
name|asLiteral
argument_list|()
operator|.
name|getString
argument_list|()
expr_stmt|;
if|if
condition|(
name|refStmt
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DObject
name|cmsObject
range|:
name|cmsObjects
control|)
block|{
name|reference
operator|=
name|ENHANCEMENT_PREFIX
operator|+
name|cmsObject
operator|.
name|getID
argument_list|()
expr_stmt|;
if|if
condition|(
name|enhOwner
operator|.
name|contentEquals
argument_list|(
name|reference
argument_list|)
condition|)
block|{
name|orh
operator|.
name|deleteStatementsByResource
argument_list|(
name|refStmt
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|DObject
argument_list|>
name|object2dobject
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objects
parameter_list|,
name|MappingEngine
name|engine
parameter_list|)
block|{
name|List
argument_list|<
name|DObject
argument_list|>
name|dObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DObject
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|objects
operator|!=
literal|null
condition|)
block|{
name|DObjectAdapter
name|adapter
init|=
name|engine
operator|.
name|getDObjectAdapter
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|objects
control|)
block|{
if|if
condition|(
name|canProcess
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|dObjects
operator|.
name|add
argument_list|(
name|adapter
operator|.
name|wrapAsDObject
argument_list|(
operator|(
name|CMSObject
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dObjects
return|;
block|}
specifier|private
name|Boolean
name|isRootNode
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|objectPath
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|contentEquals
argument_list|(
name|objectPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|client
operator|=
name|Client
operator|.
name|create
argument_list|()
expr_stmt|;
name|Object
name|contentPropertiesObject
init|=
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROP_CONTENT_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentPropertiesObject
operator|instanceof
name|String
index|[]
condition|)
block|{
name|contentProperties
operator|=
operator|(
name|String
index|[]
operator|)
name|contentPropertiesObject
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|contentPropertiesObject
operator|!=
literal|null
condition|)
block|{
name|contentProperties
operator|=
operator|new
name|String
index|[
literal|1
index|]
expr_stmt|;
name|contentProperties
index|[
literal|0
index|]
operator|=
operator|(
name|String
operator|)
name|contentPropertiesObject
expr_stmt|;
block|}
block|}
name|engineRootResource
operator|=
operator|(
name|String
operator|)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROP_CONTENTHUB_RESOURCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|client
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|bindStore
parameter_list|(
name|Store
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|void
name|unbindStore
parameter_list|(
name|Store
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

