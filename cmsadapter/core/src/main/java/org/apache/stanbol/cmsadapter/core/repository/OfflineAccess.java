begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|MultiValueMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
operator|.
name|RepositoryAccessException
import|;
end_import

begin_comment
comment|/**  * This class is used for mocking a {@link RepositoryAccess} service when there is not possible to access a  * remote CMS Repository. Instead when initialized with a list of CMS Objects, Offline Access acts as a  * repository, providing an implementation of {@link RepositoryAccess} so that there no separate interface for  * offline processing.  *   *   * @author cihan  *   */
end_comment

begin_class
specifier|public
class|class
name|OfflineAccess
implements|implements
name|RepositoryAccess
block|{
name|MultiValueMap
name|nameMap
init|=
operator|new
name|MultiValueMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CMSObject
argument_list|>
name|cmsObjectMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CMSObject
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
name|propDefinitionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectTypeDefinition
argument_list|>
name|typeDefinitionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ObjectTypeDefinition
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO find a more suitable solution
name|Map
argument_list|<
name|Property
argument_list|,
name|CMSObject
argument_list|>
name|propertyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Property
argument_list|,
name|CMSObject
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|OfflineAccess
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|repository
parameter_list|)
block|{
for|for
control|(
name|Object
name|cmsObject
range|:
name|repository
control|)
block|{
if|if
condition|(
name|cmsObject
operator|instanceof
name|CMSObject
condition|)
block|{
name|processCMSOBject
argument_list|(
operator|(
name|CMSObject
operator|)
name|cmsObject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmsObject
operator|instanceof
name|ObjectTypeDefinition
condition|)
block|{
name|processObjectTypeDefinition
argument_list|(
operator|(
name|ObjectTypeDefinition
operator|)
name|cmsObject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmsObject
operator|instanceof
name|PropertyDefinition
condition|)
block|{
name|processPropertyDefinition
argument_list|(
operator|(
name|PropertyDefinition
operator|)
name|cmsObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Offline accessor can not handle type "
operator|+
name|cmsObject
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|processPropertyDefinition
parameter_list|(
name|PropertyDefinition
name|propDef
parameter_list|)
block|{
name|propDefinitionMap
operator|.
name|put
argument_list|(
name|propDef
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
name|propDef
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processObjectTypeDefinition
parameter_list|(
name|ObjectTypeDefinition
name|typeDef
parameter_list|)
block|{
name|typeDefinitionMap
operator|.
name|put
argument_list|(
name|typeDef
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
name|typeDef
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyDefinition
name|propDef
range|:
name|typeDef
operator|.
name|getPropertyDefinition
argument_list|()
control|)
block|{
name|propDefinitionMap
operator|.
name|put
argument_list|(
name|propDef
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
name|propDef
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processCMSOBject
parameter_list|(
name|CMSObject
name|cmsObject
parameter_list|)
block|{
name|cmsObjectMap
operator|.
name|put
argument_list|(
name|cmsObject
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
name|cmsObject
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nameMap
operator|.
name|containsValue
argument_list|(
name|cmsObject
operator|.
name|getLocalname
argument_list|()
argument_list|,
name|cmsObject
argument_list|)
condition|)
block|{
name|nameMap
operator|.
name|put
argument_list|(
name|cmsObject
operator|.
name|getLocalname
argument_list|()
argument_list|,
name|cmsObject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Property
name|prop
range|:
name|cmsObject
operator|.
name|getProperty
argument_list|()
control|)
block|{
name|propertyMap
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|cmsObject
argument_list|)
expr_stmt|;
name|propDefinitionMap
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getPropertyDefinition
argument_list|()
operator|.
name|getUniqueRef
argument_list|()
argument_list|,
name|prop
operator|.
name|getPropertyDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CMSObject
name|child
range|:
name|cmsObject
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|processCMSOBject
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getSession
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Offline Repository Access does not handle connections"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|getNodeByPath
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
name|getNodeByPath
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|CMSObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CMSObject
name|cmsObject
range|:
name|cmsObjectMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|path
argument_list|,
name|cmsObject
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|cmsObject
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
name|getNodeById
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|getNodeById
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|CMSObject
name|cmsObject
init|=
name|cmsObjectMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmsObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"No object with id="
operator|+
name|id
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CMSObject
index|[]
block|{
name|cmsObject
block|}
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|getNodeByName
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
name|getNodeByName
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|nodes
init|=
operator|(
name|List
argument_list|<
name|CMSObject
argument_list|>
operator|)
name|nameMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
name|nodes
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
name|getFirstNodeByPath
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|getFirstNodeByPath
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|CMSObject
name|cmsObject
range|:
name|cmsObjectMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|path
argument_list|,
name|cmsObject
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|cmsObject
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
name|getFirstNodeById
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|getFirstNodeById
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|private
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
return|return
name|getNodeById
argument_list|(
name|id
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|getFirstNodeByName
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
return|return
name|getFirstNodeByName
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|CMSObject
argument_list|>
name|nodes
init|=
operator|(
name|List
argument_list|<
name|CMSObject
argument_list|>
operator|)
name|nameMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
operator|||
name|nodes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getChildren
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|node
operator|.
name|getChildren
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectTypeDefinition
name|getObjectTypeDefinition
parameter_list|(
name|String
name|typeRef
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeDefinitionMap
operator|.
name|containsKey
argument_list|(
name|typeRef
argument_list|)
condition|)
block|{
return|return
name|typeDefinitionMap
operator|.
name|get
argument_list|(
name|typeRef
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"No object type definition with id "
operator|+
name|typeRef
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|node
operator|.
name|getProperty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getPropertyDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|instance
operator|.
name|getPropertyDefinition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|getParentTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
comment|// TODO Check if this interpreted correctly
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|parentTypeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectTypeDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|parentRef
range|:
name|instance
operator|.
name|getParentRef
argument_list|()
control|)
block|{
if|if
condition|(
name|cmsObjectMap
operator|.
name|containsKey
argument_list|(
name|parentRef
argument_list|)
condition|)
block|{
name|String
name|parentTypeRef
init|=
name|cmsObjectMap
operator|.
name|get
argument_list|(
name|parentRef
argument_list|)
operator|.
name|getObjectTypeRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeDefinitionMap
operator|.
name|containsKey
argument_list|(
name|parentTypeRef
argument_list|)
condition|)
block|{
name|parentTypeDefinitions
operator|.
name|add
argument_list|(
name|typeDefinitionMap
operator|.
name|get
argument_list|(
name|parentTypeRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|parentTypeDefinitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|getChildObjectTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
return|return
name|instance
operator|.
name|getObjectTypeDefinition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getContainerObject
parameter_list|(
name|Property
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyMap
operator|.
name|containsKey
argument_list|(
name|instance
argument_list|)
condition|)
block|{
return|return
name|propertyMap
operator|.
name|get
argument_list|(
name|instance
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"Container object for property not found"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PropertyDefinition
name|getPropertyDefinition
parameter_list|(
name|Property
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
return|return
name|instance
operator|.
name|getPropertyDefinition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
comment|// TODO find a good solution here.
comment|// throw new UnsupportedOperationException(
comment|// "Offline Repository Access does not handle connections, thus prefixes can not be accessible");
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRetrieve
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Offline Repository Access does not handle connections"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRetrieve
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Offline Repository Access does not handle connections"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CMSObject
name|getParentByNode
parameter_list|(
name|CMSObject
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
block|{
name|checkNullArgument
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|String
name|parentRef
init|=
name|instance
operator|.
name|getParentRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmsObjectMap
operator|.
name|containsKey
argument_list|(
name|parentRef
argument_list|)
condition|)
block|{
return|return
name|cmsObjectMap
operator|.
name|get
argument_list|(
name|parentRef
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryAccessException
argument_list|(
literal|"No object with id="
operator|+
name|parentRef
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkNullArgument
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
if|if
condition|(
name|argument
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Offline accessor can not handle non-null Session or Connection Info"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|String
name|pathExpr
parameter_list|,
name|String
name|realPath
parameter_list|)
block|{
comment|// TODO implement
if|if
condition|(
name|pathExpr
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|realPath
operator|.
name|contains
argument_list|(
name|pathExpr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathExpr
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|pathExpr
operator|.
name|contentEquals
argument_list|(
name|realPath
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

