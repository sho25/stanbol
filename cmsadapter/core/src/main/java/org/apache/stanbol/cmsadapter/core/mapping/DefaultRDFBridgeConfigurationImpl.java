begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|core
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|clerezza
operator|.
name|rdf
operator|.
name|core
operator|.
name|UriRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|mapping
operator|.
name|RDFBridgeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|entityhub
operator|.
name|servicesapi
operator|.
name|defaults
operator|.
name|NamespaceEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Main aim of this class is to provide ability to create {@code RDFBridgeConfiguration}s through the  * configuration interface of Felix console. Currently there are 5 configuration field:  *   *<ul>  *<li><b>Resource selector:</b></li> This property is used to filter resources from the RDF data. It should  * have the following syntax:<br>  *<br>  * rdf:Type> skos:Concept<br>  *<br>  * This example states that triples having<b>rdf:Type</b> predicate and<b>skos:Concept</b> object will be  * filtered. And subject of selected triples indicates the resource to be created as node/object in the  * repository. It is also acceptable to pass full URIs such as<br>  * http://www.w3.org/1999/02/22-rdf-syntax-ns#Type> http://www.w3.org/2004/02/skos/core#Concept<br>  *<li><b>Name:</b></li> This property indicates the predicate which points to the name of node/object to be  * created in the repository. It should indicate a single URI such as<b>rdfs:label</b> or  *<b>http://www.w3.org/2000/01/rdf-schema#label</b>. Actually name value is obtained through the triple  * (s,p,o) where s is one of the subjects filtered by the "Resource Selector" configuration parameter, p is  * this parameter.<br>  *<li><b>Properties:</b></li> This property specifies the properties of nodes/objects to be created in the  * repository. Value of this configuration should be like<b>skos:Definition> definition</b> or  *<b>skos:Definition</b>. First option states that skos:Definition property of a filtered subject will be  * created as a property having name "definition" of repository object. In the second case the name of the  * property will directly be "skos:Definition".  *<li><b>Children:</b></li> This property specifies the children of nodes/objecs to be created in the  * repository. Value of this configuration should be like<b>skos:narrower> narrowerObject</b> or  *<b>skos:narrower> rdfs:label</b>. First option has same logic with the previous parameter. In the second  * case, rdfs:label of resource representing child object will be set as the name of child object/node in the  * repository. This option would be useful to create hierarchies.  *</ul>  *   * @author suat  *   */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|RDFBridgeConfiguration
operator|.
name|class
argument_list|)
annotation|@
name|Properties
argument_list|(
name|value
operator|=
block|{
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DefaultRDFBridgeConfigurationImpl
operator|.
name|PROP_RESOURCE_SELECTOR
argument_list|,
name|value
operator|=
literal|"rdf:Type> skos:Concept"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DefaultRDFBridgeConfigurationImpl
operator|.
name|PROP_NAME
argument_list|,
name|value
operator|=
literal|"rdfs:label"
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DefaultRDFBridgeConfigurationImpl
operator|.
name|PROP_PROPERTIES
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
block|{
literal|"skos:related> relatedWith"
block|,
literal|"skos:definition> definition"
block|}
argument_list|)
block|,
annotation|@
name|Property
argument_list|(
name|name
operator|=
name|DefaultRDFBridgeConfigurationImpl
operator|.
name|PROP_CHILDREN
argument_list|,
name|cardinality
operator|=
literal|1000
argument_list|,
name|value
operator|=
block|{
literal|"skos:narrower> narrowerConcept"
block|}
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|DefaultRDFBridgeConfigurationImpl
implements|implements
name|RDFBridgeConfiguration
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROP_RESOURCE_SELECTOR
init|=
literal|"org.apache.stanbol.cmsadapter.rdfbridge.resourceSelector"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_PROPERTIES
init|=
literal|"org.apache.stanbol.cmsadapter.rdfbridge.properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_NAME
init|=
literal|"org.apache.stanbol.cmsadapter.rdfbridge.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_CHILDREN
init|=
literal|"org.apache.stanbol.cmsadapter.rdfbridge.children"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultRDFBridgeConfigurationImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UriRef
name|targetResourcePredicate
decl_stmt|;
specifier|private
name|UriRef
name|targetResourceValue
decl_stmt|;
specifier|private
name|UriRef
name|nameResource
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|targetPropertyMappings
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|targetChildrenMappings
init|=
operator|new
name|HashMap
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|parseTargetResourceConfig
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|parsePropertyMappings
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|parseChilrenMappings
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameResource
operator|=
name|parseUriRefFromConfig
argument_list|(
operator|(
name|String
operator|)
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|PROP_NAME
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UriRef
name|getTargetResourcePredicate
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetResourcePredicate
return|;
block|}
annotation|@
name|Override
specifier|public
name|UriRef
name|getTargetResourceValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetResourceValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|UriRef
name|getNameResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameResource
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|getTargetPropertyResources
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetPropertyMappings
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|UriRef
argument_list|,
name|Object
argument_list|>
name|getChildrenResources
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetChildrenMappings
return|;
block|}
specifier|private
name|void
name|parseTargetResourceConfig
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|String
name|targetResourceConfig
init|=
operator|(
name|String
operator|)
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|PROP_RESOURCE_SELECTOR
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
index|[]
name|configParts
init|=
name|parseConfigParts
argument_list|(
name|targetResourceConfig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|targetResourcePredicate
operator|=
name|parseUriRefFromConfig
argument_list|(
name|configParts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetResourceValue
operator|=
name|parseUriRefFromConfig
argument_list|(
name|configParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parsePropertyMappings
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Object
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|PROP_PROPERTIES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
comment|// not the case
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|config
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
try|try
block|{
name|String
index|[]
name|configParts
init|=
name|parseConfigParts
argument_list|(
name|config
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|targetPropertyMappings
operator|.
name|put
argument_list|(
name|parseUriRefFromConfig
argument_list|(
name|configParts
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|configParts
index|[
name|configParts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse configuration value: {}"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration value should be in the format e.g skos:Definition> definition"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
for|for
control|(
name|String
name|config
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
try|try
block|{
name|String
index|[]
name|configParts
init|=
name|parseConfigParts
argument_list|(
name|config
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|targetPropertyMappings
operator|.
name|put
argument_list|(
name|parseUriRefFromConfig
argument_list|(
name|configParts
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|configParts
index|[
name|configParts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse configuration value: {}"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration value should be in the format e.g skos:Definition> definition"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|parseChilrenMappings
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|Object
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|checkProperty
argument_list|(
name|properties
argument_list|,
name|PROP_CHILDREN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
comment|// not the case
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|config
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
try|try
block|{
name|String
index|[]
name|configParts
init|=
name|parseConfigParts
argument_list|(
name|config
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|targetChildrenMappings
operator|.
name|put
argument_list|(
name|parseUriRefFromConfig
argument_list|(
name|configParts
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|parsePropertyName
argument_list|(
name|configParts
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse configuration value: {}"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration value should be in the format e.g skos:Definition> definition"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
for|for
control|(
name|String
name|config
range|:
operator|(
name|String
index|[]
operator|)
name|value
control|)
block|{
try|try
block|{
name|String
index|[]
name|configParts
init|=
name|parseConfigParts
argument_list|(
name|config
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|targetChildrenMappings
operator|.
name|put
argument_list|(
name|parseUriRefFromConfig
argument_list|(
name|configParts
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|parsePropertyName
argument_list|(
name|configParts
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to parse configuration value: {}"
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Configuration value should be in the format e.g skos:Definition> definition"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|UriRef
name|parseUriRefFromConfig
parameter_list|(
name|String
name|config
parameter_list|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|config
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Object
name|parsePropertyName
parameter_list|(
name|String
name|config
parameter_list|,
name|boolean
name|resolveURI
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|&&
name|resolveURI
condition|)
block|{
return|return
operator|new
name|UriRef
argument_list|(
name|NamespaceEnum
operator|.
name|getFullName
argument_list|(
name|config
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|config
return|;
block|}
block|}
specifier|private
name|Object
name|checkProperty
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|required
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|required
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|key
argument_list|,
literal|"Failed to get value for this property"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
specifier|private
name|String
index|[]
name|parseConfigParts
parameter_list|(
name|String
name|config
parameter_list|,
name|boolean
name|twoParts
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|String
index|[]
name|configParts
init|=
name|config
operator|.
name|split
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
name|int
name|parts
init|=
name|configParts
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|2
operator|&&
name|twoParts
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROP_RESOURCE_SELECTOR
argument_list|,
literal|"Target resource and resource value should be seperated by a single'>' sign"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parts
operator|==
literal|1
operator|||
name|parts
operator|==
literal|2
condition|)
block|{
name|configParts
index|[
literal|0
index|]
operator|=
name|configParts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|parts
operator|==
literal|2
condition|)
block|{
name|configParts
index|[
literal|1
index|]
operator|=
name|configParts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|PROP_RESOURCE_SELECTOR
argument_list|,
literal|"Target resource and resource value should be seperated by a single'>' sign"
argument_list|)
throw|;
block|}
return|return
name|configParts
return|;
block|}
block|}
end_class

end_unit

