begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
package|;
end_package

begin_comment
comment|/**  * This class contains the information that is required obtain a session from a content repository.  *   * @author suat  *   */
end_comment

begin_class
specifier|public
class|class
name|ConnectionInfo
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JCR_CONNECTION_STRING
init|=
literal|"JCR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CMIS_CONNECTION_STRING
init|=
literal|"CMIS"
decl_stmt|;
specifier|private
name|String
name|repositoryURL
decl_stmt|;
specifier|private
name|String
name|workspaceIdentifier
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|connectionType
decl_stmt|;
specifier|public
name|ConnectionInfo
parameter_list|(
name|String
name|repositoryURL
parameter_list|,
name|String
name|workspaceIdentifier
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|connectionType
parameter_list|)
block|{
name|this
operator|.
name|repositoryURL
operator|=
name|repositoryURL
expr_stmt|;
name|this
operator|.
name|workspaceIdentifier
operator|=
name|workspaceIdentifier
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|connectionType
operator|=
name|connectionType
expr_stmt|;
block|}
specifier|public
name|String
name|getRepositoryURL
parameter_list|()
block|{
return|return
name|repositoryURL
return|;
block|}
specifier|public
name|String
name|getWorkspaceIdentifier
parameter_list|()
block|{
return|return
name|workspaceIdentifier
return|;
block|}
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|String
name|getConnectionType
parameter_list|()
block|{
return|return
name|connectionType
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|connectionType
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|connectionType
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|password
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|password
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|repositoryURL
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|repositoryURL
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|username
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|username
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|workspaceIdentifier
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|workspaceIdentifier
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ConnectionInfo
name|other
init|=
operator|(
name|ConnectionInfo
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|connectionType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|connectionType
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|connectionType
operator|.
name|equals
argument_list|(
name|other
operator|.
name|connectionType
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|password
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|password
operator|.
name|equals
argument_list|(
name|other
operator|.
name|password
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|repositoryURL
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|repositoryURL
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|repositoryURL
operator|.
name|equals
argument_list|(
name|other
operator|.
name|repositoryURL
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|username
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|username
operator|.
name|equals
argument_list|(
name|other
operator|.
name|username
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|workspaceIdentifier
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|workspaceIdentifier
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|workspaceIdentifier
operator|.
name|equals
argument_list|(
name|other
operator|.
name|workspaceIdentifier
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

