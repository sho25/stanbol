begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
package|;
end_package

begin_comment
comment|/**  * Base class for which can be extended by any {@link Processor} implementation. This class contains common  * functions that can be used in {@link Processor} implementations.  *   */
end_comment

begin_class
specifier|public
class|class
name|BaseProcessor
block|{
comment|/**      * Detects whether the path of a CMS object specified in<i>path</i> parameter is included in the      *<i>query</i> parameter.      *       * @param path      * @param query      * @return      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|query
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|startsWith
argument_list|(
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|||
name|path
operator|.
name|contentEquals
argument_list|(
name|query
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|path
operator|.
name|equals
argument_list|(
name|query
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

