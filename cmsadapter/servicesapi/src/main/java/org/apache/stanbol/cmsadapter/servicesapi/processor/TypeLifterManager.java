begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|immediate
operator|=
literal|true
argument_list|)
annotation|@
name|Service
argument_list|(
name|value
operator|=
name|TypeLifterManager
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TypeLifterManager
block|{
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|MANDATORY_MULTIPLE
argument_list|,
name|referenceInterface
operator|=
name|TypeLifter
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|bind
operator|=
literal|"bindTypeLifter"
argument_list|,
name|unbind
operator|=
literal|"unbindTypeLifter"
argument_list|)
specifier|private
name|List
argument_list|<
name|TypeLifter
argument_list|>
name|typeLifters
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|TypeLifter
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TypeLifterManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|TypeLifter
name|getRepositoryAccessor
parameter_list|(
name|String
name|connectionType
parameter_list|)
block|{
for|for
control|(
name|TypeLifter
name|typeLifter
range|:
name|typeLifters
control|)
block|{
if|if
condition|(
name|typeLifter
operator|.
name|canLift
argument_list|(
name|connectionType
argument_list|)
condition|)
block|{
return|return
name|typeLifter
return|;
block|}
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"No suitable type lifter implementation for connection type: {} "
argument_list|,
name|connectionType
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|bindTypeLifter
parameter_list|(
name|TypeLifter
name|typeLifter
parameter_list|)
block|{
name|typeLifters
operator|.
name|add
argument_list|(
name|typeLifter
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unbindTypeLifter
parameter_list|(
name|TypeLifter
name|typeLifter
parameter_list|)
block|{
name|typeLifters
operator|.
name|remove
argument_list|(
name|typeLifter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

