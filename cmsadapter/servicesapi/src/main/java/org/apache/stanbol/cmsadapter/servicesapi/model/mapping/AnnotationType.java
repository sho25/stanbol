begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|//
end_comment

begin_comment
comment|// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.3-hudson-jaxb-ri-2.2.3-3-
end_comment

begin_comment
comment|// See<a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
end_comment

begin_comment
comment|// Any modifications to this file will be lost upon recompilation of the source schema.
end_comment

begin_comment
comment|// Generated on: 2011.05.09 at 02:52:53 PM EEST
end_comment

begin_comment
comment|//
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|mapping
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlEnum
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlEnumValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_comment
comment|/**  *<p>Java class for AnnotationType.  *   *<p>The following schema fragment specifies the expected content contained within this class.  *<p>  *<pre>  *&lt;simpleType name="AnnotationType">  *&lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">  *&lt;enumeration value="subsumption"/>  *&lt;enumeration value="transitive"/>  *&lt;enumeration value="inverseFunctional"/>  *&lt;enumeration value="instanceOf"/>  *&lt;enumeration value="equivalentClass"/>  *&lt;enumeration value="disjointWith"/>  *&lt;enumeration value="functional"/>  *&lt;enumeration value="symmetric"/>  *&lt;/restriction>  *&lt;/simpleType>  *</pre>  *   */
end_comment

begin_enum
annotation|@
name|XmlType
argument_list|(
name|name
operator|=
literal|"AnnotationType"
argument_list|)
annotation|@
name|XmlEnum
specifier|public
enum|enum
name|AnnotationType
block|{
annotation|@
name|XmlEnumValue
argument_list|(
literal|"subsumption"
argument_list|)
name|SUBSUMPTION
argument_list|(
literal|"subsumption"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"transitive"
argument_list|)
name|TRANSITIVE
argument_list|(
literal|"transitive"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"inverseFunctional"
argument_list|)
name|INVERSE_FUNCTIONAL
argument_list|(
literal|"inverseFunctional"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"instanceOf"
argument_list|)
name|INSTANCE_OF
argument_list|(
literal|"instanceOf"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"equivalentClass"
argument_list|)
name|EQUIVALENT_CLASS
argument_list|(
literal|"equivalentClass"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"disjointWith"
argument_list|)
name|DISJOINT_WITH
argument_list|(
literal|"disjointWith"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"functional"
argument_list|)
name|FUNCTIONAL
argument_list|(
literal|"functional"
argument_list|)
block|,
annotation|@
name|XmlEnumValue
argument_list|(
literal|"symmetric"
argument_list|)
name|SYMMETRIC
argument_list|(
literal|"symmetric"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
name|AnnotationType
parameter_list|(
name|String
name|v
parameter_list|)
block|{
name|value
operator|=
name|v
expr_stmt|;
block|}
specifier|public
name|String
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|AnnotationType
name|fromValue
parameter_list|(
name|String
name|v
parameter_list|)
block|{
for|for
control|(
name|AnnotationType
name|c
range|:
name|AnnotationType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|value
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|v
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

