begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|CMSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|ObjectTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|stanbol
operator|.
name|cmsadapter
operator|.
name|servicesapi
operator|.
name|model
operator|.
name|web
operator|.
name|PropertyDefinition
import|;
end_import

begin_interface
specifier|public
interface|interface
name|RepositoryAccess
block|{
name|Object
name|getSession
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Opens a new connection using connection info and retrieves the item identified by path.      *       * @param path      * @param connectionInfo      * @return      * @throws RepositoryAccessException      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Opens a new connection using connection info and retrieves the item identified by id.      *       * @param id      * @param connectionInfo      * @return      * @throws RepositoryAccessException      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Uses an already established Session if, it is not desired to open a new connection.      *       * @param path      * @param Session      * @return      * @throws RepositoryAccessException      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Uses an already established Session if, it is not desired to open a new connection.      *       * @param id      * @param Session      * @return      * @throws RepositoryAccessException      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Returns all nodes by name. Uses existing connection      *       * @param name      * @param session      * @return      * @throws RepositoryAccessException      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Returns all nodes by name, through a newly opened connection.      *       * @param name      * @param connectionInfo      * @return      * @throws RepositoryAccessException      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Opens a new connection using connection info and retrieves the item identified by path.      *       * @param path      * @param connectionInfo      * @return      * @throws RepositoryAccessException      */
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Opens a new connection using connection info and retrieves the item identified by id.      *       * @param id      * @param connectionInfo      * @return      * @throws RepositoryAccessException      */
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Uses an already established Session if, it is not desired to open a new connection.      *       * @param path      * @param Session      * @return      * @throws RepositoryAccessException      */
name|CMSObject
name|getFirstNodeByPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Uses an already established Session if, it is not desired to open a new connection.      *       * @param id      * @param Session      * @return      * @throws RepositoryAccessException      */
name|CMSObject
name|getFirstNodeById
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Returns all nodes by name. Uses existing connection      *       * @param name      * @param session      * @return      * @throws RepositoryAccessException      */
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Returns all nodes by name, through a newly opened connection.      *       * @param name      * @param connectionInfo      * @return      * @throws RepositoryAccessException      */
name|CMSObject
name|getFirstNodeByName
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve children of a specific node. Uses existing connection.      *       * @param node      * @param session      *            An open connection, ready to access repository.      * @return list of children of the specified node as {@link CMSObject}s      * @throws RepositoryAccessException      *             If repository is not accessible or<b>node</b> can not be found.      */
name|List
argument_list|<
name|CMSObject
argument_list|>
name|getChildren
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve an {@link ObjectTypeDefinition}, given its reference. Uses existing connection.      *       * @param typeRef      *            Unique identifier of the type in the repository.      * @param session      *            An open connection, ready to access repository.      * @return type definition identified by<b>typeRef</b> as {@link ObjectTypeDefinition}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>node</b> can not be found.      */
name|ObjectTypeDefinition
name|getObjectTypeDefinition
parameter_list|(
name|String
name|typeRef
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve properties of a CMS object. Uses an existing connection.      *       * @param node      *            A {@link CMSObject} that represents a CMS object in a repository.      * @param session      *            An open connection, ready to access repository.      * @return list of properties of the CMS object, as {@link Property}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>node</b> can not be found.      */
name|List
argument_list|<
name|Property
argument_list|>
name|getProperties
parameter_list|(
name|CMSObject
name|node
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve property definitions of a specific type. Uses an existing connection.      *       * @param instance      * @param session      *            An open connection, ready to access repository.      * @return list of property definitions of the type, as {@link PropertyDefinition}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>instance</b> can not be found.      */
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getPropertyDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve parent type definitions of a specific type definition. Uses an existing connection.      *       * @param instance      * @param session      *            An open connection, ready to access repository.      * @return list of type definitions as {@link ObjectTypeDefinition}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>instance</b> can not be found.      */
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|getParentTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve child type definitions of a specific type definition. Uses an existing connection.      *       * @param instance      * @param session      *            An open connection, ready to access repository.      * @return list of type definitions, as {@link ObjectTypeDefinition}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>instance</b> can not be found.      */
name|List
argument_list|<
name|ObjectTypeDefinition
argument_list|>
name|getChildObjectTypeDefinitions
parameter_list|(
name|ObjectTypeDefinition
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to get the CMS object which has<b>instance</b> as a property. Uses an existing connection.      *       * @param instance      * @param session      *            An open connection, ready to access repository.      * @return CMS object, as a {@link CMSObject}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>instance</b> can not be found.      */
name|CMSObject
name|getContainerObject
parameter_list|(
name|Property
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to get property definition of a property that belongs to a CMS object.      *       * @param instance      * @param session      *            An open connection, ready to access repository.      * @return Property definition of the<b>instance</b>, as a {@link PropertyDefinition}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>instance</b> can not be found.      *       */
name|PropertyDefinition
name|getPropertyDefinition
parameter_list|(
name|Property
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to resolve namespace prefixes used by CMS repository. Uses an existing connection.      *       * @param prefix      *            Prefix to be resolved.      * @param session      *            An open connection, ready to access repository.      * @return full URI of the namespace      * @throws RepositoryAccessException      *             If repository is not accessible or<b>prefix</b> can not be resolved.      */
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      * Method to retrieve parent of a CMS node.      *       * @param instance      * @param session      *            An open connection, ready to access repository.      * @return parent of the node, as a {@link CMSObject}      * @throws RepositoryAccessException      *             If repository is not accessible or<b>prefix</b> can not be resolved.      */
name|CMSObject
name|getParentByNode
parameter_list|(
name|CMSObject
name|instance
parameter_list|,
name|Object
name|session
parameter_list|)
throws|throws
name|RepositoryAccessException
function_decl|;
comment|/**      *       * @param connectionInfo      * @return true if the {@link RepositoryAccess} instance can connect to repository with the given      *<b>connectionInfo</b>      */
name|boolean
name|canRetrieve
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
function_decl|;
comment|/**      *       * @param session      * @return true if the {@link RepositoryAccess} instance can connect to repository with the given      *<b>session</b>      */
name|boolean
name|canRetrieve
parameter_list|(
name|Object
name|session
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

